
C:\Users\Ted\AppData\Local\Temp\arduino_build_842050/OpenOBS_sensor.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
       8:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
       c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      10:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      14:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      18:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      1c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      20:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      24:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      28:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      30:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      34:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      38:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      3c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      40:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_16>
      44:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      48:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_18>
      4c:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_19>
      50:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      54:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      58:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      5c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>
      60:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_24>
      64:	0c 94 9b 00 	jmp	0x136	; 0x136 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	45 52       	subi	r20, 0x25	; 37
      6a:	52 4f       	sbci	r21, 0xF2	; 242
      6c:	52 3a       	cpi	r21, 0xA2	; 162
      6e:	20 4e       	sbci	r18, 0xE0	; 224
      70:	6f 20       	and	r6, r15
      72:	63 61       	ori	r22, 0x13	; 19
      74:	6c 6c       	ori	r22, 0xCC	; 204
      76:	62 61       	ori	r22, 0x12	; 18
      78:	63 6b       	ori	r22, 0xB3	; 179
      7a:	20 61       	ori	r18, 0x10	; 16
      7c:	76 61       	ori	r23, 0x16	; 22
      7e:	69 6c       	ori	r22, 0xC9	; 201
      80:	61 62       	ori	r22, 0x21	; 33
      82:	6c 65       	ori	r22, 0x5C	; 92
      84:	20 66       	ori	r18, 0x60	; 96
      86:	6f 72       	andi	r22, 0x2F	; 47
      88:	20 70       	andi	r18, 0x00	; 0
      8a:	61 63       	ori	r22, 0x31	; 49
      8c:	6b 65       	ori	r22, 0x5B	; 91
      8e:	74 20       	and	r7, r4
      90:	49 44       	sbci	r20, 0x49	; 73
      92:	20 00       	.word	0x0020	; ????

00000094 <port_to_output_PGM>:
      94:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000009e <digital_pin_to_port_PGM>:
      9e:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ae:	03 03 03 03 02 02 03                                .......

000000b5 <digital_pin_to_bit_mask_PGM>:
      b5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c5:	04 08 10 20 40 80 40                                ... @.@

000000cc <digital_pin_to_timer_PGM>:
      cc:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000000e4 <__ctors_start>:
__ctors_start():
      e4:	74 0a       	sbc	r7, r20

000000e6 <__ctors_end>:
__dtors_end():
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      f2:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      f4:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      f6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      f8:	e0 e3       	ldi	r30, 0x30	; 48
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      fa:	f0 e3       	ldi	r31, 0x30	; 48
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      fe:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     100:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     102:	a8 39       	cpi	r26, 0x98	; 152
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     104:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     108:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     10a:	a8 e9       	ldi	r26, 0x98	; 152
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     10c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     112:	a0 39       	cpi	r26, 0x90	; 144
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     114:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>

00000118 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     118:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     11a:	c3 e7       	ldi	r28, 0x73	; 115
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     11c:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     11e:	04 c0       	rjmp	.+8      	; 0x128 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     120:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     122:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     124:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     128:	c2 37       	cpi	r28, 0x72	; 114
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     12a:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     12c:	c9 f7       	brne	.-14     	; 0x120 <__do_global_ctors+0x8>
     12e:	0e 94 44 0b 	call	0x1688	; 0x1688 <main>
     132:	0c 94 16 18 	jmp	0x302c	; 0x302c <_exit>

00000136 <__bad_interrupt>:
__vector_22():
     136:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013a <twi_readFrom.part.0.constprop.70>:
twi_readFrom.part.0.constprop.70():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     13a:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <twi_state>
     13e:	91 11       	cpse	r25, r1
     140:	fc cf       	rjmp	.-8      	; 0x13a <twi_readFrom.part.0.constprop.70>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <twi_state>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
     148:	40 93 a4 02 	sts	0x02A4, r20	; 0x8002a4 <twi_sendStop>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     14c:	2f ef       	ldi	r18, 0xFF	; 255
     14e:	20 93 a3 02 	sts	0x02A3, r18	; 0x8002a3 <twi_error>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     152:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <twi_masterBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     156:	26 0f       	add	r18, r22
     158:	20 93 a1 02 	sts	0x02A1, r18	; 0x8002a1 <twi_masterBufferLength>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     15c:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <twi_slarw>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
     160:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <twi_slarw>
     164:	88 0f       	add	r24, r24
     166:	89 2b       	or	r24, r25
     168:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <twi_slarw>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
     16c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_inRepStart>
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	f9 f4       	brne	.+62     	; 0x1b2 <twi_readFrom.part.0.constprop.70+0x78>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     174:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi_inRepStart>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187
    do {
      TWDR = twi_slarw;
     178:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <twi_slarw>
     17c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188
    } while(TWCR & _BV(TWWC));
     180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     184:	83 fd       	sbrc	r24, 3
     186:	f8 cf       	rjmp	.-16     	; 0x178 <twi_readFrom.part.0.constprop.70+0x3e>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     188:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     18e:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <twi_state>
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	e1 f3       	breq	.-8      	; 0x18e <twi_readFrom.part.0.constprop.70+0x54>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
     196:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <twi_masterBufferIndex>
     19a:	86 17       	cp	r24, r22
     19c:	10 f4       	brcc	.+4      	; 0x1a2 <twi_readFrom.part.0.constprop.70+0x68>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
     19e:	60 91 a2 02 	lds	r22, 0x02A2	; 0x8002a2 <twi_masterBufferIndex>
     1a2:	af e7       	ldi	r26, 0x7F	; 127
     1a4:	b2 e0       	ldi	r27, 0x02	; 2
     1a6:	ef e5       	ldi	r30, 0x5F	; 95
     1a8:	f2 e0       	ldi	r31, 0x02	; 2
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	86 13       	cpse	r24, r22
     1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <twi_readFrom.part.0.constprop.70+0x7c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
     1b0:	08 95       	ret
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     1b2:	85 ee       	ldi	r24, 0xE5	; 229
     1b4:	ea cf       	rjmp	.-44     	; 0x18a <twi_readFrom.part.0.constprop.70+0x50>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
     1b6:	9d 91       	ld	r25, X+
     1b8:	91 93       	st	Z+, r25
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     1ba:	8f 5f       	subi	r24, 0xFF	; 255
     1bc:	f7 cf       	rjmp	.-18     	; 0x1ac <twi_readFrom.part.0.constprop.70+0x72>

000001be <TwoWire::endTransmission(unsigned char) [clone .constprop.66]>:
_ZN7TwoWire15endTransmissionEh.constprop.66():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:173
//  the bus tenure has been properly ended with a STOP. It
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     1be:	98 2f       	mov	r25, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     1c0:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <TwoWire::txBufferLength>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     1c6:	21 32       	cpi	r18, 0x21	; 33
     1c8:	08 f0       	brcs	.+2      	; 0x1cc <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0xe>
     1ca:	43 c0       	rjmp	.+134    	; 0x252 <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0x94>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     1cc:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <twi_state>
     1d0:	81 11       	cpse	r24, r1
     1d2:	fc cf       	rjmp	.-8      	; 0x1cc <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0xe>
_ZN7TwoWire15endTransmissionEh.constprop.66():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:176
     1d4:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <TwoWire::txAddress>
twi_writeTo():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
     1d8:	32 e0       	ldi	r19, 0x02	; 2
     1da:	30 93 a5 02 	sts	0x02A5, r19	; 0x8002a5 <twi_state>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
     1de:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <twi_sendStop>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     1e2:	9f ef       	ldi	r25, 0xFF	; 255
     1e4:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <twi_error>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     1e8:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <twi_masterBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
     1ec:	20 93 a1 02 	sts	0x02A1, r18	; 0x8002a1 <twi_masterBufferLength>
     1f0:	ad e3       	ldi	r26, 0x3D	; 61
     1f2:	b2 e0       	ldi	r27, 0x02	; 2
     1f4:	ef e7       	ldi	r30, 0x7F	; 127
     1f6:	f2 e0       	ldi	r31, 0x02	; 2
_ZN7TwoWire15endTransmissionEh.constprop.66():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     1f8:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
     1fa:	29 13       	cpse	r18, r25
     1fc:	31 c0       	rjmp	.+98     	; 0x260 <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0xa2>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     1fe:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <twi_slarw>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
     202:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <twi_slarw>
     206:	88 0f       	add	r24, r24
     208:	89 2b       	or	r24, r25
     20a:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <twi_slarw>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     20e:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_inRepStart>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	49 f5       	brne	.+82     	; 0x268 <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0xaa>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
     216:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi_inRepStart>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269
    do {
      TWDR = twi_slarw;
     21a:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <twi_slarw>
     21e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270
    } while(TWCR & _BV(TWWC));
     222:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     226:	83 fd       	sbrc	r24, 3
     228:	f8 cf       	rjmp	.-16     	; 0x21a <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0x5c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     22a:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     22c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     230:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <twi_state>
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	e1 f3       	breq	.-8      	; 0x230 <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0x72>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
     238:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <twi_error>
     23c:	8f 3f       	cpi	r24, 0xFF	; 255
     23e:	b1 f0       	breq	.+44     	; 0x26c <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0xae>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     240:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <twi_error>
     244:	80 32       	cpi	r24, 0x20	; 32
     246:	a1 f0       	breq	.+40     	; 0x270 <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0xb2>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     248:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <twi_error>
     24c:	80 33       	cpi	r24, 0x30	; 48
     24e:	91 f0       	breq	.+36     	; 0x274 <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0xb6>
_ZN7TwoWire15endTransmissionEh.constprop.66():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     250:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:178
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     252:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TwoWire::txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:179
  txBufferLength = 0;
     256:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <TwoWire::txBufferLength>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:181
  // indicate that we are done transmitting
  transmitting = 0;
     25a:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <TwoWire::transmitting>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:183
  return ret;
}
     25e:	08 95       	ret
twi_writeTo():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     260:	3d 91       	ld	r19, X+
     262:	31 93       	st	Z+, r19
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     264:	9f 5f       	subi	r25, 0xFF	; 255
     266:	c9 cf       	rjmp	.-110    	; 0x1fa <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0x3c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     268:	85 ee       	ldi	r24, 0xE5	; 229
     26a:	e0 cf       	rjmp	.-64     	; 0x22c <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0x6e>
_ZN7TwoWire15endTransmissionEh.constprop.66():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	f1 cf       	rjmp	.-30     	; 0x252 <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0x94>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	ef cf       	rjmp	.-34     	; 0x252 <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0x94>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	ed cf       	rjmp	.-38     	; 0x252 <TwoWire::endTransmission(unsigned char) [clone .constprop.66]+0x94>

00000278 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:241
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     278:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <TwoWire::rxBufferLength>
     27c:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <TwoWire::rxBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:242
}
     280:	89 1b       	sub	r24, r25
     282:	99 0b       	sbc	r25, r25
     284:	08 95       	ret

00000286 <Packet::stuffPacket(unsigned char*, unsigned char const&) [clone .constprop.49]>:
_ZN6Packet11stuffPacketEPhRKh.constprop.49():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:375
  * const uint8_t &len - Number of elements in arr[]
 Return:
 -------
  * void
*/
void Packet::stuffPacket(uint8_t arr[], const uint8_t& len)
     286:	fc 01       	movw	r30, r24
findLast():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:353
  * int16_t - Index of last instance of the value START_BYTE within the given
  packet array
*/
int16_t Packet::findLast(uint8_t arr[], const uint8_t& len)
{
	for (uint8_t i = (len - 1); i != 0xFF; i--)
     288:	db 01       	movw	r26, r22
     28a:	9c 91       	ld	r25, X
     28c:	91 50       	subi	r25, 0x01	; 1
_ZN6Packet11stuffPacketEPhRKh.constprop.49():
     28e:	49 2f       	mov	r20, r25
findLast():
     290:	4f 3f       	cpi	r20, 0xFF	; 255
     292:	c9 f0       	breq	.+50     	; 0x2c6 <Packet::stuffPacket(unsigned char*, unsigned char const&) [clone .constprop.49]+0x40>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:354
		if (arr[i] == START_BYTE)
     294:	24 2f       	mov	r18, r20
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	df 01       	movw	r26, r30
     29a:	a2 0f       	add	r26, r18
     29c:	b3 1f       	adc	r27, r19
     29e:	8c 91       	ld	r24, X
     2a0:	8e 37       	cpi	r24, 0x7E	; 126
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <Packet::stuffPacket(unsigned char*, unsigned char const&) [clone .constprop.49]+0x22>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:353
  * int16_t - Index of last instance of the value START_BYTE within the given
  packet array
*/
int16_t Packet::findLast(uint8_t arr[], const uint8_t& len)
{
	for (uint8_t i = (len - 1); i != 0xFF; i--)
     2a4:	41 50       	subi	r20, 0x01	; 1
     2a6:	f4 cf       	rjmp	.-24     	; 0x290 <Packet::stuffPacket(unsigned char*, unsigned char const&) [clone .constprop.49]+0xa>
_ZN6Packet11stuffPacketEPhRKh.constprop.49():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:381
{
	int16_t refByte = findLast(arr, len);

	if (refByte != -1)
	{
		for (uint8_t i = (len - 1); i != 0xFF; i--)
     2a8:	9f 3f       	cpi	r25, 0xFF	; 255
     2aa:	69 f0       	breq	.+26     	; 0x2c6 <Packet::stuffPacket(unsigned char*, unsigned char const&) [clone .constprop.49]+0x40>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:383
		{
			if (arr[i] == START_BYTE)
     2ac:	49 2f       	mov	r20, r25
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	df 01       	movw	r26, r30
     2b2:	a4 0f       	add	r26, r20
     2b4:	b5 1f       	adc	r27, r21
     2b6:	8c 91       	ld	r24, X
     2b8:	8e 37       	cpi	r24, 0x7E	; 126
     2ba:	19 f4       	brne	.+6      	; 0x2c2 <Packet::stuffPacket(unsigned char*, unsigned char const&) [clone .constprop.49]+0x3c>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:385
			{
				arr[i]  = refByte - i;
     2bc:	29 1b       	sub	r18, r25
     2be:	2c 93       	st	X, r18
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:386
				refByte = i;
     2c0:	29 2f       	mov	r18, r25
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:381
{
	int16_t refByte = findLast(arr, len);

	if (refByte != -1)
	{
		for (uint8_t i = (len - 1); i != 0xFF; i--)
     2c2:	91 50       	subi	r25, 0x01	; 1
     2c4:	f1 cf       	rjmp	.-30     	; 0x2a8 <Packet::stuffPacket(unsigned char*, unsigned char const&) [clone .constprop.49]+0x22>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:390
				arr[i]  = refByte - i;
				refByte = i;
			}
		}
	}
}
     2c6:	08 95       	ret

000002c8 <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]>:
_ZN14SerialTransfer8sendDataERKjh.constprop.45():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:61
  * const uint8_t packetID - The packet 8-bit identifier
 Return:
 -------
  * uint8_t numBytesIncl - Number of payload bytes included in packet
*/
uint8_t SerialTransfer::sendData(const uint16_t& messageLen, const uint8_t packetID)
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	1f 92       	push	r1
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
constructPacket():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:70
 -------
  * uint8_t - Number of payload bytes included in packet
*/
uint8_t Packet::constructPacket(const uint16_t& messageLen, const uint8_t& packetID)
{
	if (messageLen > MAX_PACKET_SIZE)
     2d6:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <sendSize>
     2da:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <sendSize+0x1>
     2de:	2f 3f       	cpi	r18, 0xFF	; 255
     2e0:	31 05       	cpc	r19, r1
     2e2:	08 f4       	brcc	.+2      	; 0x2e6 <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0x1e>
     2e4:	6a c0       	rjmp	.+212    	; 0x3ba <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0xf2>
calcOverhead():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:323
 -------
  * void
*/
void Packet::calcOverhead(uint8_t arr[], const uint8_t& len)
{
	overheadByte = 0xFF;
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <myTransfer+0x20f>
     2ec:	0b e6       	ldi	r16, 0x6B	; 107
     2ee:	13 e0       	ldi	r17, 0x03	; 3
     2f0:	f8 01       	movw	r30, r16
_ZN14SerialTransfer8sendDataERKjh.constprop.45():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:325

	for (uint8_t i = 0; i < len; i++)
     2f2:	80 e0       	ldi	r24, 0x00	; 0
calcOverhead():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:327
	{
		if (arr[i] == START_BYTE)
     2f4:	91 91       	ld	r25, Z+
     2f6:	9e 37       	cpi	r25, 0x7E	; 126
     2f8:	09 f0       	breq	.+2      	; 0x2fc <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0x34>
     2fa:	5a c0       	rjmp	.+180    	; 0x3b0 <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0xe8>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:329
		{
			overheadByte = i;
     2fc:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <myTransfer+0x20f>
constructPacket():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:73
uint8_t Packet::constructPacket(const uint16_t& messageLen, const uint8_t& packetID)
{
	if (messageLen > MAX_PACKET_SIZE)
	{
		calcOverhead(txBuff, MAX_PACKET_SIZE);
		stuffPacket(txBuff, MAX_PACKET_SIZE);
     300:	66 e0       	ldi	r22, 0x06	; 6
     302:	71 e0       	ldi	r23, 0x01	; 1
     304:	8b e6       	ldi	r24, 0x6B	; 107
     306:	93 e0       	ldi	r25, 0x03	; 3
     308:	0e 94 43 01 	call	0x286	; 0x286 <Packet::stuffPacket(unsigned char*, unsigned char const&) [clone .constprop.49]>
_ZN9PacketCRC9calculateEPhh.isra.0():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:63

	uint8_t calculate(uint8_t arr[], uint8_t len)
	{
		uint8_t crc = 0;
		for (uint16_t i = 0; i < len; i++)
			crc = csTable[crc ^ arr[i]];
     30c:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <crc+0x4>
     310:	30 91 54 03 	lds	r19, 0x0354	; 0x800354 <crc+0x5>
     314:	89 e6       	ldi	r24, 0x69	; 105
     316:	94 e0       	ldi	r25, 0x04	; 4
_ZN14SerialTransfer8sendDataERKjh.constprop.45():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:61
		return 0;
	}

	uint8_t calculate(uint8_t arr[], uint8_t len)
	{
		uint8_t crc = 0;
     318:	e0 e0       	ldi	r30, 0x00	; 0
_ZN9PacketCRC9calculateEPhh.isra.0():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:63
		for (uint16_t i = 0; i < len; i++)
			crc = csTable[crc ^ arr[i]];
     31a:	d8 01       	movw	r26, r16
     31c:	4d 91       	ld	r20, X+
     31e:	8d 01       	movw	r16, r26
     320:	e4 27       	eor	r30, r20
     322:	e2 0f       	add	r30, r18
     324:	f3 2f       	mov	r31, r19
     326:	f1 1d       	adc	r31, r1
     328:	e0 81       	ld	r30, Z
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:62
	}

	uint8_t calculate(uint8_t arr[], uint8_t len)
	{
		uint8_t crc = 0;
		for (uint16_t i = 0; i < len; i++)
     32a:	8a 17       	cp	r24, r26
     32c:	9b 07       	cpc	r25, r27
     32e:	a9 f7       	brne	.-22     	; 0x31a <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0x52>
constructPacket():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:76
		uint8_t crcVal = crc.calculate(txBuff, MAX_PACKET_SIZE);

		preamble[1] = packetID;
     330:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <myTransfer+0x1fd>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:77
		preamble[2] = overheadByte;
     334:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <myTransfer+0x20f>
     338:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <myTransfer+0x1fe>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:78
		preamble[3] = MAX_PACKET_SIZE;
     33c:	8e ef       	ldi	r24, 0xFE	; 254
     33e:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <myTransfer+0x1ff>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:80

		postamble[0] = crcVal;
     342:	e0 93 6b 05 	sts	0x056B, r30	; 0x80056b <myTransfer+0x200>
     346:	1e ef       	ldi	r17, 0xFE	; 254
_ZN14SerialTransfer8sendDataERKjh.constprop.45():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:66
{
	uint8_t numBytesIncl;

	numBytesIncl = packet.constructPacket(messageLen, packetID);
	port->write(packet.preamble, sizeof(packet.preamble));
     348:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <myTransfer+0x21b>
     34c:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <myTransfer+0x21c>
     350:	dc 01       	movw	r26, r24
     352:	ed 91       	ld	r30, X+
     354:	fc 91       	ld	r31, X
     356:	02 80       	ldd	r0, Z+2	; 0x02
     358:	f3 81       	ldd	r31, Z+3	; 0x03
     35a:	e0 2d       	mov	r30, r0
     35c:	44 e0       	ldi	r20, 0x04	; 4
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	67 e6       	ldi	r22, 0x67	; 103
     362:	75 e0       	ldi	r23, 0x05	; 5
     364:	09 95       	icall
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:67
	port->write(packet.txBuff, numBytesIncl);
     366:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <myTransfer+0x21b>
     36a:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <myTransfer+0x21c>
     36e:	41 2f       	mov	r20, r17
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	dc 01       	movw	r26, r24
     374:	ed 91       	ld	r30, X+
     376:	fc 91       	ld	r31, X
     378:	02 80       	ldd	r0, Z+2	; 0x02
     37a:	f3 81       	ldd	r31, Z+3	; 0x03
     37c:	e0 2d       	mov	r30, r0
     37e:	6b e6       	ldi	r22, 0x6B	; 107
     380:	73 e0       	ldi	r23, 0x03	; 3
     382:	09 95       	icall
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:68
	port->write(packet.postamble, sizeof(packet.postamble));
     384:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <myTransfer+0x21b>
     388:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <myTransfer+0x21c>
     38c:	dc 01       	movw	r26, r24
     38e:	ed 91       	ld	r30, X+
     390:	fc 91       	ld	r31, X
     392:	02 80       	ldd	r0, Z+2	; 0x02
     394:	f3 81       	ldd	r31, Z+3	; 0x03
     396:	e0 2d       	mov	r30, r0
     398:	42 e0       	ldi	r20, 0x02	; 2
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	6b e6       	ldi	r22, 0x6B	; 107
     39e:	75 e0       	ldi	r23, 0x05	; 5
     3a0:	09 95       	icall
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:71

	return numBytesIncl;
}
     3a2:	81 2f       	mov	r24, r17
     3a4:	0f 90       	pop	r0
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	08 95       	ret
calcOverhead():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:325
*/
void Packet::calcOverhead(uint8_t arr[], const uint8_t& len)
{
	overheadByte = 0xFF;

	for (uint8_t i = 0; i < len; i++)
     3b0:	8f 5f       	subi	r24, 0xFF	; 255
     3b2:	8e 3f       	cpi	r24, 0xFE	; 254
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0xf0>
     3b6:	9e cf       	rjmp	.-196    	; 0x2f4 <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0x2c>
     3b8:	a3 cf       	rjmp	.-186    	; 0x300 <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0x38>
constructPacket():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:86

		return MAX_PACKET_SIZE;
	}
	else
	{
		calcOverhead(txBuff, (uint8_t)messageLen);
     3ba:	92 2f       	mov	r25, r18
calcOverhead():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:323
 -------
  * void
*/
void Packet::calcOverhead(uint8_t arr[], const uint8_t& len)
{
	overheadByte = 0xFF;
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <myTransfer+0x20f>
     3c2:	eb e6       	ldi	r30, 0x6B	; 107
     3c4:	f3 e0       	ldi	r31, 0x03	; 3
_ZN14SerialTransfer8sendDataERKjh.constprop.45():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:325

	for (uint8_t i = 0; i < len; i++)
     3c6:	80 e0       	ldi	r24, 0x00	; 0
calcOverhead():
     3c8:	89 17       	cp	r24, r25
     3ca:	28 f4       	brcc	.+10     	; 0x3d6 <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0x10e>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:327
	{
		if (arr[i] == START_BYTE)
     3cc:	41 91       	ld	r20, Z+
     3ce:	4e 37       	cpi	r20, 0x7E	; 126
     3d0:	29 f5       	brne	.+74     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:329
		{
			overheadByte = i;
     3d2:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <myTransfer+0x20f>
constructPacket():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:87
		return MAX_PACKET_SIZE;
	}
	else
	{
		calcOverhead(txBuff, (uint8_t)messageLen);
		stuffPacket(txBuff, (uint8_t)messageLen);
     3d6:	29 83       	std	Y+1, r18	; 0x01
     3d8:	be 01       	movw	r22, r28
     3da:	6f 5f       	subi	r22, 0xFF	; 255
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
     3de:	8b e6       	ldi	r24, 0x6B	; 107
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	0e 94 43 01 	call	0x286	; 0x286 <Packet::stuffPacket(unsigned char*, unsigned char const&) [clone .constprop.49]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:88
		uint8_t crcVal = crc.calculate(txBuff, (uint8_t)messageLen);
     3e6:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <sendSize>
     3ea:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <sendSize+0x1>
     3ee:	12 2f       	mov	r17, r18
_ZN9PacketCRC9calculateEPhh.isra.0():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:63
			crc = csTable[crc ^ arr[i]];
     3f0:	40 91 53 03 	lds	r20, 0x0353	; 0x800353 <crc+0x4>
     3f4:	50 91 54 03 	lds	r21, 0x0354	; 0x800354 <crc+0x5>
     3f8:	ab e6       	ldi	r26, 0x6B	; 107
     3fa:	b3 e0       	ldi	r27, 0x03	; 3
_ZN14SerialTransfer8sendDataERKjh.constprop.45():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:61
		return 0;
	}

	uint8_t calculate(uint8_t arr[], uint8_t len)
	{
		uint8_t crc = 0;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
_ZN9PacketCRC9calculateEPhh.isra.0():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:62
		for (uint16_t i = 0; i < len; i++)
     3fe:	b9 01       	movw	r22, r18
     400:	77 27       	eor	r23, r23
     402:	fd 01       	movw	r30, r26
     404:	eb 56       	subi	r30, 0x6B	; 107
     406:	f3 40       	sbci	r31, 0x03	; 3
     408:	e6 17       	cp	r30, r22
     40a:	f7 07       	cpc	r31, r23
     40c:	48 f4       	brcc	.+18     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:63
			crc = csTable[crc ^ arr[i]];
     40e:	ed 91       	ld	r30, X+
     410:	e8 27       	eor	r30, r24
     412:	e4 0f       	add	r30, r20
     414:	f5 2f       	mov	r31, r21
     416:	f1 1d       	adc	r31, r1
     418:	80 81       	ld	r24, Z
     41a:	f3 cf       	rjmp	.-26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
calcOverhead():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:325
*/
void Packet::calcOverhead(uint8_t arr[], const uint8_t& len)
{
	overheadByte = 0xFF;

	for (uint8_t i = 0; i < len; i++)
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	d4 cf       	rjmp	.-88     	; 0x3c8 <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0x100>
constructPacket():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:90
	{
		calcOverhead(txBuff, (uint8_t)messageLen);
		stuffPacket(txBuff, (uint8_t)messageLen);
		uint8_t crcVal = crc.calculate(txBuff, (uint8_t)messageLen);

		preamble[1] = packetID;
     420:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <myTransfer+0x1fd>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:91
		preamble[2] = overheadByte;
     424:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <myTransfer+0x20f>
     428:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <myTransfer+0x1fe>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:92
		preamble[3] = messageLen;
     42c:	20 93 6a 05 	sts	0x056A, r18	; 0x80056a <myTransfer+0x1ff>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:94

		postamble[0] = crcVal;
     430:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <myTransfer+0x200>
     434:	89 cf       	rjmp	.-238    	; 0x348 <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]+0x80>

00000436 <digitalWrite.constprop.33>:
digitalWrite.constprop.33():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	fc 01       	movw	r30, r24
     43a:	e4 53       	subi	r30, 0x34	; 52
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	24 91       	lpm	r18, Z
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     440:	fc 01       	movw	r30, r24
     442:	eb 54       	subi	r30, 0x4B	; 75
     444:	ff 4f       	sbci	r31, 0xFF	; 255
     446:	34 91       	lpm	r19, Z
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     448:	fc 01       	movw	r30, r24
     44a:	e2 56       	subi	r30, 0x62	; 98
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	e4 91       	lpm	r30, Z
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     450:	ee 23       	and	r30, r30
     452:	b1 f0       	breq	.+44     	; 0x480 <digitalWrite.constprop.33+0x4a>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     454:	22 23       	and	r18, r18
     456:	39 f0       	breq	.+14     	; 0x466 <digitalWrite.constprop.33+0x30>
turnOffPWM():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     458:	24 30       	cpi	r18, 0x04	; 4
     45a:	e9 f0       	breq	.+58     	; 0x496 <digitalWrite.constprop.33+0x60>
     45c:	90 f4       	brcc	.+36     	; 0x482 <digitalWrite.constprop.33+0x4c>
     45e:	22 30       	cpi	r18, 0x02	; 2
     460:	51 f1       	breq	.+84     	; 0x4b6 <digitalWrite.constprop.33+0x80>
     462:	23 30       	cpi	r18, 0x03	; 3
     464:	61 f1       	breq	.+88     	; 0x4be <digitalWrite.constprop.33+0x88>
digitalWrite.constprop.33():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	ec 56       	subi	r30, 0x6C	; 108
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	a5 91       	lpm	r26, Z+
     472:	b4 91       	lpm	r27, Z
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     474:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     476:	f8 94       	cli
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     478:	ec 91       	ld	r30, X
     47a:	3e 2b       	or	r19, r30
     47c:	3c 93       	st	X, r19
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     47e:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
     480:	08 95       	ret
turnOffPWM():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     482:	28 30       	cpi	r18, 0x08	; 8
     484:	71 f0       	breq	.+28     	; 0x4a2 <digitalWrite.constprop.33+0x6c>
     486:	29 30       	cpi	r18, 0x09	; 9
     488:	91 f0       	breq	.+36     	; 0x4ae <digitalWrite.constprop.33+0x78>
     48a:	25 30       	cpi	r18, 0x05	; 5
     48c:	61 f7       	brne	.-40     	; 0x466 <digitalWrite.constprop.33+0x30>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     48e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     492:	8f 7d       	andi	r24, 0xDF	; 223
     494:	03 c0       	rjmp	.+6      	; 0x49c <digitalWrite.constprop.33+0x66>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     496:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     49a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     49c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     4a0:	e2 cf       	rjmp	.-60     	; 0x466 <digitalWrite.constprop.33+0x30>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     4a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     4a6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     4a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     4ac:	dc cf       	rjmp	.-72     	; 0x466 <digitalWrite.constprop.33+0x30>
     4ae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     4b2:	8f 7d       	andi	r24, 0xDF	; 223
     4b4:	f9 cf       	rjmp	.-14     	; 0x4a8 <digitalWrite.constprop.33+0x72>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     4b6:	84 b5       	in	r24, 0x24	; 36
     4b8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     4ba:	84 bd       	out	0x24, r24	; 36
     4bc:	d4 cf       	rjmp	.-88     	; 0x466 <digitalWrite.constprop.33+0x30>
     4be:	84 b5       	in	r24, 0x24	; 36
     4c0:	8f 7d       	andi	r24, 0xDF	; 223
     4c2:	fb cf       	rjmp	.-10     	; 0x4ba <digitalWrite.constprop.33+0x84>

000004c4 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:317
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     4c4:	08 95       	ret

000004c6 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:302
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     4c6:	08 95       	ret

000004c8 <TwoWire::begin() [clone .constprop.32]>:
_ZN7TwoWire5beginEv.constprop.32():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:60

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     4c8:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <TwoWire::rxBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:61
  rxBufferLength = 0;
     4cc:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <TwoWire::rxBufferLength>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:63

  txBufferIndex = 0;
     4d0:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TwoWire::txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:64
  txBufferLength = 0;
     4d4:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <TwoWire::txBufferLength>
twi_init():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     4d8:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <twi_state>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <twi_sendStop>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
     4e2:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi_inRepStart>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     4e6:	82 e1       	ldi	r24, 0x12	; 18
     4e8:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite.constprop.33>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
     4ec:	83 e1       	ldi	r24, 0x13	; 19
     4ee:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite.constprop.33>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     4f2:	e9 eb       	ldi	r30, 0xB9	; 185
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	8e 7f       	andi	r24, 0xFE	; 254
     4fa:	80 83       	st	Z, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
     4fc:	80 81       	ld	r24, Z
     4fe:	8d 7f       	andi	r24, 0xFD	; 253
     500:	80 83       	st	Z, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     502:	80 e2       	ldi	r24, 0x20	; 32
     504:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     508:	85 e4       	ldi	r24, 0x45	; 69
     50a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     50e:	82 e6       	ldi	r24, 0x62	; 98
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <twi_onSlaveTransmit+0x1>
     516:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     51a:	83 e6       	ldi	r24, 0x63	; 99
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <twi_onSlaveReceive+0x1>
     522:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.32():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:69

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     526:	08 95       	ret

00000528 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	6c 01       	movw	r12, r24
     53e:	7b 01       	movw	r14, r22
     540:	8b 01       	movw	r16, r22
     542:	04 0f       	add	r16, r20
     544:	15 1f       	adc	r17, r21
     546:	eb 01       	movw	r28, r22
     548:	5e 01       	movw	r10, r28
     54a:	ae 18       	sub	r10, r14
     54c:	bf 08       	sbc	r11, r15
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     54e:	c0 17       	cp	r28, r16
     550:	d1 07       	cpc	r29, r17
     552:	59 f0       	breq	.+22     	; 0x56a <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     554:	69 91       	ld	r22, Y+
     556:	d6 01       	movw	r26, r12
     558:	ed 91       	ld	r30, X+
     55a:	fc 91       	ld	r31, X
     55c:	01 90       	ld	r0, Z+
     55e:	f0 81       	ld	r31, Z
     560:	e0 2d       	mov	r30, r0
     562:	c6 01       	movw	r24, r12
     564:	09 95       	icall
     566:	89 2b       	or	r24, r25
     568:	79 f7       	brne	.-34     	; 0x548 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     56a:	c5 01       	movw	r24, r10
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	df 90       	pop	r13
     57a:	cf 90       	pop	r12
     57c:	bf 90       	pop	r11
     57e:	af 90       	pop	r10
     580:	08 95       	ret

00000582 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     582:	fc 01       	movw	r30, r24
     584:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
     586:	44 8d       	ldd	r20, Z+28	; 0x1c
     588:	25 2f       	mov	r18, r21
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	84 2f       	mov	r24, r20
     58e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     590:	82 1b       	sub	r24, r18
     592:	93 0b       	sbc	r25, r19
     594:	54 17       	cp	r21, r20
     596:	10 f0       	brcs	.+4      	; 0x59c <HardwareSerial::availableForWrite()+0x1a>
     598:	cf 96       	adiw	r24, 0x3f	; 63
     59a:	08 95       	ret
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
     59c:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
     59e:	08 95       	ret

000005a0 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     5a0:	fc 01       	movw	r30, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     5a2:	91 8d       	ldd	r25, Z+25	; 0x19
     5a4:	82 8d       	ldd	r24, Z+26	; 0x1a
     5a6:	98 17       	cp	r25, r24
     5a8:	61 f0       	breq	.+24     	; 0x5c2 <HardwareSerial::read()+0x22>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     5aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
     5ac:	ae 0f       	add	r26, r30
     5ae:	bf 2f       	mov	r27, r31
     5b0:	b1 1d       	adc	r27, r1
     5b2:	5d 96       	adiw	r26, 0x1d	; 29
     5b4:	8c 91       	ld	r24, X
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     5b6:	92 8d       	ldd	r25, Z+26	; 0x1a
     5b8:	9f 5f       	subi	r25, 0xFF	; 255
     5ba:	9f 73       	andi	r25, 0x3F	; 63
     5bc:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	08 95       	ret
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     5c6:	08 95       	ret

000005c8 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     5c8:	fc 01       	movw	r30, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
     5ca:	91 8d       	ldd	r25, Z+25	; 0x19
     5cc:	82 8d       	ldd	r24, Z+26	; 0x1a
     5ce:	98 17       	cp	r25, r24
     5d0:	31 f0       	breq	.+12     	; 0x5de <HardwareSerial::peek()+0x16>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     5d2:	82 8d       	ldd	r24, Z+26	; 0x1a
     5d4:	e8 0f       	add	r30, r24
     5d6:	f1 1d       	adc	r31, r1
     5d8:	85 8d       	ldd	r24, Z+29	; 0x1d
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	08 95       	ret
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     5e2:	08 95       	ret

000005e4 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     5e4:	fc 01       	movw	r30, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     5e6:	91 8d       	ldd	r25, Z+25	; 0x19
     5e8:	22 8d       	ldd	r18, Z+26	; 0x1a
     5ea:	89 2f       	mov	r24, r25
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	80 5c       	subi	r24, 0xC0	; 192
     5f0:	9f 4f       	sbci	r25, 0xFF	; 255
     5f2:	82 1b       	sub	r24, r18
     5f4:	91 09       	sbc	r25, r1
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
     5f6:	8f 73       	andi	r24, 0x3F	; 63
     5f8:	99 27       	eor	r25, r25
     5fa:	08 95       	ret

000005fc <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     5fc:	86 ea       	ldi	r24, 0xA6	; 166
     5fe:	92 e0       	ldi	r25, 0x02	; 2
     600:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <HardwareSerial::available()>
     604:	21 e0       	ldi	r18, 0x01	; 1
     606:	89 2b       	or	r24, r25
     608:	09 f4       	brne	.+2      	; 0x60c <Serial0_available()+0x10>
     60a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     60c:	82 2f       	mov	r24, r18
     60e:	08 95       	ret

00000610 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	89 2b       	or	r24, r25
     616:	29 f0       	breq	.+10     	; 0x622 <serialEventRun()+0x12>
     618:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Serial0_available()>
     61c:	81 11       	cpse	r24, r1
     61e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     622:	08 95       	ret

00000624 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     624:	fc 01       	movw	r30, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     626:	a4 8d       	ldd	r26, Z+28	; 0x1c
     628:	a8 0f       	add	r26, r24
     62a:	b9 2f       	mov	r27, r25
     62c:	b1 1d       	adc	r27, r1
     62e:	a3 5a       	subi	r26, 0xA3	; 163
     630:	bf 4f       	sbci	r27, 0xFF	; 255
     632:	2c 91       	ld	r18, X
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     634:	84 8d       	ldd	r24, Z+28	; 0x1c
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	8f 73       	andi	r24, 0x3F	; 63
     63c:	99 27       	eor	r25, r25
     63e:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
     640:	a6 89       	ldd	r26, Z+22	; 0x16
     642:	b7 89       	ldd	r27, Z+23	; 0x17
     644:	2c 93       	st	X, r18
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
     646:	a0 89       	ldd	r26, Z+16	; 0x10
     648:	b1 89       	ldd	r27, Z+17	; 0x11
     64a:	8c 91       	ld	r24, X
     64c:	80 64       	ori	r24, 0x40	; 64
     64e:	8c 93       	st	X, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
     650:	93 8d       	ldd	r25, Z+27	; 0x1b
     652:	84 8d       	ldd	r24, Z+28	; 0x1c
     654:	98 13       	cpse	r25, r24
     656:	06 c0       	rjmp	.+12     	; 0x664 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     658:	02 88       	ldd	r0, Z+18	; 0x12
     65a:	f3 89       	ldd	r31, Z+19	; 0x13
     65c:	e0 2d       	mov	r30, r0
     65e:	80 81       	ld	r24, Z
     660:	8f 7d       	andi	r24, 0xDF	; 223
     662:	80 83       	st	Z, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
     664:	08 95       	ret

00000666 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ec 01       	movw	r28, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     678:	9b 8d       	ldd	r25, Y+27	; 0x1b
     67a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     67c:	98 13       	cpse	r25, r24
     67e:	16 c0       	rjmp	.+44     	; 0x6ac <HardwareSerial::write(unsigned char)+0x46>
     680:	e8 89       	ldd	r30, Y+16	; 0x10
     682:	f9 89       	ldd	r31, Y+17	; 0x11
     684:	80 81       	ld	r24, Z
     686:	85 ff       	sbrs	r24, 5
     688:	11 c0       	rjmp	.+34     	; 0x6ac <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
     68a:	ee 89       	ldd	r30, Y+22	; 0x16
     68c:	ff 89       	ldd	r31, Y+23	; 0x17
     68e:	60 83       	st	Z, r22
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
     690:	e8 89       	ldd	r30, Y+16	; 0x10
     692:	f9 89       	ldd	r31, Y+17	; 0x11
     694:	80 81       	ld	r24, Z
     696:	80 64       	ori	r24, 0x40	; 64
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
     698:	80 83       	st	Z, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	08 95       	ret
     6ac:	f6 2e       	mov	r15, r22
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     6ae:	0b 8d       	ldd	r16, Y+27	; 0x1b
     6b0:	10 e0       	ldi	r17, 0x00	; 0
     6b2:	0f 5f       	subi	r16, 0xFF	; 255
     6b4:	1f 4f       	sbci	r17, 0xFF	; 255
     6b6:	0f 73       	andi	r16, 0x3F	; 63
     6b8:	11 27       	eor	r17, r17
     6ba:	e0 2e       	mov	r14, r16
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     6bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6be:	8e 11       	cpse	r24, r14
     6c0:	0c c0       	rjmp	.+24     	; 0x6da <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	07 fc       	sbrc	r0, 7
     6c6:	fa cf       	rjmp	.-12     	; 0x6bc <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     6c8:	e8 89       	ldd	r30, Y+16	; 0x10
     6ca:	f9 89       	ldd	r31, Y+17	; 0x11
     6cc:	80 81       	ld	r24, Z
     6ce:	85 ff       	sbrs	r24, 5
     6d0:	f5 cf       	rjmp	.-22     	; 0x6bc <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
     6d2:	ce 01       	movw	r24, r28
     6d4:	0e 94 12 03 	call	0x624	; 0x624 <HardwareSerial::_tx_udr_empty_irq()>
     6d8:	f1 cf       	rjmp	.-30     	; 0x6bc <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     6da:	eb 8d       	ldd	r30, Y+27	; 0x1b
     6dc:	ec 0f       	add	r30, r28
     6de:	fd 2f       	mov	r31, r29
     6e0:	f1 1d       	adc	r31, r1
     6e2:	e3 5a       	subi	r30, 0xA3	; 163
     6e4:	ff 4f       	sbci	r31, 0xFF	; 255
     6e6:	f0 82       	st	Z, r15
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
     6e8:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
     6ea:	ea 89       	ldd	r30, Y+18	; 0x12
     6ec:	fb 89       	ldd	r31, Y+19	; 0x13
     6ee:	80 81       	ld	r24, Z
     6f0:	80 62       	ori	r24, 0x20	; 32
     6f2:	d2 cf       	rjmp	.-92     	; 0x698 <HardwareSerial::write(unsigned char)+0x32>

000006f4 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	ec 01       	movw	r28, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     6fa:	88 8d       	ldd	r24, Y+24	; 0x18
     6fc:	88 23       	and	r24, r24
     6fe:	b9 f0       	breq	.+46     	; 0x72e <HardwareSerial::flush()+0x3a>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     700:	aa 89       	ldd	r26, Y+18	; 0x12
     702:	bb 89       	ldd	r27, Y+19	; 0x13
     704:	e8 89       	ldd	r30, Y+16	; 0x10
     706:	f9 89       	ldd	r31, Y+17	; 0x11
     708:	8c 91       	ld	r24, X
     70a:	85 fd       	sbrc	r24, 5
     70c:	03 c0       	rjmp	.+6      	; 0x714 <HardwareSerial::flush()+0x20>
     70e:	80 81       	ld	r24, Z
     710:	86 fd       	sbrc	r24, 6
     712:	0d c0       	rjmp	.+26     	; 0x72e <HardwareSerial::flush()+0x3a>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	07 fc       	sbrc	r0, 7
     718:	f7 cf       	rjmp	.-18     	; 0x708 <HardwareSerial::flush()+0x14>
     71a:	8c 91       	ld	r24, X
     71c:	85 ff       	sbrs	r24, 5
     71e:	f2 cf       	rjmp	.-28     	; 0x704 <HardwareSerial::flush()+0x10>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     720:	80 81       	ld	r24, Z
     722:	85 ff       	sbrs	r24, 5
     724:	ed cf       	rjmp	.-38     	; 0x700 <HardwareSerial::flush()+0xc>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
     726:	ce 01       	movw	r24, r28
     728:	0e 94 12 03 	call	0x624	; 0x624 <HardwareSerial::_tx_udr_empty_irq()>
     72c:	e9 cf       	rjmp	.-46     	; 0x700 <HardwareSerial::flush()+0xc>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <micros>:
micros():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     734:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     736:	f8 94       	cli
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     738:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <timer0_overflow_count>
     73c:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <timer0_overflow_count+0x1>
     740:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <timer0_overflow_count+0x2>
     744:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <timer0_overflow_count+0x3>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     748:	26 b5       	in	r18, 0x26	; 38
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     74a:	a8 9b       	sbis	0x15, 0	; 21
     74c:	05 c0       	rjmp	.+10     	; 0x758 <micros+0x24>
     74e:	2f 3f       	cpi	r18, 0xFF	; 255
     750:	19 f0       	breq	.+6      	; 0x758 <micros+0x24>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	a1 1d       	adc	r26, r1
     756:	b1 1d       	adc	r27, r1
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     758:	3f bf       	out	0x3f, r19	; 63
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     75a:	ba 2f       	mov	r27, r26
     75c:	a9 2f       	mov	r26, r25
     75e:	98 2f       	mov	r25, r24
     760:	88 27       	eor	r24, r24
     762:	bc 01       	movw	r22, r24
     764:	cd 01       	movw	r24, r26
     766:	62 0f       	add	r22, r18
     768:	71 1d       	adc	r23, r1
     76a:	81 1d       	adc	r24, r1
     76c:	91 1d       	adc	r25, r1
     76e:	43 e0       	ldi	r20, 0x03	; 3
     770:	66 0f       	add	r22, r22
     772:	77 1f       	adc	r23, r23
     774:	88 1f       	adc	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	4a 95       	dec	r20
     77a:	d1 f7       	brne	.-12     	; 0x770 <micros+0x3c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     77c:	08 95       	ret

0000077e <delay>:
delay():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     77e:	8f 92       	push	r8
     780:	9f 92       	push	r9
     782:	af 92       	push	r10
     784:	bf 92       	push	r11
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	4b 01       	movw	r8, r22
     790:	5c 01       	movw	r10, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     792:	0e 94 9a 03 	call	0x734	; 0x734 <micros>
     796:	6b 01       	movw	r12, r22
     798:	7c 01       	movw	r14, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     79a:	0e 94 9a 03 	call	0x734	; 0x734 <micros>
     79e:	6c 19       	sub	r22, r12
     7a0:	7d 09       	sbc	r23, r13
     7a2:	8e 09       	sbc	r24, r14
     7a4:	9f 09       	sbc	r25, r15
     7a6:	68 3e       	cpi	r22, 0xE8	; 232
     7a8:	73 40       	sbci	r23, 0x03	; 3
     7aa:	81 05       	cpc	r24, r1
     7ac:	91 05       	cpc	r25, r1
     7ae:	a8 f3       	brcs	.-22     	; 0x79a <delay+0x1c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	82 1a       	sub	r8, r18
     7b4:	91 08       	sbc	r9, r1
     7b6:	a1 08       	sbc	r10, r1
     7b8:	b1 08       	sbc	r11, r1
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     7ba:	88 ee       	ldi	r24, 0xE8	; 232
     7bc:	c8 0e       	add	r12, r24
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	d8 1e       	adc	r13, r24
     7c2:	e1 1c       	adc	r14, r1
     7c4:	f1 1c       	adc	r15, r1
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     7c6:	81 14       	cp	r8, r1
     7c8:	91 04       	cpc	r9, r1
     7ca:	a1 04       	cpc	r10, r1
     7cc:	b1 04       	cpc	r11, r1
     7ce:	29 f7       	brne	.-54     	; 0x79a <delay+0x1c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	bf 90       	pop	r11
     7da:	af 90       	pop	r10
     7dc:	9f 90       	pop	r9
     7de:	8f 90       	pop	r8
     7e0:	08 95       	ret

000007e2 <twi_stop>:
twi_stop():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     7e2:	85 ed       	ldi	r24, 0xD5	; 213
     7e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     7e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     7ec:	84 fd       	sbrc	r24, 4
     7ee:	fc cf       	rjmp	.-8      	; 0x7e8 <twi_stop+0x6>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     7f0:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <twi_state>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
     7f4:	08 95       	ret

000007f6 <twi_transmit>:
twi_transmit():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     7f6:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <twi_txBufferLength>
     7fa:	26 0f       	add	r18, r22
     7fc:	33 27       	eor	r19, r19
     7fe:	33 1f       	adc	r19, r19
     800:	21 32       	cpi	r18, 0x21	; 33
     802:	31 05       	cpc	r19, r1
     804:	ec f4       	brge	.+58     	; 0x840 <twi_transmit+0x4a>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     806:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <twi_state>
     80a:	fc 01       	movw	r30, r24
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	24 30       	cpi	r18, 0x04	; 4
     812:	69 f0       	breq	.+26     	; 0x82e <twi_transmit+0x38>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
     814:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     816:	08 95       	ret
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     818:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <twi_txBufferLength>
     81c:	21 91       	ld	r18, Z+
     81e:	ac 01       	movw	r20, r24
     820:	48 56       	subi	r20, 0x68	; 104
     822:	5e 4f       	sbci	r21, 0xFE	; 254
     824:	a4 0f       	add	r26, r20
     826:	b5 2f       	mov	r27, r21
     828:	b1 1d       	adc	r27, r1
     82a:	2c 93       	st	X, r18
     82c:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     82e:	86 17       	cp	r24, r22
     830:	98 f3       	brcs	.-26     	; 0x818 <twi_transmit+0x22>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     832:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <twi_txBufferLength>
     836:	68 0f       	add	r22, r24
     838:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <twi_txBufferLength>
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	08 95       	ret
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 95       	ret

00000844 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:277
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     844:	08 95       	ret

00000846 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:267
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     846:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <TwoWire::rxBufferIndex>
     84a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <TwoWire::rxBufferLength>
     84e:	e8 17       	cp	r30, r24
     850:	30 f4       	brcc	.+12     	; 0x85e <TwoWire::peek()+0x18>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:268
    value = rxBuffer[rxBufferIndex];
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	e1 5a       	subi	r30, 0xA1	; 161
     856:	fd 4f       	sbci	r31, 0xFD	; 253
     858:	80 81       	ld	r24, Z
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	08 95       	ret
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:265
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:272
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     862:	08 95       	ret

00000864 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     864:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <TwoWire::rxBufferIndex>
     868:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <TwoWire::rxBufferLength>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:249
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     86c:	2f ef       	ldi	r18, 0xFF	; 255
     86e:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:252

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     870:	98 17       	cp	r25, r24
     872:	48 f4       	brcc	.+18     	; 0x886 <TwoWire::read()+0x22>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:253
    value = rxBuffer[rxBufferIndex];
     874:	e9 2f       	mov	r30, r25
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	e1 5a       	subi	r30, 0xA1	; 161
     87a:	fd 4f       	sbci	r31, 0xFD	; 253
     87c:	20 81       	ld	r18, Z
     87e:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:254
    ++rxBufferIndex;
     880:	9f 5f       	subi	r25, 0xFF	; 255
     882:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <TwoWire::rxBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:258
  }

  return value;
}
     886:	c9 01       	movw	r24, r18
     888:	08 95       	ret

0000088a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:222

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     88a:	cf 92       	push	r12
     88c:	df 92       	push	r13
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	7c 01       	movw	r14, r24
     89c:	cb 01       	movw	r24, r22
     89e:	8a 01       	movw	r16, r20
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:223
  if(transmitting){
     8a0:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <TwoWire::transmitting>
     8a4:	22 23       	and	r18, r18
     8a6:	89 f0       	breq	.+34     	; 0x8ca <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     8a8:	eb 01       	movw	r28, r22
     8aa:	6b 01       	movw	r12, r22
     8ac:	c4 0e       	add	r12, r20
     8ae:	d5 1e       	adc	r13, r21
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:225
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     8b0:	cc 15       	cp	r28, r12
     8b2:	dd 05       	cpc	r29, r13
     8b4:	69 f0       	breq	.+26     	; 0x8d0 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:226
      write(data[i]);
     8b6:	69 91       	ld	r22, Y+
     8b8:	d7 01       	movw	r26, r14
     8ba:	ed 91       	ld	r30, X+
     8bc:	fc 91       	ld	r31, X
     8be:	01 90       	ld	r0, Z+
     8c0:	f0 81       	ld	r31, Z
     8c2:	e0 2d       	mov	r30, r0
     8c4:	c7 01       	movw	r24, r14
     8c6:	09 95       	icall
     8c8:	f3 cf       	rjmp	.-26     	; 0x8b0 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:231
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     8ca:	64 2f       	mov	r22, r20
     8cc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <twi_transmit>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:234
  }
  return quantity;
}
     8d0:	c8 01       	movw	r24, r16
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	08 95       	ret

000008e4 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:197

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	1f 92       	push	r1
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	69 83       	std	Y+1, r22	; 0x01
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:198
  if(transmitting){
     8f0:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <TwoWire::transmitting>
     8f4:	22 23       	and	r18, r18
     8f6:	f9 f0       	breq	.+62     	; 0x936 <__stack+0x37>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:201
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     8f8:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <TwoWire::txBufferLength>
     8fc:	20 32       	cpi	r18, 0x20	; 32
     8fe:	58 f0       	brcs	.+22     	; 0x916 <__stack+0x17>
_ZN5Print13setWriteErrorEi():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	fc 01       	movw	r30, r24
     906:	33 83       	std	Z+3, r19	; 0x03
     908:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:203
      setWriteError();
      return 0;
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:216
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
     90e:	0f 90       	pop	r0
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:206
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     916:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <TwoWire::txBufferIndex>
     91a:	e8 2f       	mov	r30, r24
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	e3 5c       	subi	r30, 0xC3	; 195
     920:	fd 4f       	sbci	r31, 0xFD	; 253
     922:	99 81       	ldd	r25, Y+1	; 0x01
     924:	90 83       	st	Z, r25
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:207
    ++txBufferIndex;
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TwoWire::txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:209
    // update amount in buffer
    txBufferLength = txBufferIndex;
     92c:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <TwoWire::txBufferLength>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:215
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	ec cf       	rjmp	.-40     	; 0x90e <__stack+0xf>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:213
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <twi_transmit>
     940:	f7 cf       	rjmp	.-18     	; 0x930 <__stack+0x31>

00000942 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	0c 94 df 00 	jmp	0x1be	; 0x1be <TwoWire::endTransmission(unsigned char) [clone .constprop.66]>

00000948 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	08 95       	ret

0000094e <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>:
_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j.part.1():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:71
 *            ensure the content of this buffer doesn't change.
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	ea 01       	movw	r28, r20
     956:	12 2f       	mov	r17, r18
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:97
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
     958:	dc 01       	movw	r26, r24
     95a:	11 96       	adiw	r26, 0x01	; 1
     95c:	8d 91       	ld	r24, X+
     95e:	9c 91       	ld	r25, X
     960:	dc 01       	movw	r26, r24
     962:	ed 91       	ld	r30, X+
     964:	fc 91       	ld	r31, X
     966:	02 80       	ldd	r0, Z+2	; 0x02
     968:	f3 81       	ldd	r31, Z+3	; 0x03
     96a:	e0 2d       	mov	r30, r0
     96c:	09 95       	icall
     96e:	c8 17       	cp	r28, r24
     970:	d9 07       	cpc	r29, r25
     972:	29 f4       	brne	.+10     	; 0x97e <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]+0x30>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:131

#ifdef DEBUG_SERIAL
  // DEBUG_SERIAL.print("Stop: "); DEBUG_SERIAL.println(stop);
#endif

  if (_wire->endTransmission(stop) == 0) {
     974:	81 2f       	mov	r24, r17
     976:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::endTransmission(unsigned char) [clone .constprop.66]>
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	81 11       	cpse	r24, r1
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:101
  // Write the data itself
  if (_wire->write(buffer, len) != len) {
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice failed to write"));
#endif
    return false;
     97e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:142
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
     980:	89 2f       	mov	r24, r25
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	08 95       	ret

0000098a <Adafruit_I2CDevice::detected()>:
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:44
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ec 01       	movw	r28, r24
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:46
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	88 23       	and	r24, r24
     994:	a9 f0       	breq	.+42     	; 0x9c0 <Adafruit_I2CDevice::detected()+0x36>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:51
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	9a 81       	ldd	r25, Y+2	; 0x02
     99a:	28 81       	ld	r18, Y
beginTransmission():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     99c:	31 e0       	ldi	r19, 0x01	; 1
     99e:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <TwoWire::transmitting>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     9a2:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <TwoWire::txAddress>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     9a6:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TwoWire::txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     9aa:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <TwoWire::txBufferLength>
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:52
  if (_wire->endTransmission() == 0) {
     9ae:	0e 94 a1 04 	call	0x942	; 0x942 <TwoWire::endTransmission()>
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	81 11       	cpse	r24, r1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:56
    return true;
  }
  return false;
}
     9b8:	89 2f       	mov	r24, r25
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret
begin():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:30
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
     9c0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <TwoWire::begin() [clone .constprop.32]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:31
  _begun = true;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:34

  if (addr_detect) {
    return detected();
     9c8:	ce 01       	movw	r24, r28
     9ca:	0e 94 c5 04 	call	0x98a	; 0x98a <Adafruit_I2CDevice::detected()>
     9ce:	98 2f       	mov	r25, r24
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:46
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
  // Init I2C if not done yet
  if (!_begun && !begin()) {
     9d0:	81 11       	cpse	r24, r1
     9d2:	e1 cf       	rjmp	.-62     	; 0x996 <Adafruit_I2CDevice::detected()+0xc>
     9d4:	f1 cf       	rjmp	.-30     	; 0x9b8 <Adafruit_I2CDevice::detected()+0x2e>

000009d6 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]>:
_ZN7MS_580311MS_5803_ADCEc.constprop.61():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:352
    return (n_rem ^ 0x00); 
}

//-----------------------------------------------------------------
// Send commands and read the temperature and pressure from the sensor
unsigned long MS_5803::MS_5803_ADC(char commandADC) {
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	c8 2f       	mov	r28, r24
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:357
	// D1 and D2 will come back as 24-bit values, and so they must be stored in 
	// a long integer on 8-bit Arduinos.
    long result = 0;
    // Send the command to do the ADC conversion on the chip
	Wire.beginTransmission(_I2C_Address);
     9de:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <pressure_sensor+0x12>
beginTransmission():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TwoWire::transmitting>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     9e8:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <TwoWire::txAddress>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     9ec:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TwoWire::txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     9f0:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <TwoWire::txBufferLength>
_ZN7MS_580311MS_5803_ADCEc.constprop.61():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:358
    Wire.write(CMD_ADC_CONV + commandADC);
     9f4:	6c 2f       	mov	r22, r28
     9f6:	0c 2e       	mov	r0, r28
     9f8:	00 0c       	add	r0, r0
     9fa:	77 0b       	sbc	r23, r23
     9fc:	60 5c       	subi	r22, 0xC0	; 192
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
write():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     a00:	83 e4       	ldi	r24, 0x43	; 67
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	0e 94 72 04 	call	0x8e4	; 0x8e4 <TwoWire::write(unsigned char)>
_ZN7MS_580311MS_5803_ADCEc.constprop.61():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:359
    Wire.endTransmission();
     a08:	83 e4       	ldi	r24, 0x43	; 67
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	0e 94 a1 04 	call	0x942	; 0x942 <TwoWire::endTransmission()>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:363
    // Wait a specified period of time for the ADC conversion to happen
    // See table on page 1 of the MS5803 data sheet showing response times of
    // 0.5, 1.1, 2.1, 4.1, 8.22 ms for each accuracy level. 
    switch (commandADC & 0x0F) 
     a10:	cf 70       	andi	r28, 0x0F	; 15
     a12:	c4 30       	cpi	r28, 0x04	; 4
     a14:	09 f4       	brne	.+2      	; 0xa18 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0x42>
     a16:	51 c0       	rjmp	.+162    	; 0xaba <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0xe4>
     a18:	0c f0       	brlt	.+2      	; 0xa1c <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0x46>
     a1a:	3f c0       	rjmp	.+126    	; 0xa9a <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0xc4>
     a1c:	cc 23       	and	r28, r28
     a1e:	09 f4       	brne	.+2      	; 0xa22 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0x4c>
     a20:	47 c0       	rjmp	.+142    	; 0xab0 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0xda>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:369
    {
        case CMD_ADC_256 :
            delay(1); // 1 ms
            break;
        case CMD_ADC_512 :
            delay(3); // 3 ms
     a22:	63 e0       	ldi	r22, 0x03	; 3
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:363
    Wire.write(CMD_ADC_CONV + commandADC);
    Wire.endTransmission();
    // Wait a specified period of time for the ADC conversion to happen
    // See table on page 1 of the MS5803 data sheet showing response times of
    // 0.5, 1.1, 2.1, 4.1, 8.22 ms for each accuracy level. 
    switch (commandADC & 0x0F) 
     a2a:	c2 30       	cpi	r28, 0x02	; 2
     a2c:	f1 f1       	breq	.+124    	; 0xaaa <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0xd4>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:382
        case CMD_ADC_4096:
            delay(10);
            break;
    }
    // Now send the read command to the MS5803 
    Wire.beginTransmission(_I2C_Address);
     a2e:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <pressure_sensor+0x12>
beginTransmission():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TwoWire::transmitting>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     a38:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <TwoWire::txAddress>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     a3c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TwoWire::txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     a40:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <TwoWire::txBufferLength>
_ZN7MS_580311MS_5803_ADCEc.constprop.61():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:383
    Wire.write((byte)CMD_ADC_READ); // added cast
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	83 e4       	ldi	r24, 0x43	; 67
     a48:	93 e0       	ldi	r25, 0x03	; 3
     a4a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <TwoWire::write(unsigned char)>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:384
    Wire.endTransmission();
     a4e:	83 e4       	ldi	r24, 0x43	; 67
     a50:	93 e0       	ldi	r25, 0x03	; 3
     a52:	0e 94 a1 04 	call	0x942	; 0x942 <TwoWire::endTransmission()>
twi_readFrom():
     a56:	41 e0       	ldi	r20, 0x01	; 1
     a58:	63 e0       	ldi	r22, 0x03	; 3
     a5a:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <pressure_sensor+0x12>
     a5e:	0e 94 9d 00 	call	0x13a	; 0x13a <twi_readFrom.part.0.constprop.70>
     a62:	c8 2f       	mov	r28, r24
requestFrom():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     a64:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <TwoWire::rxBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
     a68:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <TwoWire::rxBufferLength>
_ZN7MS_580311MS_5803_ADCEc.constprop.61():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:387
    // Then request the results. This should be a 24-bit result (3 bytes)
    Wire.requestFrom(_I2C_Address, 3);
    while(Wire.available()) {
     a6c:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <TwoWire::rxBufferIndex>
     a70:	c8 17       	cp	r28, r24
     a72:	69 f1       	breq	.+90     	; 0xace <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0xf8>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:388
    	HighByte = Wire.read();
     a74:	83 e4       	ldi	r24, 0x43	; 67
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 32 04 	call	0x864	; 0x864 <TwoWire::read()>
     a7c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <HighByte>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:389
    	MidByte = Wire.read();
     a80:	83 e4       	ldi	r24, 0x43	; 67
     a82:	93 e0       	ldi	r25, 0x03	; 3
     a84:	0e 94 32 04 	call	0x864	; 0x864 <TwoWire::read()>
     a88:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <MidByte>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:390
    	LowByte = Wire.read();
     a8c:	83 e4       	ldi	r24, 0x43	; 67
     a8e:	93 e0       	ldi	r25, 0x03	; 3
     a90:	0e 94 32 04 	call	0x864	; 0x864 <TwoWire::read()>
     a94:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <LowByte>
     a98:	e9 cf       	rjmp	.-46     	; 0xa6c <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0x96>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:363
    Wire.write(CMD_ADC_CONV + commandADC);
    Wire.endTransmission();
    // Wait a specified period of time for the ADC conversion to happen
    // See table on page 1 of the MS5803 data sheet showing response times of
    // 0.5, 1.1, 2.1, 4.1, 8.22 ms for each accuracy level. 
    switch (commandADC & 0x0F) 
     a9a:	c6 30       	cpi	r28, 0x06	; 6
     a9c:	99 f0       	breq	.+38     	; 0xac4 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0xee>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:378
            break;
        case CMD_ADC_2048:
            delay(6);
            break;
        case CMD_ADC_4096:
            delay(10);
     a9e:	6a e0       	ldi	r22, 0x0A	; 10
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:363
    Wire.write(CMD_ADC_CONV + commandADC);
    Wire.endTransmission();
    // Wait a specified period of time for the ADC conversion to happen
    // See table on page 1 of the MS5803 data sheet showing response times of
    // 0.5, 1.1, 2.1, 4.1, 8.22 ms for each accuracy level. 
    switch (commandADC & 0x0F) 
     aa6:	c8 30       	cpi	r28, 0x08	; 8
     aa8:	11 f6       	brne	.-124    	; 0xa2e <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0x58>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:378
            break;
        case CMD_ADC_2048:
            delay(6);
            break;
        case CMD_ADC_4096:
            delay(10);
     aaa:	0e 94 bf 03 	call	0x77e	; 0x77e <delay>
     aae:	bf cf       	rjmp	.-130    	; 0xa2e <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0x58>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:366
    // See table on page 1 of the MS5803 data sheet showing response times of
    // 0.5, 1.1, 2.1, 4.1, 8.22 ms for each accuracy level. 
    switch (commandADC & 0x0F) 
    {
        case CMD_ADC_256 :
            delay(1); // 1 ms
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	f8 cf       	rjmp	.-16     	; 0xaaa <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0xd4>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:372
            break;
        case CMD_ADC_512 :
            delay(3); // 3 ms
            break;
        case CMD_ADC_1024:
            delay(4);
     aba:	64 e0       	ldi	r22, 0x04	; 4
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	f3 cf       	rjmp	.-26     	; 0xaaa <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0xd4>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:375
            break;
        case CMD_ADC_2048:
            delay(6);
     ac4:	66 e0       	ldi	r22, 0x06	; 6
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	ee cf       	rjmp	.-36     	; 0xaaa <MS_5803::MS_5803_ADC(char) [clone .constprop.61]+0xd4>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:393
    	HighByte = Wire.read();
    	MidByte = Wire.read();
    	LowByte = Wire.read();
    }
    // Combine the bytes into one integer
    result = ((long)HighByte << 16) + ((long)MidByte << 8) + (long)LowByte;
     ace:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <HighByte>
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	cb 01       	movw	r24, r22
     ada:	77 27       	eor	r23, r23
     adc:	66 27       	eor	r22, r22
     ade:	00 91 39 02 	lds	r16, 0x0239	; 0x800239 <MidByte>
     ae2:	10 e0       	ldi	r17, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	32 2f       	mov	r19, r18
     aea:	21 2f       	mov	r18, r17
     aec:	10 2f       	mov	r17, r16
     aee:	00 27       	eor	r16, r16
     af0:	60 0f       	add	r22, r16
     af2:	71 1f       	adc	r23, r17
     af4:	82 1f       	adc	r24, r18
     af6:	93 1f       	adc	r25, r19
     af8:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <LowByte>
     afc:	62 0f       	add	r22, r18
     afe:	71 1d       	adc	r23, r1
     b00:	81 1d       	adc	r24, r1
     b02:	91 1d       	adc	r25, r1
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:395
    return result;
}
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	08 95       	ret

00000b0c <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]>:
_ZN17Adafruit_VCNL40106write8Ehh.constprop.54():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:174
  i2c_dev->write_then_read(buffer, 1, buffer, 2);
  return (uint16_t(buffer[0]) << 8) | uint16_t(buffer[1]);
}

// write 1 byte
void Adafruit_VCNL4010::write8(uint8_t address, uint8_t data) {
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	00 d0       	rcall	.+0      	; 0xb12 <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]+0x6>
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:175
  uint8_t buffer[2] = {address, data};
     b16:	89 83       	std	Y+1, r24	; 0x01
     b18:	6a 83       	std	Y+2, r22	; 0x02
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:176
  i2c_dev->write(buffer, 2);
     b1a:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <vcnl>
     b1e:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <vcnl+0x1>
write():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:74
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
     b22:	fc 01       	movw	r30, r24
     b24:	24 81       	ldd	r18, Z+4	; 0x04
     b26:	35 81       	ldd	r19, Z+5	; 0x05
     b28:	22 30       	cpi	r18, 0x02	; 2
     b2a:	31 05       	cpc	r19, r1
     b2c:	90 f0       	brcs	.+36     	; 0xb52 <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]+0x46>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:84
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
     b2e:	20 81       	ld	r18, Z
beginTransmission():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     b30:	31 e0       	ldi	r19, 0x01	; 1
     b32:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <TwoWire::transmitting>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     b36:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <TwoWire::txAddress>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     b3a:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TwoWire::txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     b3e:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <TwoWire::txBufferLength>
write():
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	42 e0       	ldi	r20, 0x02	; 2
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	be 01       	movw	r22, r28
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	0e 94 a7 04 	call	0x94e	; 0x94e <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
_ZN17Adafruit_VCNL40106write8Ehh.constprop.54():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:177
}
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool) [clone .constprop.57]>:
_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb.constprop.57():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:206
 *    @param  read_buffer Pointer to buffer of data to read into.
 *    @param  read_len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
     b5c:	bf 92       	push	r11
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
write():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:74
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
  if ((len + prefix_len) > maxBufferSize()) {
     b6e:	dc 01       	movw	r26, r24
     b70:	14 96       	adiw	r26, 0x04	; 4
     b72:	ed 91       	ld	r30, X+
     b74:	fc 91       	ld	r31, X
     b76:	15 97       	sbiw	r26, 0x05	; 5
     b78:	ef 2b       	or	r30, r31
     b7a:	09 f4       	brne	.+2      	; 0xb7e <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool) [clone .constprop.57]+0x22>
     b7c:	4b c0       	rjmp	.+150    	; 0xc14 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool) [clone .constprop.57]+0xb8>
     b7e:	e9 01       	movw	r28, r18
     b80:	c5 2e       	mov	r12, r21
     b82:	b4 2e       	mov	r11, r20
     b84:	8c 01       	movw	r16, r24
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:84
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
     b86:	fc 01       	movw	r30, r24
     b88:	80 81       	ld	r24, Z
beginTransmission():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TwoWire::transmitting>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
     b90:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <TwoWire::txAddress>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     b94:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TwoWire::txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
     b98:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <TwoWire::txBufferLength>
write():
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	cd 01       	movw	r24, r26
     ba4:	0e 94 a7 04 	call	0x94e	; 0x94e <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int) [clone .part.1]>
     ba8:	d8 2e       	mov	r13, r24
_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb.constprop.57():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:209
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
     baa:	88 23       	and	r24, r24
     bac:	99 f1       	breq	.+102    	; 0xc14 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool) [clone .constprop.57]+0xb8>
read():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:153
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  if (len > maxBufferSize()) {
     bae:	d8 01       	movw	r26, r16
     bb0:	14 96       	adiw	r26, 0x04	; 4
     bb2:	8d 91       	ld	r24, X+
     bb4:	9c 91       	ld	r25, X
     bb6:	15 97       	sbiw	r26, 0x05	; 5
     bb8:	8c 17       	cp	r24, r28
     bba:	9d 07       	cpc	r25, r29
     bbc:	58 f1       	brcs	.+86     	; 0xc14 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool) [clone .constprop.57]+0xb8>
twi_readFrom():
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	6c 2f       	mov	r22, r28
     bc2:	8c 91       	ld	r24, X
     bc4:	0e 94 9d 00 	call	0x13a	; 0x13a <twi_readFrom.part.0.constprop.70>
requestFrom():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     bc8:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <TwoWire::rxBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
     bcc:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <TwoWire::rxBufferLength>
read():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:164
#endif
    return false;
  }

  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
  if (recv != len) {
     bd0:	8c 17       	cp	r24, r28
     bd2:	1d 06       	cpc	r1, r29
     bd4:	f9 f4       	brne	.+62     	; 0xc14 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool) [clone .constprop.57]+0xb8>
     bd6:	eb 2c       	mov	r14, r11
     bd8:	fc 2c       	mov	r15, r12
     bda:	ce 0d       	add	r28, r14
     bdc:	df 1d       	adc	r29, r15
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:174
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    buffer[i] = _wire->read();
     bde:	f8 01       	movw	r30, r16
     be0:	81 81       	ldd	r24, Z+1	; 0x01
     be2:	92 81       	ldd	r25, Z+2	; 0x02
     be4:	dc 01       	movw	r26, r24
     be6:	ed 91       	ld	r30, X+
     be8:	fc 91       	ld	r31, X
     bea:	02 84       	ldd	r0, Z+10	; 0x0a
     bec:	f3 85       	ldd	r31, Z+11	; 0x0b
     bee:	e0 2d       	mov	r30, r0
     bf0:	09 95       	icall
     bf2:	f7 01       	movw	r30, r14
     bf4:	81 93       	st	Z+, r24
     bf6:	7f 01       	movw	r14, r30
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:173
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
     bf8:	ce 17       	cp	r28, r30
     bfa:	df 07       	cpc	r29, r31
     bfc:	81 f7       	brne	.-32     	; 0xbde <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool) [clone .constprop.57]+0x82>
_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb.constprop.57():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:214
  if (!write(write_buffer, write_len, stop)) {
    return false;
  }

  return read(read_buffer, read_len);
}
     bfe:	8d 2d       	mov	r24, r13
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	08 95       	ret
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:210
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    return false;
     c14:	d1 2c       	mov	r13, r1
     c16:	f3 cf       	rjmp	.-26     	; 0xbfe <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool) [clone .constprop.57]+0xa2>

00000c18 <Adafruit_VCNL4010::read16(unsigned char) [clone .constprop.56]>:
_ZN17Adafruit_VCNL40106read16Eh.constprop.56():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:167
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
  return buffer[0];
}

// Read 2 byte from the VCNL4000 at 'address'
uint16_t Adafruit_VCNL4010::read16(uint8_t address) {
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <Adafruit_VCNL4010::read16(unsigned char) [clone .constprop.56]+0x6>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:168
  uint8_t buffer[2] = {address, 0};
     c22:	1a 82       	std	Y+2, r1	; 0x02
     c24:	19 82       	std	Y+1, r1	; 0x01
     c26:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:169
  i2c_dev->write_then_read(buffer, 1, buffer, 2);
     c28:	22 e0       	ldi	r18, 0x02	; 2
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	ae 01       	movw	r20, r28
     c2e:	4f 5f       	subi	r20, 0xFF	; 255
     c30:	5f 4f       	sbci	r21, 0xFF	; 255
     c32:	ba 01       	movw	r22, r20
     c34:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <vcnl>
     c38:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <vcnl+0x1>
     c3c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool) [clone .constprop.57]>
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:171
  return (uint16_t(buffer[0]) << 8) | uint16_t(buffer[1]);
}
     c44:	98 27       	eor	r25, r24
     c46:	89 27       	eor	r24, r25
     c48:	98 27       	eor	r25, r24
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <Adafruit_VCNL4010::read8(unsigned char) [clone .constprop.55]>:
_ZN17Adafruit_VCNL40105read8Eh.constprop.55():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:160
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VCNL4000 at 'address'
uint8_t Adafruit_VCNL4010::read8(uint8_t address) {
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	1f 92       	push	r1
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:161
  uint8_t buffer[1] = {address};
     c5e:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:162
  i2c_dev->write_then_read(buffer, 1, buffer, 1);
     c60:	21 e0       	ldi	r18, 0x01	; 1
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	ae 01       	movw	r20, r28
     c66:	4f 5f       	subi	r20, 0xFF	; 255
     c68:	5f 4f       	sbci	r21, 0xFF	; 255
     c6a:	ba 01       	movw	r22, r20
     c6c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <vcnl>
     c70:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <vcnl+0x1>
     c74:	0e 94 ae 05 	call	0xb5c	; 0xb5c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool) [clone .constprop.57]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:164
  return buffer[0];
}
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	0f 90       	pop	r0
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <Packet::reset() [clone .constprop.21]>:
_ZN6Packet5resetEv.constprop.21():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:439
 -------
  * void
*/
void Packet::reset()
{
	memset(txBuff, 0, sizeof(txBuff));
     c82:	8e ef       	ldi	r24, 0xFE	; 254
     c84:	eb e6       	ldi	r30, 0x6B	; 107
     c86:	f3 e0       	ldi	r31, 0x03	; 3
     c88:	df 01       	movw	r26, r30
     c8a:	98 2f       	mov	r25, r24
     c8c:	1d 92       	st	X+, r1
     c8e:	9a 95       	dec	r25
     c90:	e9 f7       	brne	.-6      	; 0xc8c <Packet::reset() [clone .constprop.21]+0xa>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:440
	memset(rxBuff, 0, sizeof(rxBuff));
     c92:	e9 e6       	ldi	r30, 0x69	; 105
     c94:	f4 e0       	ldi	r31, 0x04	; 4
     c96:	df 01       	movw	r26, r30
     c98:	1d 92       	st	X+, r1
     c9a:	8a 95       	dec	r24
     c9c:	e9 f7       	brne	.-6      	; 0xc98 <Packet::reset() [clone .constprop.21]+0x16>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:442

	bytesRead   = 0;
     c9e:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myTransfer+0x202>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:443
	status      = CONTINUE;
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <myTransfer+0x203>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:444
	packetStart = 0;
     ca8:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <myTransfer+0x211>
     cac:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <myTransfer+0x212>
     cb0:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <myTransfer+0x213>
     cb4:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <myTransfer+0x214>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:445
}
     cb8:	08 95       	ret

00000cba <SerialTransfer::reset() [clone .constprop.20]>:
_ZN14SerialTransfer5resetEv.constprop.20():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:181
 -------
  * void
*/
void SerialTransfer::reset()
{
	while (port->available())
     cba:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <myTransfer+0x21b>
     cbe:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <myTransfer+0x21c>
     cc2:	dc 01       	movw	r26, r24
     cc4:	ed 91       	ld	r30, X+
     cc6:	fc 91       	ld	r31, X
     cc8:	00 84       	ldd	r0, Z+8	; 0x08
     cca:	f1 85       	ldd	r31, Z+9	; 0x09
     ccc:	e0 2d       	mov	r30, r0
     cce:	09 95       	icall
     cd0:	89 2b       	or	r24, r25
     cd2:	61 f0       	breq	.+24     	; 0xcec <SerialTransfer::reset() [clone .constprop.20]+0x32>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:182
		port->read();
     cd4:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <myTransfer+0x21b>
     cd8:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <myTransfer+0x21c>
     cdc:	dc 01       	movw	r26, r24
     cde:	ed 91       	ld	r30, X+
     ce0:	fc 91       	ld	r31, X
     ce2:	02 84       	ldd	r0, Z+10	; 0x0a
     ce4:	f3 85       	ldd	r31, Z+11	; 0x0b
     ce6:	e0 2d       	mov	r30, r0
     ce8:	09 95       	icall
     cea:	e7 cf       	rjmp	.-50     	; 0xcba <SerialTransfer::reset() [clone .constprop.20]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:184

	packet.reset();
     cec:	0e 94 41 06 	call	0xc82	; 0xc82 <Packet::reset() [clone .constprop.21]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:185
	status = packet.status;
     cf0:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <myTransfer+0x203>
     cf4:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <myTransfer+0x21a>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:186
}
     cf8:	08 95       	ret

00000cfa <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc.part.2():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     cfa:	fb 01       	movw	r30, r22
     cfc:	01 90       	ld	r0, Z+
     cfe:	00 20       	and	r0, r0
     d00:	e9 f7       	brne	.-6      	; 0xcfc <Print::write(char const*) [clone .part.2]+0x2>
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	af 01       	movw	r20, r30
     d06:	46 1b       	sub	r20, r22
     d08:	57 0b       	sbc	r21, r23
     d0a:	dc 01       	movw	r26, r24
     d0c:	ed 91       	ld	r30, X+
     d0e:	fc 91       	ld	r31, X
     d10:	02 80       	ldd	r0, Z+2	; 0x02
     d12:	f3 81       	ldd	r31, Z+3	; 0x03
     d14:	e0 2d       	mov	r30, r0
     d16:	09 94       	ijmp

00000d18 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     d18:	8f 92       	push	r8
     d1a:	9f 92       	push	r9
     d1c:	af 92       	push	r10
     d1e:	bf 92       	push	r11
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	a1 97       	sbiw	r28, 0x21	; 33
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	7c 01       	movw	r14, r24
     d3e:	fa 01       	movw	r30, r20
     d40:	cb 01       	movw	r24, r22
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     d42:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     d44:	22 30       	cpi	r18, 0x02	; 2
     d46:	08 f4       	brcc	.+2      	; 0xd4a <Print::printNumber(unsigned long, unsigned char)+0x32>
     d48:	2a e0       	ldi	r18, 0x0A	; 10
     d4a:	8e 01       	movw	r16, r28
     d4c:	0f 5d       	subi	r16, 0xDF	; 223
     d4e:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     d50:	82 2e       	mov	r8, r18
     d52:	91 2c       	mov	r9, r1
     d54:	b1 2c       	mov	r11, r1
     d56:	a1 2c       	mov	r10, r1
     d58:	bf 01       	movw	r22, r30
     d5a:	a5 01       	movw	r20, r10
     d5c:	94 01       	movw	r18, r8
     d5e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__udivmodsi4>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
     d62:	f9 01       	movw	r30, r18
     d64:	ca 01       	movw	r24, r20
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     d66:	6a 30       	cpi	r22, 0x0A	; 10
     d68:	0c f5       	brge	.+66     	; 0xdac <Print::printNumber(unsigned long, unsigned char)+0x94>
     d6a:	60 5d       	subi	r22, 0xD0	; 208
     d6c:	d8 01       	movw	r26, r16
     d6e:	6e 93       	st	-X, r22
     d70:	8d 01       	movw	r16, r26
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
     d72:	23 2b       	or	r18, r19
     d74:	24 2b       	or	r18, r20
     d76:	25 2b       	or	r18, r21
     d78:	79 f7       	brne	.-34     	; 0xd58 <Print::printNumber(unsigned long, unsigned char)+0x40>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	80 e0       	ldi	r24, 0x00	; 0
write():
     d7e:	10 97       	sbiw	r26, 0x00	; 0
     d80:	21 f0       	breq	.+8      	; 0xd8a <Print::printNumber(unsigned long, unsigned char)+0x72>
     d82:	bd 01       	movw	r22, r26
     d84:	c7 01       	movw	r24, r14
     d86:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     d8a:	a1 96       	adiw	r28, 0x21	; 33
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	bf 90       	pop	r11
     da4:	af 90       	pop	r10
     da6:	9f 90       	pop	r9
     da8:	8f 90       	pop	r8
     daa:	08 95       	ret
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     dac:	69 5c       	subi	r22, 0xC9	; 201
     dae:	de cf       	rjmp	.-68     	; 0xd6c <Print::printNumber(unsigned long, unsigned char)+0x54>

00000db0 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:139
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	ec 01       	movw	r28, r24
write():
     dba:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Print::write(char const*) [clone .part.2]>
     dbe:	8c 01       	movw	r16, r24
     dc0:	6b e2       	ldi	r22, 0x2B	; 43
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Print::write(char const*) [clone .part.2]>
_ZN5Print7printlnEPKc():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:143
  size_t n = print(c);
  n += println();
  return n;
}
     dca:	80 0f       	add	r24, r16
     dcc:	91 1f       	adc	r25, r17
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]>:
_ZN6Packet5parseERKhRKb.constprop.8():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:119
 Return:
 -------
  * uint8_t - Num bytes in RX buffer
*/

uint8_t Packet::parse(const uint8_t& recChar, const bool& valid)
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	dc 01       	movw	r26, r24
     de6:	fb 01       	movw	r30, r22
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:121
{
	bool packet_fresh = (packetStart == 0) || ((millis() - packetStart) < timeout);
     de8:	40 91 7c 05 	lds	r20, 0x057C	; 0x80057c <myTransfer+0x211>
     dec:	50 91 7d 05 	lds	r21, 0x057D	; 0x80057d <myTransfer+0x212>
     df0:	60 91 7e 05 	lds	r22, 0x057E	; 0x80057e <myTransfer+0x213>
     df4:	70 91 7f 05 	lds	r23, 0x057F	; 0x80057f <myTransfer+0x214>
     df8:	45 2b       	or	r20, r21
     dfa:	46 2b       	or	r20, r22
     dfc:	47 2b       	or	r20, r23
     dfe:	39 f4       	brne	.+14     	; 0xe0e <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x36>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:136
		packetStart = 0;

		return bytesRead;
	}

	if (valid)
     e00:	80 81       	ld	r24, Z
     e02:	81 11       	cpse	r24, r1
     e04:	47 c0       	rjmp	.+142    	; 0xe94 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0xbc>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:275
		}
		}
	}
	else
	{
		bytesRead = 0;
     e06:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myTransfer+0x202>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:276
		status    = NO_DATA;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	75 c0       	rjmp	.+234    	; 0xef8 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x120>
millis():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     e0e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     e10:	f8 94       	cli
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     e12:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <timer0_millis>
     e16:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <timer0_millis+0x1>
     e1a:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <timer0_millis+0x2>
     e1e:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <timer0_millis+0x3>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     e22:	8f bf       	out	0x3f, r24	; 63
_ZN6Packet5parseERKhRKb.constprop.8():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:121
  * uint8_t - Num bytes in RX buffer
*/

uint8_t Packet::parse(const uint8_t& recChar, const bool& valid)
{
	bool packet_fresh = (packetStart == 0) || ((millis() - packetStart) < timeout);
     e24:	c0 90 7c 05 	lds	r12, 0x057C	; 0x80057c <myTransfer+0x211>
     e28:	d0 90 7d 05 	lds	r13, 0x057D	; 0x80057d <myTransfer+0x212>
     e2c:	e0 90 7e 05 	lds	r14, 0x057E	; 0x80057e <myTransfer+0x213>
     e30:	f0 90 7f 05 	lds	r15, 0x057F	; 0x80057f <myTransfer+0x214>
     e34:	4c 19       	sub	r20, r12
     e36:	5d 09       	sbc	r21, r13
     e38:	6e 09       	sbc	r22, r14
     e3a:	7f 09       	sbc	r23, r15
     e3c:	c0 90 80 05 	lds	r12, 0x0580	; 0x800580 <myTransfer+0x215>
     e40:	d0 90 81 05 	lds	r13, 0x0581	; 0x800581 <myTransfer+0x216>
     e44:	e0 90 82 05 	lds	r14, 0x0582	; 0x800582 <myTransfer+0x217>
     e48:	f0 90 83 05 	lds	r15, 0x0583	; 0x800583 <myTransfer+0x218>
     e4c:	4c 15       	cp	r20, r12
     e4e:	5d 05       	cpc	r21, r13
     e50:	6e 05       	cpc	r22, r14
     e52:	7f 05       	cpc	r23, r15
     e54:	a8 f2       	brcs	.-86     	; 0xe00 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x28>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:125

	if(!packet_fresh) //packet is stale, start over.
	{
		if (debug)
     e56:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <myTransfer+0x20b>
     e5a:	88 23       	and	r24, r24
     e5c:	41 f0       	breq	.+16     	; 0xe6e <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x96>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:126
			debugPort->println("ERROR: STALE PACKET");
     e5e:	6e e2       	ldi	r22, 0x2E	; 46
     e60:	71 e0       	ldi	r23, 0x01	; 1
     e62:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <myTransfer+0x209>
     e66:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <myTransfer+0x20a>
     e6a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Print::println(char const*)>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:128

		bytesRead   = 0;
     e6e:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myTransfer+0x202>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:129
		state       = find_start_byte;
     e72:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <myTransfer+0x205>
     e76:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <myTransfer+0x204>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:130
		status      = STALE_PACKET_ERROR;
     e7a:	8d ef       	ldi	r24, 0xFD	; 253
     e7c:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <myTransfer+0x203>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:131
		packetStart = 0;
     e80:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <myTransfer+0x211>
     e84:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <myTransfer+0x212>
     e88:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <myTransfer+0x213>
     e8c:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <myTransfer+0x214>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:277
	}
	else
	{
		bytesRead = 0;
		status    = NO_DATA;
		return bytesRead;
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	ed c0       	rjmp	.+474    	; 0x106e <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x296>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:138
		return bytesRead;
	}

	if (valid)
	{
		switch (state)
     e94:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <myTransfer+0x204>
     e98:	f0 91 70 05 	lds	r31, 0x0570	; 0x800570 <myTransfer+0x205>
     e9c:	e7 30       	cpi	r30, 0x07	; 7
     e9e:	f1 05       	cpc	r31, r1
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0xcc>
     ea2:	25 c1       	rjmp	.+586    	; 0x10ee <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x316>
     ea4:	ea 5a       	subi	r30, 0xAA	; 170
     ea6:	f8 4f       	sbci	r31, 0xF8	; 248
     ea8:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__tablejump2__>
     eac:	5d 07       	cpc	r21, r29
     eae:	7f 07       	cpc	r23, r31
     eb0:	89 07       	cpc	r24, r25
     eb2:	8f 07       	cpc	r24, r31
     eb4:	af 07       	cpc	r26, r31
     eb6:	c3 07       	cpc	r28, r19
     eb8:	f7 07       	cpc	r31, r23
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:142
		{
		case find_start_byte: /////////////////////////////////////////
		{
			if (recChar == START_BYTE)
     eba:	8c 91       	ld	r24, X
     ebc:	8e 37       	cpi	r24, 0x7E	; 126
     ebe:	c9 f4       	brne	.+50     	; 0xef2 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x11a>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:144
			{
				state       = find_id_byte;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <myTransfer+0x205>
     ec8:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <myTransfer+0x204>
millis():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     ecc:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     ece:	f8 94       	cli
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     ed0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <timer0_millis>
     ed4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <timer0_millis+0x1>
     ed8:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <timer0_millis+0x2>
     edc:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <timer0_millis+0x3>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     ee0:	2f bf       	out	0x3f, r18	; 63
_ZN6Packet5parseERKhRKb.constprop.8():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:145
				packetStart = millis();	//start the timer
     ee2:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <myTransfer+0x211>
     ee6:	90 93 7d 05 	sts	0x057D, r25	; 0x80057d <myTransfer+0x212>
     eea:	a0 93 7e 05 	sts	0x057E, r26	; 0x80057e <myTransfer+0x213>
     eee:	b0 93 7f 05 	sts	0x057F, r27	; 0x80057f <myTransfer+0x214>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:280
		bytesRead = 0;
		status    = NO_DATA;
		return bytesRead;
	}

	bytesRead = 0;
     ef2:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myTransfer+0x202>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:281
	status    = CONTINUE;
     ef6:	83 e0       	ldi	r24, 0x03	; 3
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:276
		}
	}
	else
	{
		bytesRead = 0;
		status    = NO_DATA;
     ef8:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <myTransfer+0x203>
     efc:	c9 cf       	rjmp	.-110    	; 0xe90 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0xb8>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:153
			break;
		}

		case find_id_byte: ////////////////////////////////////////////
		{
			idByte = recChar;
     efe:	8c 91       	ld	r24, X
     f00:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <myTransfer+0x20e>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:154
			state  = find_overhead_byte;
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:161
		}

		case find_overhead_byte: //////////////////////////////////////
		{
			recOverheadByte = recChar;
			state           = find_payload_len;
     f08:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <myTransfer+0x205>
     f0c:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <myTransfer+0x204>
     f10:	f0 cf       	rjmp	.-32     	; 0xef2 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x11a>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:160
			break;
		}

		case find_overhead_byte: //////////////////////////////////////
		{
			recOverheadByte = recChar;
     f12:	8c 91       	ld	r24, X
     f14:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <myTransfer+0x210>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:161
			state           = find_payload_len;
     f18:	83 e0       	ldi	r24, 0x03	; 3
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	f5 cf       	rjmp	.-22     	; 0xf08 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x130>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:167
			break;
		}

		case find_payload_len: ////////////////////////////////////////
		{
			if ((recChar > 0) && (recChar <= MAX_PACKET_SIZE))
     f1e:	8c 91       	ld	r24, X
     f20:	9f ef       	ldi	r25, 0xFF	; 255
     f22:	98 0f       	add	r25, r24
     f24:	9e 3f       	cpi	r25, 0xFE	; 254
     f26:	38 f4       	brcc	.+14     	; 0xf36 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x15e>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:169
			{
				bytesToRec = recChar;
     f28:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <myTransfer+0x20c>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:170
				payIndex   = 0;
     f2c:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <myTransfer+0x20d>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:171
				state      = find_payload;
     f30:	84 e0       	ldi	r24, 0x04	; 4
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	e9 cf       	rjmp	.-46     	; 0xf08 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x130>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:175
			}
			else
			{
				bytesRead = 0;
     f36:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myTransfer+0x202>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:176
				state     = find_start_byte;
     f3a:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <myTransfer+0x205>
     f3e:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <myTransfer+0x204>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:177
				status    = PAYLOAD_ERROR;
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <myTransfer+0x203>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:179

				if (debug)
     f48:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <myTransfer+0x20b>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:180
					debugPort->println("ERROR: PAYLOAD_ERROR");
     f4c:	62 e4       	ldi	r22, 0x42	; 66
     f4e:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:179
			{
				bytesRead = 0;
				state     = find_start_byte;
				status    = PAYLOAD_ERROR;

				if (debug)
     f50:	81 11       	cpse	r24, r1
     f52:	46 c0       	rjmp	.+140    	; 0xfe0 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x208>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:253
			status    = STOP_BYTE_ERROR;

			if (debug)
				debugPort->println("ERROR: STOP_BYTE_ERROR");

			reset();
     f54:	0e 94 41 06 	call	0xc82	; 0xc82 <Packet::reset() [clone .constprop.21]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:254
			return bytesRead;
     f58:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <myTransfer+0x202>
     f5c:	88 c0       	rjmp	.+272    	; 0x106e <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x296>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:190
			break;
		}

		case find_payload: ////////////////////////////////////////////
		{
			if (payIndex < bytesToRec)
     f5e:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <myTransfer+0x20d>
     f62:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <myTransfer+0x20c>
     f66:	89 17       	cp	r24, r25
     f68:	20 f6       	brcc	.-120    	; 0xef2 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x11a>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:192
			{
				rxBuff[payIndex] = recChar;
     f6a:	2c 91       	ld	r18, X
     f6c:	e8 2f       	mov	r30, r24
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	e7 59       	subi	r30, 0x97	; 151
     f72:	fb 4f       	sbci	r31, 0xFB	; 251
     f74:	20 83       	st	Z, r18
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:193
				payIndex++;
     f76:	8f 5f       	subi	r24, 0xFF	; 255
     f78:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <myTransfer+0x20d>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:195

				if (payIndex == bytesToRec)
     f7c:	98 13       	cpse	r25, r24
     f7e:	b9 cf       	rjmp	.-142    	; 0xef2 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x11a>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:196
					state    = find_crc;
     f80:	85 e0       	ldi	r24, 0x05	; 5
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	c1 cf       	rjmp	.-126    	; 0xf08 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x130>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:203
			break;
		}

		case find_crc: ///////////////////////////////////////////
		{
			uint8_t calcCrc = crc.calculate(rxBuff, bytesToRec);
     f86:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <myTransfer+0x20c>
_ZN9PacketCRC9calculateEPhh.isra.0():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:63
     f8a:	60 91 53 03 	lds	r22, 0x0353	; 0x800353 <crc+0x4>
     f8e:	70 91 54 03 	lds	r23, 0x0354	; 0x800354 <crc+0x5>
     f92:	c9 e6       	ldi	r28, 0x69	; 105
     f94:	d4 e0       	ldi	r29, 0x04	; 4
_ZN6Packet5parseERKhRKb.constprop.8():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:62
	}

	uint8_t calculate(uint8_t arr[], uint8_t len)
	{
		uint8_t crc = 0;
		for (uint16_t i = 0; i < len; i++)
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:61
		return 0;
	}

	uint8_t calculate(uint8_t arr[], uint8_t len)
	{
		uint8_t crc = 0;
     f9a:	80 e0       	ldi	r24, 0x00	; 0
_ZN9PacketCRC9calculateEPhh.isra.0():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:62
		for (uint16_t i = 0; i < len; i++)
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	24 17       	cp	r18, r20
     fa0:	35 07       	cpc	r19, r21
     fa2:	48 f4       	brcc	.+18     	; 0xfb6 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x1de>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:63
			crc = csTable[crc ^ arr[i]];
     fa4:	e9 91       	ld	r30, Y+
     fa6:	e8 27       	eor	r30, r24
     fa8:	e6 0f       	add	r30, r22
     faa:	f7 2f       	mov	r31, r23
     fac:	f1 1d       	adc	r31, r1
     fae:	80 81       	ld	r24, Z
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/PacketCRC.h:62
	}

	uint8_t calculate(uint8_t arr[], uint8_t len)
	{
		uint8_t crc = 0;
		for (uint16_t i = 0; i < len; i++)
     fb0:	2f 5f       	subi	r18, 0xFF	; 255
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	f4 cf       	rjmp	.-24     	; 0xf9e <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x1c6>
_ZN6Packet5parseERKhRKb.constprop.8():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:205

			if (calcCrc == recChar)
     fb6:	9c 91       	ld	r25, X
     fb8:	98 13       	cpse	r25, r24
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x1ea>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:206
				state = find_end_byte;
     fbc:	86 e0       	ldi	r24, 0x06	; 6
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a3 cf       	rjmp	.-186    	; 0xf08 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x130>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:209
			else
			{
				bytesRead = 0;
     fc2:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myTransfer+0x202>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:210
				state     = find_start_byte;
     fc6:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <myTransfer+0x205>
     fca:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <myTransfer+0x204>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:211
				status    = CRC_ERROR;
     fce:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <myTransfer+0x203>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:213

				if (debug)
     fd2:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <myTransfer+0x20b>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:214
					debugPort->println("ERROR: CRC_ERROR");
     fd6:	67 e5       	ldi	r22, 0x57	; 87
     fd8:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:213
			{
				bytesRead = 0;
				state     = find_start_byte;
				status    = CRC_ERROR;

				if (debug)
     fda:	88 23       	and	r24, r24
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x208>
     fde:	ba cf       	rjmp	.-140    	; 0xf54 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x17c>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:251

			bytesRead = 0;
			status    = STOP_BYTE_ERROR;

			if (debug)
				debugPort->println("ERROR: STOP_BYTE_ERROR");
     fe0:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <myTransfer+0x209>
     fe4:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <myTransfer+0x20a>
     fe8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Print::println(char const*)>
     fec:	b3 cf       	rjmp	.-154    	; 0xf54 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x17c>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:225
			break;
		}

		case find_end_byte: ///////////////////////////////////////////
		{
			state = find_start_byte;
     fee:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <myTransfer+0x205>
     ff2:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <myTransfer+0x204>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:227

			if (recChar == STOP_BYTE)
     ff6:	8c 91       	ld	r24, X
     ff8:	81 38       	cpi	r24, 0x81	; 129
     ffa:	09 f0       	breq	.+2      	; 0xffe <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x226>
     ffc:	6b c0       	rjmp	.+214    	; 0x10d4 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x2fc>
unpackPacket():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:408
 -------
  * void
*/
void Packet::unpackPacket(uint8_t arr[])
{
	uint8_t testIndex = recOverheadByte;
     ffe:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <myTransfer+0x210>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:411
	uint8_t delta     = 0;

	if (testIndex <= MAX_PACKET_SIZE)
    1002:	8f 3f       	cpi	r24, 0xFF	; 255
    1004:	69 f0       	breq	.+26     	; 0x1020 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x248>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:416
	{
		while (arr[testIndex])
		{
			delta          = arr[testIndex];
			arr[testIndex] = START_BYTE;
    1006:	2e e7       	ldi	r18, 0x7E	; 126
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:413
	uint8_t testIndex = recOverheadByte;
	uint8_t delta     = 0;

	if (testIndex <= MAX_PACKET_SIZE)
	{
		while (arr[testIndex])
    1008:	e8 2f       	mov	r30, r24
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	e7 59       	subi	r30, 0x97	; 151
    100e:	fb 4f       	sbci	r31, 0xFB	; 251
    1010:	90 81       	ld	r25, Z
    1012:	99 23       	and	r25, r25
    1014:	19 f0       	breq	.+6      	; 0x101c <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x244>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:416
		{
			delta          = arr[testIndex];
			arr[testIndex] = START_BYTE;
    1016:	20 83       	st	Z, r18
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:417
			testIndex += delta;
    1018:	89 0f       	add	r24, r25
    101a:	f6 cf       	rjmp	.-20     	; 0x1008 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x230>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:419
		}
		arr[testIndex] = START_BYTE;
    101c:	8e e7       	ldi	r24, 0x7E	; 126
    101e:	80 83       	st	Z, r24
_ZN6Packet5parseERKhRKb.constprop.8():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:230
			state = find_start_byte;

			if (recChar == STOP_BYTE)
			{
				unpackPacket(rxBuff);
				bytesRead = bytesToRec;
    1020:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <myTransfer+0x20c>
    1024:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <myTransfer+0x202>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:231
				status    = NEW_DATA;
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <myTransfer+0x203>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:233

				if (callbacks)
    102e:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <myTransfer+0x206>
    1032:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <myTransfer+0x207>
    1036:	21 15       	cp	r18, r1
    1038:	31 05       	cpc	r19, r1
    103a:	79 f0       	breq	.+30     	; 0x105a <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x282>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:235
				{
					if (idByte < callbacksLen)
    103c:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <myTransfer+0x20e>
    1040:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <myTransfer+0x208>
    1044:	89 17       	cp	r24, r25
    1046:	d0 f4       	brcc	.+52     	; 0x107c <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x2a4>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:236
						callbacks[idByte]();
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	dc 01       	movw	r26, r24
    1054:	ed 91       	ld	r30, X+
    1056:	fc 91       	ld	r31, X
    1058:	09 95       	icall
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:243
					{
						debugPort->print(F("ERROR: No callback available for packet ID "));
						debugPort->println(idByte);
					}
				}
				packetStart = 0;	// reset the timer
    105a:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <myTransfer+0x211>
    105e:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <myTransfer+0x212>
    1062:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <myTransfer+0x213>
    1066:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <myTransfer+0x214>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:244
				return bytesToRec;
    106a:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <myTransfer+0x20c>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:283
	}

	bytesRead = 0;
	status    = CONTINUE;
	return bytesRead;
}
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	cf 90       	pop	r12
    107a:	08 95       	ret
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:237

				if (callbacks)
				{
					if (idByte < callbacksLen)
						callbacks[idByte]();
					else if (debug)
    107c:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <myTransfer+0x20b>
    1080:	88 23       	and	r24, r24
    1082:	59 f3       	breq	.-42     	; 0x105a <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x282>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:239
					{
						debugPort->print(F("ERROR: No callback available for packet ID "));
    1084:	e0 90 74 05 	lds	r14, 0x0574	; 0x800574 <myTransfer+0x209>
    1088:	f0 90 75 05 	lds	r15, 0x0575	; 0x800575 <myTransfer+0x20a>
    108c:	c8 e6       	ldi	r28, 0x68	; 104
    108e:	d0 e0       	ldi	r29, 0x00	; 0
print():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:49
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    1090:	fe 01       	movw	r30, r28
    1092:	64 91       	lpm	r22, Z
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
    1094:	66 23       	and	r22, r22
    1096:	59 f0       	breq	.+22     	; 0x10ae <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x2d6>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
    1098:	d7 01       	movw	r26, r14
    109a:	ed 91       	ld	r30, X+
    109c:	fc 91       	ld	r31, X
    109e:	01 90       	ld	r0, Z+
    10a0:	f0 81       	ld	r31, Z
    10a2:	e0 2d       	mov	r30, r0
    10a4:	c7 01       	movw	r24, r14
    10a6:	09 95       	icall
    10a8:	21 96       	adiw	r28, 0x01	; 1
    10aa:	89 2b       	or	r24, r25
    10ac:	89 f7       	brne	.-30     	; 0x1090 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x2b8>
_ZN6Packet5parseERKhRKb.constprop.8():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:240
						debugPort->println(idByte);
    10ae:	c0 91 74 05 	lds	r28, 0x0574	; 0x800574 <myTransfer+0x209>
    10b2:	d0 91 75 05 	lds	r29, 0x0575	; 0x800575 <myTransfer+0x20a>
print():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    10b6:	40 91 79 05 	lds	r20, 0x0579	; 0x800579 <myTransfer+0x20e>
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    10c0:	2a e0       	ldi	r18, 0x0A	; 10
    10c2:	ce 01       	movw	r24, r28
    10c4:	0e 94 8c 06 	call	0xd18	; 0xd18 <Print::printNumber(unsigned long, unsigned char)>
write():
    10c8:	6b e2       	ldi	r22, 0x2B	; 43
    10ca:	71 e0       	ldi	r23, 0x01	; 1
    10cc:	ce 01       	movw	r24, r28
    10ce:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Print::write(char const*) [clone .part.2]>
    10d2:	c3 cf       	rjmp	.-122    	; 0x105a <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x282>
_ZN6Packet5parseERKhRKb.constprop.8():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:247
				}
				packetStart = 0;	// reset the timer
				return bytesToRec;
			}

			bytesRead = 0;
    10d4:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myTransfer+0x202>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:248
			status    = STOP_BYTE_ERROR;
    10d8:	8e ef       	ldi	r24, 0xFE	; 254
    10da:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <myTransfer+0x203>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:250

			if (debug)
    10de:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <myTransfer+0x20b>
    10e2:	88 23       	and	r24, r24
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x310>
    10e6:	36 cf       	rjmp	.-404    	; 0xf54 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x17c>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:251
				debugPort->println("ERROR: STOP_BYTE_ERROR");
    10e8:	68 e6       	ldi	r22, 0x68	; 104
    10ea:	71 e0       	ldi	r23, 0x01	; 1
    10ec:	79 cf       	rjmp	.-270    	; 0xfe0 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x208>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:260
			break;
		}

		default:
		{
			if (debug)
    10ee:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <myTransfer+0x20b>
    10f2:	88 23       	and	r24, r24
    10f4:	89 f1       	breq	.+98     	; 0x1158 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x380>
write():
    10f6:	6f e7       	ldi	r22, 0x7F	; 127
    10f8:	71 e0       	ldi	r23, 0x01	; 1
    10fa:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <myTransfer+0x209>
    10fe:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <myTransfer+0x20a>
    1102:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Print::write(char const*) [clone .part.2]>
_ZN6Packet5parseERKhRKb.constprop.8():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:263
			{
				debugPort->print("ERROR: Undefined state ");
				debugPort->println(state);
    1106:	c0 91 74 05 	lds	r28, 0x0574	; 0x800574 <myTransfer+0x209>
    110a:	d0 91 75 05 	lds	r29, 0x0575	; 0x800575 <myTransfer+0x20a>
    110e:	c0 90 6f 05 	lds	r12, 0x056F	; 0x80056f <myTransfer+0x204>
    1112:	d0 90 70 05 	lds	r13, 0x0570	; 0x800570 <myTransfer+0x205>
print():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1116:	0d 2c       	mov	r0, r13
    1118:	00 0c       	add	r0, r0
    111a:	ee 08       	sbc	r14, r14
    111c:	ff 08       	sbc	r15, r15
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    111e:	2a e0       	ldi	r18, 0x0A	; 10
    1120:	b7 01       	movw	r22, r14
    1122:	a6 01       	movw	r20, r12
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    1124:	f7 fe       	sbrs	r15, 7
    1126:	10 c0       	rjmp	.+32     	; 0x1148 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x370>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1128:	e8 81       	ld	r30, Y
    112a:	f9 81       	ldd	r31, Y+1	; 0x01
    112c:	01 90       	ld	r0, Z+
    112e:	f0 81       	ld	r31, Z
    1130:	e0 2d       	mov	r30, r0
    1132:	6d e2       	ldi	r22, 0x2D	; 45
    1134:	ce 01       	movw	r24, r28
    1136:	09 95       	icall
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
    1138:	44 27       	eor	r20, r20
    113a:	55 27       	eor	r21, r21
    113c:	ba 01       	movw	r22, r20
    113e:	4c 19       	sub	r20, r12
    1140:	5d 09       	sbc	r21, r13
    1142:	6e 09       	sbc	r22, r14
    1144:	7f 09       	sbc	r23, r15
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    1146:	2a e0       	ldi	r18, 0x0A	; 10
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:97
    }
    return printNumber(n, 10);
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 8c 06 	call	0xd18	; 0xd18 <Print::printNumber(unsigned long, unsigned char)>
write():
    114e:	6b e2       	ldi	r22, 0x2B	; 43
    1150:	71 e0       	ldi	r23, 0x01	; 1
    1152:	ce 01       	movw	r24, r28
    1154:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Print::write(char const*) [clone .part.2]>
_ZN6Packet5parseERKhRKb.constprop.8():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:266
			}

			reset();
    1158:	0e 94 41 06 	call	0xc82	; 0xc82 <Packet::reset() [clone .constprop.21]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:268
			bytesRead = 0;
			state     = find_start_byte;
    115c:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <myTransfer+0x205>
    1160:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <myTransfer+0x204>
    1164:	c6 ce       	rjmp	.-628    	; 0xef2 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]+0x11a>

00001166 <__vector_19>:
__vector_19():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1188:	86 ea       	ldi	r24, 0xA6	; 166
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	0e 94 12 03 	call	0x624	; 0x624 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <__vector_18>:
__vector_18():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	2f 93       	push	r18
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    11c6:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <Serial+0x10>
    11ca:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <Serial+0x11>
    11ce:	80 81       	ld	r24, Z
    11d0:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <Serial+0x16>
    11d4:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <Serial+0x17>
    11d8:	82 fd       	sbrc	r24, 2
    11da:	1b c0       	rjmp	.+54     	; 0x1212 <__vector_18+0x60>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    11dc:	90 81       	ld	r25, Z
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    11de:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <Serial+0x19>
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    11e6:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <Serial+0x1a>
    11ea:	82 17       	cp	r24, r18
    11ec:	41 f0       	breq	.+16     	; 0x11fe <__vector_18+0x4c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    11ee:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <Serial+0x19>
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	ea 55       	subi	r30, 0x5A	; 90
    11f6:	fd 4f       	sbci	r31, 0xFD	; 253
    11f8:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    11fa:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <Serial+0x19>
__vector_18():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    11fe:	ff 91       	pop	r31
    1200:	ef 91       	pop	r30
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti
_rx_complete_irq():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1212:	80 81       	ld	r24, Z
    1214:	f4 cf       	rjmp	.-24     	; 0x11fe <__vector_18+0x4c>

00001216 <__vector_16>:
__vector_16():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	0f 92       	push	r0
    121e:	11 24       	eor	r1, r1
    1220:	2f 93       	push	r18
    1222:	3f 93       	push	r19
    1224:	8f 93       	push	r24
    1226:	9f 93       	push	r25
    1228:	af 93       	push	r26
    122a:	bf 93       	push	r27
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    122c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <timer0_millis>
    1230:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <timer0_millis+0x1>
    1234:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <timer0_millis+0x2>
    1238:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <timer0_millis+0x3>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    123c:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <timer0_fract>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1240:	26 e0       	ldi	r18, 0x06	; 6
    1242:	23 0f       	add	r18, r19
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1244:	2d 37       	cpi	r18, 0x7D	; 125
    1246:	68 f1       	brcs	.+90     	; 0x12a2 <__vector_16+0x8c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1248:	29 e8       	ldi	r18, 0x89	; 137
    124a:	23 0f       	add	r18, r19
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    124c:	03 96       	adiw	r24, 0x03	; 3
    124e:	a1 1d       	adc	r26, r1
    1250:	b1 1d       	adc	r27, r1
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1252:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <timer0_fract>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1256:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <timer0_millis>
    125a:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <timer0_millis+0x1>
    125e:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <timer0_millis+0x2>
    1262:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <timer0_millis+0x3>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1266:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <timer0_overflow_count>
    126a:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <timer0_overflow_count+0x1>
    126e:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <timer0_overflow_count+0x2>
    1272:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <timer0_overflow_count+0x3>
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	a1 1d       	adc	r26, r1
    127a:	b1 1d       	adc	r27, r1
    127c:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <timer0_overflow_count>
    1280:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <timer0_overflow_count+0x1>
    1284:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <timer0_overflow_count+0x2>
    1288:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <timer0_overflow_count+0x3>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    12a2:	02 96       	adiw	r24, 0x02	; 2
    12a4:	a1 1d       	adc	r26, r1
    12a6:	b1 1d       	adc	r27, r1
    12a8:	d4 cf       	rjmp	.-88     	; 0x1252 <__vector_16+0x3c>

000012aa <__vector_24>:
__vector_24():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	2f 93       	push	r18
    12b6:	3f 93       	push	r19
    12b8:	4f 93       	push	r20
    12ba:	5f 93       	push	r21
    12bc:	6f 93       	push	r22
    12be:	7f 93       	push	r23
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	af 93       	push	r26
    12c6:	bf 93       	push	r27
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    12cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    12d0:	88 7f       	andi	r24, 0xF8	; 248
    12d2:	80 36       	cpi	r24, 0x60	; 96
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <__vector_24+0x2e>
    12d6:	4a c0       	rjmp	.+148    	; 0x136c <__vector_24+0xc2>
    12d8:	f0 f5       	brcc	.+124    	; 0x1356 <__vector_24+0xac>
    12da:	88 32       	cpi	r24, 0x28	; 40
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <__vector_24+0x36>
    12de:	a7 c0       	rjmp	.+334    	; 0x142e <__vector_24+0x184>
    12e0:	18 f5       	brcc	.+70     	; 0x1328 <__vector_24+0x7e>
    12e2:	80 31       	cpi	r24, 0x10	; 16
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <__vector_24+0x3e>
    12e6:	9b c0       	rjmp	.+310    	; 0x141e <__vector_24+0x174>
    12e8:	b8 f4       	brcc	.+46     	; 0x1318 <__vector_24+0x6e>
    12ea:	88 23       	and	r24, r24
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <__vector_24+0x46>
    12ee:	f9 c0       	rjmp	.+498    	; 0x14e2 <__vector_24+0x238>
    12f0:	88 30       	cpi	r24, 0x08	; 8
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <__vector_24+0x4c>
    12f4:	94 c0       	rjmp	.+296    	; 0x141e <__vector_24+0x174>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1318:	88 31       	cpi	r24, 0x18	; 24
    131a:	09 f4       	brne	.+2      	; 0x131e <__vector_24+0x74>
    131c:	88 c0       	rjmp	.+272    	; 0x142e <__vector_24+0x184>
    131e:	80 32       	cpi	r24, 0x20	; 32
    1320:	51 f7       	brne	.-44     	; 0x12f6 <__vector_24+0x4c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1322:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <twi_error>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <__vector_24+0xa6>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1328:	80 34       	cpi	r24, 0x40	; 64
    132a:	09 f4       	brne	.+2      	; 0x132e <__vector_24+0x84>
    132c:	9d c0       	rjmp	.+314    	; 0x1468 <__vector_24+0x1be>
    132e:	40 f4       	brcc	.+16     	; 0x1340 <__vector_24+0x96>
    1330:	80 33       	cpi	r24, 0x30	; 48
    1332:	b9 f3       	breq	.-18     	; 0x1322 <__vector_24+0x78>
    1334:	88 33       	cpi	r24, 0x38	; 56
    1336:	f9 f6       	brne	.-66     	; 0x12f6 <__vector_24+0x4c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1338:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <twi_error>
twi_reply():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    133c:	85 ec       	ldi	r24, 0xC5	; 197
    133e:	b0 c0       	rjmp	.+352    	; 0x14a0 <__vector_24+0x1f6>
__vector_24():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1340:	80 35       	cpi	r24, 0x50	; 80
    1342:	09 f4       	brne	.+2      	; 0x1346 <__vector_24+0x9c>
    1344:	85 c0       	rjmp	.+266    	; 0x1450 <__vector_24+0x1a6>
    1346:	88 35       	cpi	r24, 0x58	; 88
    1348:	09 f4       	brne	.+2      	; 0x134c <__vector_24+0xa2>
    134a:	96 c0       	rjmp	.+300    	; 0x1478 <__vector_24+0x1ce>
    134c:	88 34       	cpi	r24, 0x48	; 72
    134e:	99 f6       	brne	.-90     	; 0x12f6 <__vector_24+0x4c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1350:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <twi_stop>
    1354:	d0 cf       	rjmp	.-96     	; 0x12f6 <__vector_24+0x4c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1356:	88 39       	cpi	r24, 0x98	; 152
    1358:	09 f4       	brne	.+2      	; 0x135c <__vector_24+0xb2>
    135a:	8c c0       	rjmp	.+280    	; 0x1474 <__vector_24+0x1ca>
    135c:	38 f5       	brcc	.+78     	; 0x13ac <__vector_24+0x102>
    135e:	88 37       	cpi	r24, 0x78	; 120
    1360:	29 f0       	breq	.+10     	; 0x136c <__vector_24+0xc2>
    1362:	50 f4       	brcc	.+20     	; 0x1378 <__vector_24+0xce>
    1364:	88 36       	cpi	r24, 0x68	; 104
    1366:	11 f0       	breq	.+4      	; 0x136c <__vector_24+0xc2>
    1368:	80 37       	cpi	r24, 0x70	; 112
    136a:	29 f6       	brne	.-118    	; 0x12f6 <__vector_24+0x4c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <twi_state>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1372:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <twi_rxBufferIndex>
    1376:	57 c0       	rjmp	.+174    	; 0x1426 <__vector_24+0x17c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1378:	88 38       	cpi	r24, 0x88	; 136
    137a:	09 f4       	brne	.+2      	; 0x137e <__vector_24+0xd4>
    137c:	7b c0       	rjmp	.+246    	; 0x1474 <__vector_24+0x1ca>
    137e:	80 39       	cpi	r24, 0x90	; 144
    1380:	19 f0       	breq	.+6      	; 0x1388 <__vector_24+0xde>
    1382:	80 38       	cpi	r24, 0x80	; 128
    1384:	09 f0       	breq	.+2      	; 0x1388 <__vector_24+0xde>
    1386:	b7 cf       	rjmp	.-146    	; 0x12f6 <__vector_24+0x4c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1388:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <twi_rxBufferIndex>
    138c:	80 32       	cpi	r24, 0x20	; 32
    138e:	08 f0       	brcs	.+2      	; 0x1392 <__vector_24+0xe8>
    1390:	71 c0       	rjmp	.+226    	; 0x1474 <__vector_24+0x1ca>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1392:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <twi_rxBufferIndex>
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	8e 0f       	add	r24, r30
    139a:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <twi_rxBufferIndex>
    139e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	e6 54       	subi	r30, 0x46	; 70
    13a6:	fe 4f       	sbci	r31, 0xFE	; 254
    13a8:	80 83       	st	Z, r24
    13aa:	3d c0       	rjmp	.+122    	; 0x1426 <__vector_24+0x17c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    13ac:	80 3b       	cpi	r24, 0xB0	; 176
    13ae:	39 f0       	breq	.+14     	; 0x13be <__vector_24+0x114>
    13b0:	e0 f4       	brcc	.+56     	; 0x13ea <__vector_24+0x140>
    13b2:	80 3a       	cpi	r24, 0xA0	; 160
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <__vector_24+0x10e>
    13b6:	79 c0       	rjmp	.+242    	; 0x14aa <__vector_24+0x200>
    13b8:	88 3a       	cpi	r24, 0xA8	; 168
    13ba:	09 f0       	breq	.+2      	; 0x13be <__vector_24+0x114>
    13bc:	9c cf       	rjmp	.-200    	; 0x12f6 <__vector_24+0x4c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    13be:	84 e0       	ldi	r24, 0x04	; 4
    13c0:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <twi_state>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    13c4:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <twi_txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    13c8:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <twi_txBufferLength>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    13cc:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <twi_onSlaveTransmit>
    13d0:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <twi_onSlaveTransmit+0x1>
    13d4:	09 95       	icall
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    13d6:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <twi_txBufferLength>
    13da:	81 11       	cpse	r24, r1
    13dc:	0f c0       	rjmp	.+30     	; 0x13fc <__vector_24+0x152>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <twi_txBufferLength>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    13e4:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <__data_end>
    13e8:	09 c0       	rjmp	.+18     	; 0x13fc <__vector_24+0x152>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    13ea:	80 3c       	cpi	r24, 0xC0	; 192
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <__vector_24+0x146>
    13ee:	a6 cf       	rjmp	.-180    	; 0x133c <__vector_24+0x92>
    13f0:	88 3c       	cpi	r24, 0xC8	; 200
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <__vector_24+0x14c>
    13f4:	a3 cf       	rjmp	.-186    	; 0x133c <__vector_24+0x92>
    13f6:	88 3b       	cpi	r24, 0xB8	; 184
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__vector_24+0x152>
    13fa:	7d cf       	rjmp	.-262    	; 0x12f6 <__vector_24+0x4c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    13fc:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <twi_txBufferIndex>
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	8e 0f       	add	r24, r30
    1404:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <twi_txBufferIndex>
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	e8 56       	subi	r30, 0x68	; 104
    140c:	fe 4f       	sbci	r31, 0xFE	; 254
    140e:	80 81       	ld	r24, Z
    1410:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1414:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <twi_txBufferIndex>
    1418:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <twi_txBufferLength>
    141c:	29 c0       	rjmp	.+82     	; 0x1470 <__vector_24+0x1c6>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    141e:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <twi_slarw>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1422:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1426:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1428:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    142c:	64 cf       	rjmp	.-312    	; 0x12f6 <__vector_24+0x4c>
__vector_24():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    142e:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <twi_masterBufferIndex>
    1432:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <twi_masterBufferLength>
    1436:	98 17       	cp	r25, r24
    1438:	58 f5       	brcc	.+86     	; 0x1490 <__vector_24+0x1e6>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    143a:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <twi_masterBufferIndex>
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	8e 0f       	add	r24, r30
    1442:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <twi_masterBufferIndex>
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	e1 58       	subi	r30, 0x81	; 129
    144a:	fd 4f       	sbci	r31, 0xFD	; 253
    144c:	80 81       	ld	r24, Z
    144e:	e9 cf       	rjmp	.-46     	; 0x1422 <__vector_24+0x178>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1450:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <twi_masterBufferIndex>
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	8e 0f       	add	r24, r30
    1458:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <twi_masterBufferIndex>
    145c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	e1 58       	subi	r30, 0x81	; 129
    1464:	fd 4f       	sbci	r31, 0xFD	; 253
    1466:	80 83       	st	Z, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1468:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <twi_masterBufferIndex>
    146c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <twi_masterBufferLength>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1470:	98 17       	cp	r25, r24
    1472:	c8 f2       	brcs	.-78     	; 0x1426 <__vector_24+0x17c>
twi_reply():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1474:	85 e8       	ldi	r24, 0x85	; 133
    1476:	d8 cf       	rjmp	.-80     	; 0x1428 <__vector_24+0x17e>
__vector_24():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1478:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <twi_masterBufferIndex>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	8e 0f       	add	r24, r30
    1480:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <twi_masterBufferIndex>
    1484:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	e1 58       	subi	r30, 0x81	; 129
    148c:	fd 4f       	sbci	r31, 0xFD	; 253
    148e:	80 83       	st	Z, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    1490:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <twi_sendStop>
    1494:	81 11       	cpse	r24, r1
    1496:	5c cf       	rjmp	.-328    	; 0x1350 <__vector_24+0xa6>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <twi_inRepStart>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    149e:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    14a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    14a4:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <twi_state>
    14a8:	26 cf       	rjmp	.-436    	; 0x12f6 <__vector_24+0x4c>
twi_releaseBus():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    14aa:	85 ec       	ldi	r24, 0xC5	; 197
    14ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    14b0:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <twi_state>
__vector_24():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    14b4:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <twi_rxBufferIndex>
    14b8:	80 32       	cpi	r24, 0x20	; 32
    14ba:	30 f4       	brcc	.+12     	; 0x14c8 <__vector_24+0x21e>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    14bc:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <twi_rxBufferIndex>
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	e6 54       	subi	r30, 0x46	; 70
    14c4:	fe 4f       	sbci	r31, 0xFE	; 254
    14c6:	10 82       	st	Z, r1
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    14c8:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <twi_rxBufferIndex>
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <twi_onSlaveReceive>
    14d2:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <twi_onSlaveReceive+0x1>
    14d6:	8a eb       	ldi	r24, 0xBA	; 186
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	09 95       	icall
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    14dc:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <twi_rxBufferIndex>
    14e0:	0a cf       	rjmp	.-492    	; 0x12f6 <__vector_24+0x4c>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    14e2:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <twi_error>
    14e6:	34 cf       	rjmp	.-408    	; 0x1350 <__vector_24+0xa6>

000014e8 <global constructors keyed to 65535_0_OpenOBS_sensor.ino.cpp.o.2507>:
_GLOBAL__I_65535_0_OpenOBS_sensor.ino.cpp.o.2507():
    14e8:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <Serial+0x3>
    14ec:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <Serial+0x2>
    14f0:	88 ee       	ldi	r24, 0xE8	; 232
    14f2:	93 e0       	ldi	r25, 0x03	; 3
    14f4:	a0 e0       	ldi	r26, 0x00	; 0
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <Serial+0x4>
    14fc:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <Serial+0x5>
    1500:	a0 93 ac 02 	sts	0x02AC, r26	; 0x8002ac <Serial+0x6>
    1504:	b0 93 ad 02 	sts	0x02AD, r27	; 0x8002ad <Serial+0x7>
    1508:	2b e0       	ldi	r18, 0x0B	; 11
    150a:	31 e0       	ldi	r19, 0x01	; 1
    150c:	30 93 a7 02 	sts	0x02A7, r19	; 0x8002a7 <Serial+0x1>
    1510:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <Serial>
    1514:	25 ec       	ldi	r18, 0xC5	; 197
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	30 93 b3 02 	sts	0x02B3, r19	; 0x8002b3 <Serial+0xd>
    151c:	20 93 b2 02 	sts	0x02B2, r18	; 0x8002b2 <Serial+0xc>
    1520:	24 ec       	ldi	r18, 0xC4	; 196
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	30 93 b5 02 	sts	0x02B5, r19	; 0x8002b5 <Serial+0xf>
    1528:	20 93 b4 02 	sts	0x02B4, r18	; 0x8002b4 <Serial+0xe>
    152c:	20 ec       	ldi	r18, 0xC0	; 192
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	30 93 b7 02 	sts	0x02B7, r19	; 0x8002b7 <Serial+0x11>
    1534:	20 93 b6 02 	sts	0x02B6, r18	; 0x8002b6 <Serial+0x10>
    1538:	21 ec       	ldi	r18, 0xC1	; 193
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	30 93 b9 02 	sts	0x02B9, r19	; 0x8002b9 <Serial+0x13>
    1540:	20 93 b8 02 	sts	0x02B8, r18	; 0x8002b8 <Serial+0x12>
    1544:	22 ec       	ldi	r18, 0xC2	; 194
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	30 93 bb 02 	sts	0x02BB, r19	; 0x8002bb <Serial+0x15>
    154c:	20 93 ba 02 	sts	0x02BA, r18	; 0x8002ba <Serial+0x14>
    1550:	26 ec       	ldi	r18, 0xC6	; 198
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	30 93 bd 02 	sts	0x02BD, r19	; 0x8002bd <Serial+0x17>
    1558:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <Serial+0x16>
    155c:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <Serial+0x19>
    1560:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <Serial+0x1a>
    1564:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <Serial+0x1b>
    1568:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <Serial+0x1c>
    156c:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <Wire+0x3>
    1570:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <Wire+0x2>
    1574:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <Wire+0x4>
    1578:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <Wire+0x5>
    157c:	a0 93 49 03 	sts	0x0349, r26	; 0x800349 <Wire+0x6>
    1580:	b0 93 4a 03 	sts	0x034A, r27	; 0x80034a <Wire+0x7>
    1584:	8d e1       	ldi	r24, 0x1D	; 29
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <Wire+0x1>
    158c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <Wire>
    1590:	8b e9       	ldi	r24, 0x9B	; 155
    1592:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <crc>
    1596:	88 e0       	ldi	r24, 0x08	; 8
    1598:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <crc+0x3>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <crc+0x2>
    15a4:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <crc+0x1>
    15a8:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <malloc>
    15ac:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <crc+0x5>
    15b0:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <crc+0x4>
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <crc+0x1>
    15bc:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <crc+0x2>
    15c0:	28 17       	cp	r18, r24
    15c2:	39 07       	cpc	r19, r25
    15c4:	e0 f4       	brcc	.+56     	; 0x15fe <global constructors keyed to 65535_0_OpenOBS_sensor.ino.cpp.o.2507+0x116>
    15c6:	c9 01       	movw	r24, r18
    15c8:	60 91 4f 03 	lds	r22, 0x034F	; 0x80034f <crc>
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	48 e0       	ldi	r20, 0x08	; 8
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	fc 01       	movw	r30, r24
    15d4:	e0 78       	andi	r30, 0x80	; 128
    15d6:	ff 27       	eor	r31, r31
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	ef 2b       	or	r30, r31
    15de:	11 f0       	breq	.+4      	; 0x15e4 <global constructors keyed to 65535_0_OpenOBS_sensor.ino.cpp.o.2507+0xfc>
    15e0:	86 27       	eor	r24, r22
    15e2:	97 27       	eor	r25, r23
    15e4:	41 50       	subi	r20, 0x01	; 1
    15e6:	51 09       	sbc	r21, r1
    15e8:	a1 f7       	brne	.-24     	; 0x15d2 <global constructors keyed to 65535_0_OpenOBS_sensor.ino.cpp.o.2507+0xea>
    15ea:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <crc+0x4>
    15ee:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <crc+0x5>
    15f2:	e2 0f       	add	r30, r18
    15f4:	f3 1f       	adc	r31, r19
    15f6:	80 83       	st	Z, r24
    15f8:	2f 5f       	subi	r18, 0xFF	; 255
    15fa:	3f 4f       	sbci	r19, 0xFF	; 255
    15fc:	dd cf       	rjmp	.-70     	; 0x15b8 <global constructors keyed to 65535_0_OpenOBS_sensor.ino.cpp.o.2507+0xd0>
    15fe:	8e e7       	ldi	r24, 0x7E	; 126
    1600:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <myTransfer+0x1fc>
    1604:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <myTransfer+0x1fd>
    1608:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <myTransfer+0x1fe>
    160c:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <myTransfer+0x1ff>
    1610:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <myTransfer+0x200>
    1614:	81 e8       	ldi	r24, 0x81	; 129
    1616:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <myTransfer+0x201>
    161a:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <myTransfer+0x202>
    161e:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <myTransfer+0x203>
    1622:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <myTransfer+0x205>
    1626:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <myTransfer+0x204>
    162a:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <myTransfer+0x207>
    162e:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <myTransfer+0x206>
    1632:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <myTransfer+0x208>
    1636:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <myTransfer+0x20b>
    163a:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <myTransfer+0x20c>
    163e:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <myTransfer+0x20d>
    1642:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <myTransfer+0x20e>
    1646:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <myTransfer+0x20f>
    164a:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <myTransfer+0x210>
    164e:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <myTransfer+0x211>
    1652:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <myTransfer+0x212>
    1656:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <myTransfer+0x213>
    165a:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <myTransfer+0x214>
    165e:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <myTransfer+0x219>
    1662:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <myTransfer+0x21a>
    1666:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <vcnl+0x1>
    166a:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <vcnl>
    166e:	85 e0       	ldi	r24, 0x05	; 5
    1670:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <pressure_sensor+0x13>
    1674:	86 e7       	ldi	r24, 0x76	; 118
    1676:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <pressure_sensor+0x12>
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e1       	ldi	r25, 0x10	; 16
    167e:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <pressure_sensor+0x11>
    1682:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <pressure_sensor+0x10>
    1686:	08 95       	ret

00001688 <main>:
main():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	67 97       	sbiw	r28, 0x17	; 23
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    169c:	78 94       	sei
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    169e:	84 b5       	in	r24, 0x24	; 36
    16a0:	83 60       	ori	r24, 0x03	; 3
    16a2:	84 bd       	out	0x24, r24	; 36
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    16a4:	85 b5       	in	r24, 0x25	; 37
    16a6:	83 60       	ori	r24, 0x03	; 3
    16a8:	85 bd       	out	0x25, r24	; 37
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    16aa:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    16ae:	81 60       	ori	r24, 0x01	; 1
    16b0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    16ba:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    16be:	81 60       	ori	r24, 0x01	; 1
    16c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    16c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    16c8:	81 60       	ori	r24, 0x01	; 1
    16ca:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    16ce:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    16d2:	84 60       	ori	r24, 0x04	; 4
    16d4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    16d8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    16dc:	81 60       	ori	r24, 0x01	; 1
    16de:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    16e2:	86 e8       	ldi	r24, 0x86	; 134
    16e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    16e8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
begin():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    16ec:	26 ea       	ldi	r18, 0xA6	; 166
    16ee:	32 e0       	ldi	r19, 0x02	; 2
    16f0:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <Serial+0x10>
    16f4:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <Serial+0x11>
    16f8:	90 83       	st	Z, r25
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    16fa:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <Serial+0xc>
    16fe:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <Serial+0xd>
    1702:	10 82       	st	Z, r1
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    1704:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <Serial+0xe>
    1708:	f0 91 b5 02 	lds	r31, 0x02B5	; 0x8002b5 <Serial+0xf>
    170c:	87 e6       	ldi	r24, 0x67	; 103
    170e:	80 83       	st	Z, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    1710:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <Serial+0x18>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1714:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <Serial+0x14>
    1718:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <Serial+0x15>
    171c:	86 e0       	ldi	r24, 0x06	; 6
    171e:	80 83       	st	Z, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1720:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <Serial+0x12>
    1724:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <Serial+0x13>
    1728:	80 81       	ld	r24, Z
    172a:	88 69       	ori	r24, 0x98	; 152
    172c:	80 83       	st	Z, r24
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    172e:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <Serial+0x12>
    1732:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <Serial+0x13>
    1736:	80 81       	ld	r24, Z
    1738:	8f 7d       	andi	r24, 0xDF	; 223
    173a:	80 83       	st	Z, r24
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:41
 -------
  * void
*/
void SerialTransfer::begin(Stream& _port, const bool _debug, Stream& _debugPort, uint32_t _timeout)
{
	port    = &_port;
    173c:	30 93 87 05 	sts	0x0587, r19	; 0x800587 <myTransfer+0x21c>
    1740:	20 93 86 05 	sts	0x0586, r18	; 0x800586 <myTransfer+0x21b>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:42
	timeout = _timeout;
    1744:	82 e3       	ldi	r24, 0x32	; 50
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a0 e0       	ldi	r26, 0x00	; 0
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <myTransfer+0x21d>
    1750:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <myTransfer+0x21e>
    1754:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <myTransfer+0x21f>
    1758:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <myTransfer+0x220>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:47
 -------
  * void
*/
void Packet::begin(const bool& _debug, Stream& _debugPort, const uint32_t& _timeout)
{
	debugPort = &_debugPort;
    175c:	30 93 75 05 	sts	0x0575, r19	; 0x800575 <myTransfer+0x20a>
    1760:	20 93 74 05 	sts	0x0574, r18	; 0x800574 <myTransfer+0x209>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:48
	debug     = _debug;
    1764:	21 e0       	ldi	r18, 0x01	; 1
    1766:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <myTransfer+0x20b>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.cpp:49
	timeout   = _timeout;
    176a:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <myTransfer+0x215>
    176e:	90 93 81 05 	sts	0x0581, r25	; 0x800581 <myTransfer+0x216>
    1772:	a0 93 82 05 	sts	0x0582, r26	; 0x800582 <myTransfer+0x217>
    1776:	b0 93 83 05 	sts	0x0583, r27	; 0x800583 <myTransfer+0x218>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:46
   interface
    @return true if sensor was found, false if not
*/
/**************************************************************************/
boolean Adafruit_VCNL4010::begin(uint8_t addr, TwoWire *theWire) {
  if (i2c_dev)
    177a:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <vcnl>
    177e:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <vcnl+0x1>
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	11 f0       	breq	.+4      	; 0x178a <main+0x102>
operator delete():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    1786:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <free>
operator new():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    178a:	86 e0       	ldi	r24, 0x06	; 6
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <malloc>
    1792:	8c 01       	movw	r16, r24
__base_ctor ():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:12
 *    @brief  Create an I2C device at a given address
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
    1794:	83 e1       	ldi	r24, 0x13	; 19
    1796:	d8 01       	movw	r26, r16
    1798:	8c 93       	st	X, r24
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:13
  _wire = theWire;
    179a:	83 e4       	ldi	r24, 0x43	; 67
    179c:	93 e0       	ldi	r25, 0x03	; 3
    179e:	12 96       	adiw	r26, 0x02	; 2
    17a0:	9c 93       	st	X, r25
    17a2:	8e 93       	st	-X, r24
    17a4:	11 97       	sbiw	r26, 0x01	; 1
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:14
  _begun = false;
    17a6:	13 96       	adiw	r26, 0x03	; 3
    17a8:	1c 92       	st	X, r1
    17aa:	13 97       	sbiw	r26, 0x03	; 3
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:18
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
    17ac:	80 e2       	ldi	r24, 0x20	; 32
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	15 96       	adiw	r26, 0x05	; 5
    17b2:	9c 93       	st	X, r25
    17b4:	8e 93       	st	-X, r24
    17b6:	14 97       	sbiw	r26, 0x04	; 4
begin():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:48
    delete i2c_dev;
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
    17b8:	10 93 6a 03 	sts	0x036A, r17	; 0x80036a <vcnl+0x1>
    17bc:	00 93 69 03 	sts	0x0369, r16	; 0x800369 <vcnl>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:30
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
    17c0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <TwoWire::begin() [clone .constprop.32]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:31
  _begun = true;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	f8 01       	movw	r30, r16
    17c8:	83 83       	std	Z+3, r24	; 0x03
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_I2CDevice.cpp:34

  if (addr_detect) {
    return detected();
    17ca:	c8 01       	movw	r24, r16
    17cc:	0e 94 c5 04 	call	0x98a	; 0x98a <Adafruit_I2CDevice::detected()>
    17d0:	18 2f       	mov	r17, r24
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:49
  if (!i2c_dev->begin())
    17d2:	81 11       	cpse	r24, r1
    17d4:	59 c0       	rjmp	.+178    	; 0x1888 <main+0x200>
main():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:50
    return false;
    17d6:	10 e0       	ldi	r17, 0x00	; 0
setup():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:39
{
  Serial.begin(9600);
  myTransfer.begin(Serial);

//  initialize the light sensor
  turb_init = vcnl.begin();
    17d8:	10 93 2a 02 	sts	0x022A, r17	; 0x80022a <turb_init>
setLEDcurrent():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:77
/**************************************************************************/

void Adafruit_VCNL4010::setLEDcurrent(uint8_t current_10mA) {
  if (current_10mA > 20)
    current_10mA = 20;
  write8(VCNL4010_IRLED, current_10mA);
    17dc:	65 e0       	ldi	r22, 0x05	; 5
    17de:	83 e8       	ldi	r24, 0x83	; 131
    17e0:	0e 94 86 05 	call	0xb0c	; 0xb0c <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]>
initializeMS_5803():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:83
	_Resolution = Resolution;
}

//-------------------------------------------------
boolean MS_5803::initializeMS_5803() {
    Wire.begin();
    17e4:	0e 94 64 02 	call	0x4c8	; 0x4c8 <TwoWire::begin() [clone .constprop.32]>
resetSensor():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:400
}

//----------------------------------------------------------------
// Sends a power on reset command to the sensor.
void MS_5803::resetSensor() {
    	Wire.beginTransmission(_I2C_Address);
    17e8:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <pressure_sensor+0x12>
beginTransmission():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TwoWire::transmitting>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    17f2:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <TwoWire::txAddress>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    17f6:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TwoWire::txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    17fa:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <TwoWire::txBufferLength>
write():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    17fe:	6e e1       	ldi	r22, 0x1E	; 30
    1800:	83 e4       	ldi	r24, 0x43	; 67
    1802:	93 e0       	ldi	r25, 0x03	; 3
    1804:	0e 94 72 04 	call	0x8e4	; 0x8e4 <TwoWire::write(unsigned char)>
resetSensor():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:402
        Wire.write(CMD_RESET);
        Wire.endTransmission();
    1808:	83 e4       	ldi	r24, 0x43	; 67
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	0e 94 a1 04 	call	0x942	; 0x942 <TwoWire::endTransmission()>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:403
    	delay(10);
    1810:	6a e0       	ldi	r22, 0x0A	; 10
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 bf 03 	call	0x77e	; 0x77e <delay>
    181c:	08 e0       	ldi	r16, 0x08	; 8
    181e:	12 e0       	ldi	r17, 0x02	; 2
    1820:	68 01       	movw	r12, r16
    1822:	80 ea       	ldi	r24, 0xA0	; 160
    1824:	b8 2e       	mov	r11, r24
beginTransmission():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1826:	aa 24       	eor	r10, r10
    1828:	a3 94       	inc	r10
initializeMS_5803():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:124
    #endif

    // Read sensor coefficients
    for (int i = 0; i < 8; i++ ){
    	// The PROM starts at address 0xA0
    	Wire.beginTransmission(_I2C_Address);
    182a:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <pressure_sensor+0x12>
beginTransmission():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:147
    182e:	a0 92 3b 02 	sts	0x023B, r10	; 0x80023b <TwoWire::transmitting>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:149
  // set address of targeted slave
  txAddress = address;
    1832:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <TwoWire::txAddress>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:151
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1836:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TwoWire::txBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:152
  txBufferLength = 0;
    183a:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <TwoWire::txBufferLength>
write():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.h:81
    183e:	6b 2d       	mov	r22, r11
    1840:	83 e4       	ldi	r24, 0x43	; 67
    1842:	93 e0       	ldi	r25, 0x03	; 3
    1844:	0e 94 72 04 	call	0x8e4	; 0x8e4 <TwoWire::write(unsigned char)>
initializeMS_5803():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:126
    	Wire.write(0xA0 + (i * 2));
    	Wire.endTransmission();
    1848:	83 e4       	ldi	r24, 0x43	; 67
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	0e 94 a1 04 	call	0x942	; 0x942 <TwoWire::endTransmission()>
twi_readFrom():
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	62 e0       	ldi	r22, 0x02	; 2
    1854:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <pressure_sensor+0x12>
    1858:	0e 94 9d 00 	call	0x13a	; 0x13a <twi_readFrom.part.0.constprop.70>
    185c:	98 2e       	mov	r9, r24
requestFrom():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:119
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    185e:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <TwoWire::rxBufferIndex>
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = read;
    1862:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <TwoWire::rxBufferLength>
initializeMS_5803():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:128
    	Wire.requestFrom(_I2C_Address, 2);
    	while(Wire.available()) {
    1866:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <TwoWire::rxBufferIndex>
    186a:	98 16       	cp	r9, r24
    186c:	09 f1       	breq	.+66     	; 0x18b0 <main+0x228>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:129
    		HighByte = Wire.read();
    186e:	83 e4       	ldi	r24, 0x43	; 67
    1870:	93 e0       	ldi	r25, 0x03	; 3
    1872:	0e 94 32 04 	call	0x864	; 0x864 <TwoWire::read()>
    1876:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <HighByte>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:130
    		LowByte = Wire.read();
    187a:	83 e4       	ldi	r24, 0x43	; 67
    187c:	93 e0       	ldi	r25, 0x03	; 3
    187e:	0e 94 32 04 	call	0x864	; 0x864 <TwoWire::read()>
    1882:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <LowByte>
    1886:	ef cf       	rjmp	.-34     	; 0x1866 <main+0x1de>
begin():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:52
    delete i2c_dev;
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
  if (!i2c_dev->begin())
    return false;

  uint8_t rev = read8(VCNL4010_PRODUCTID);
    1888:	81 e8       	ldi	r24, 0x81	; 129
    188a:	0e 94 2a 06 	call	0xc54	; 0xc54 <Adafruit_VCNL4010::read8(unsigned char) [clone .constprop.55]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:54
  // Serial.println(rev, HEX);
  if ((rev & 0xF0) != 0x20) {
    188e:	80 7f       	andi	r24, 0xF0	; 240
    1890:	80 32       	cpi	r24, 0x20	; 32
    1892:	09 f0       	breq	.+2      	; 0x1896 <main+0x20e>
    1894:	a0 cf       	rjmp	.-192    	; 0x17d6 <main+0x14e>
setLEDcurrent():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:77
/**************************************************************************/

void Adafruit_VCNL4010::setLEDcurrent(uint8_t current_10mA) {
  if (current_10mA > 20)
    current_10mA = 20;
  write8(VCNL4010_IRLED, current_10mA);
    1896:	64 e1       	ldi	r22, 0x14	; 20
    1898:	83 e8       	ldi	r24, 0x83	; 131
    189a:	0e 94 86 05 	call	0xb0c	; 0xb0c <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]>
setFrequency():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:102
   VCNL4010_250 (250 measurements/s)
*/
/**************************************************************************/

void Adafruit_VCNL4010::setFrequency(vcnl4010_freq freq) {
  write8(VCNL4010_PROXRATE, freq);
    189e:	63 e0       	ldi	r22, 0x03	; 3
    18a0:	82 e8       	ldi	r24, 0x82	; 130
    18a2:	0e 94 86 05 	call	0xb0c	; 0xb0c <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]>
begin():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:61
  }

  setLEDcurrent(20);             // 200 mA
  setFrequency(VCNL4010_16_625); // 16.625 readings/second

  write8(VCNL4010_INTCONTROL, 0x08);
    18a6:	68 e0       	ldi	r22, 0x08	; 8
    18a8:	89 e8       	ldi	r24, 0x89	; 137
    18aa:	0e 94 86 05 	call	0xb0c	; 0xb0c <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]>
    18ae:	94 cf       	rjmp	.-216    	; 0x17d8 <main+0x150>
initializeMS_5803():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:132
    	}
    	sensorCoeffs[i] = (((unsigned int)HighByte << 8) + LowByte);
    18b0:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <HighByte>
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	98 2f       	mov	r25, r24
    18b8:	88 27       	eor	r24, r24
    18ba:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <LowByte>
    18be:	82 0f       	add	r24, r18
    18c0:	91 1d       	adc	r25, r1
    18c2:	d6 01       	movw	r26, r12
    18c4:	8d 93       	st	X+, r24
    18c6:	9d 93       	st	X+, r25
    18c8:	6d 01       	movw	r12, r26
    18ca:	b3 94       	inc	r11
    18cc:	b3 94       	inc	r11
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:122
		//ensure the messages are sent before potentially invalid settings are used below.
		DEBUG_SERIAL.flush(); 
    #endif

    // Read sensor coefficients
    for (int i = 0; i < 8; i++ ){
    18ce:	b0 eb       	ldi	r27, 0xB0	; 176
    18d0:	bb 12       	cpse	r11, r27
    18d2:	ab cf       	rjmp	.-170    	; 0x182a <main+0x1a2>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:143
			DEBUG_SERIAL.println(sensorCoeffs[i]);
			DEBUG_SERIAL.flush(); 
    	#endif
    }
    // The last 4 bits of the 7th coefficient form a CRC error checking code.
    unsigned char p_crc = sensorCoeffs[7];
    18d4:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <sensorCoeffs+0xe>
    18d8:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <sensorCoeffs+0xf>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:144
	p_crc &= 0b00001111;
    18dc:	74 2f       	mov	r23, r20
    18de:	7f 70       	andi	r23, 0x0F	; 15
MS_5803_CRC():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:324
    unsigned int n_rem;		// crc reminder
    unsigned int crc_read;	// original value of the CRC
    unsigned char  n_bit;
    n_rem = 0x00;
    crc_read = sensorCoeffs[7];		// save read CRC
    sensorCoeffs[7] = (0xFF00 & (sensorCoeffs[7])); // CRC byte replaced with 0
    18e0:	ca 01       	movw	r24, r20
    18e2:	88 27       	eor	r24, r24
    18e4:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <sensorCoeffs+0xf>
    18e8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <sensorCoeffs+0xe>
main():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:322
unsigned char MS_5803::MS_5803_CRC(unsigned int n_prom[]) {
    int cnt;				// simple counter
    unsigned int n_rem;		// crc reminder
    unsigned int crc_read;	// original value of the CRC
    unsigned char  n_bit;
    n_rem = 0x00;
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:325
    crc_read = sensorCoeffs[7];		// save read CRC
    sensorCoeffs[7] = (0xFF00 & (sensorCoeffs[7])); // CRC byte replaced with 0
    for (cnt = 0; cnt < 16; cnt++)
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	f9 01       	movw	r30, r18
    18f6:	ee 7f       	andi	r30, 0xFE	; 254
    18f8:	e8 5f       	subi	r30, 0xF8	; 248
    18fa:	fd 4f       	sbci	r31, 0xFD	; 253
    18fc:	a0 81       	ld	r26, Z
    18fe:	61 81       	ldd	r22, Z+1	; 0x01
MS_5803_CRC():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:327
    { // choose LSB or MSB
        if (cnt%2 == 1) {
    1900:	20 ff       	sbrs	r18, 0
    1902:	23 c0       	rjmp	.+70     	; 0x194a <main+0x2c2>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:328
        	n_rem ^= (unsigned short)((sensorCoeffs[cnt>>1]) & 0x00FF);
    1904:	8a 27       	eor	r24, r26
main():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:325
    unsigned int crc_read;	// original value of the CRC
    unsigned char  n_bit;
    n_rem = 0x00;
    crc_read = sensorCoeffs[7];		// save read CRC
    sensorCoeffs[7] = (0xFF00 & (sensorCoeffs[7])); // CRC byte replaced with 0
    for (cnt = 0; cnt < 16; cnt++)
    1906:	68 e0       	ldi	r22, 0x08	; 8
MS_5803_CRC():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:335
        else {
        	n_rem ^= (unsigned short)(sensorCoeffs[cnt>>1] >> 8);
        }
        for (n_bit = 8; n_bit > 0; n_bit--)
        {
            if (n_rem & (0x8000))
    1908:	fc 01       	movw	r30, r24
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	f7 ff       	sbrs	r31, 7
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <main+0x28e>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:337
            {
                n_rem = (n_rem << 1) ^ 0x3000;
    1912:	e0 e3       	ldi	r30, 0x30	; 48
    1914:	9e 27       	eor	r25, r30
    1916:	61 50       	subi	r22, 0x01	; 1
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:333
        	n_rem ^= (unsigned short)((sensorCoeffs[cnt>>1]) & 0x00FF);
        }
        else {
        	n_rem ^= (unsigned short)(sensorCoeffs[cnt>>1] >> 8);
        }
        for (n_bit = 8; n_bit > 0; n_bit--)
    1918:	b9 f7       	brne	.-18     	; 0x1908 <main+0x280>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:325
    unsigned int crc_read;	// original value of the CRC
    unsigned char  n_bit;
    n_rem = 0x00;
    crc_read = sensorCoeffs[7];		// save read CRC
    sensorCoeffs[7] = (0xFF00 & (sensorCoeffs[7])); // CRC byte replaced with 0
    for (cnt = 0; cnt < 16; cnt++)
    191a:	2f 5f       	subi	r18, 0xFF	; 255
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	20 31       	cpi	r18, 0x10	; 16
    1920:	31 05       	cpc	r19, r1
    1922:	41 f7       	brne	.-48     	; 0x18f4 <main+0x26c>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:345
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));// // final 4-bit reminder is CRC code
    sensorCoeffs[7] = crc_read; // restore the crc_read to its original place
    1924:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <sensorCoeffs+0xf>
    1928:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <sensorCoeffs+0xe>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:344
            else {
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));// // final 4-bit reminder is CRC code
    192c:	92 95       	swap	r25
    192e:	9f 70       	andi	r25, 0x0F	; 15
    1930:	28 e1       	ldi	r18, 0x18	; 24
    1932:	32 e0       	ldi	r19, 0x02	; 2
initializeMS_5803():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:159
	
    // check that coefficients are not all 0. 
    // without this check, CRC will pass despite unresponsive sensor.
    bool empty_coeffs = true;
    for (int i = 0; i<8; i++){
		if (sensorCoeffs[i] !=0){
    1934:	d8 01       	movw	r26, r16
    1936:	4d 91       	ld	r20, X+
    1938:	5d 91       	ld	r21, X+
    193a:	8d 01       	movw	r16, r26
    193c:	45 2b       	or	r20, r21
    193e:	49 f4       	brne	.+18     	; 0x1952 <main+0x2ca>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:158
    #endif
	
    // check that coefficients are not all 0. 
    // without this check, CRC will pass despite unresponsive sensor.
    bool empty_coeffs = true;
    for (int i = 0; i<8; i++){
    1940:	2a 17       	cp	r18, r26
    1942:	3b 07       	cpc	r19, r27
    1944:	b9 f7       	brne	.-18     	; 0x1934 <main+0x2ac>
main():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:166
			break;
		}
    }

    if (p_crc != n_crc || empty_coeffs) {
        return false;
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <main+0x2d0>
MS_5803_CRC():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:331
    { // choose LSB or MSB
        if (cnt%2 == 1) {
        	n_rem ^= (unsigned short)((sensorCoeffs[cnt>>1]) & 0x00FF);
        }
        else {
        	n_rem ^= (unsigned short)(sensorCoeffs[cnt>>1] >> 8);
    194a:	f1 2c       	mov	r15, r1
    194c:	86 27       	eor	r24, r22
    194e:	9f 25       	eor	r25, r15
    1950:	da cf       	rjmp	.-76     	; 0x1906 <main+0x27e>
initializeMS_5803():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:165
			empty_coeffs = false;
			break;
		}
    }

    if (p_crc != n_crc || empty_coeffs) {
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	79 13       	cpse	r23, r25
    1956:	f7 cf       	rjmp	.-18     	; 0x1946 <main+0x2be>
setup():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:42
  vcnl.setLEDcurrent(5);
  //initialize the pressure sensor
  pressure_init = pressure_sensor.initializeMS_5803();
    1958:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <pressure_init>
available():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:89
 -------
  * uint8_t bytesRead - Num bytes in RX buffer
*/
uint8_t SerialTransfer::available()
{
	bool    valid   = false;
    195c:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:90
	uint8_t recChar = 0xFF;
    195e:	bf ef       	ldi	r27, 0xFF	; 255
    1960:	b9 83       	std	Y+1, r27	; 0x01
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:92

	if (port->available())
    1962:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <myTransfer+0x21b>
    1966:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <myTransfer+0x21c>
    196a:	dc 01       	movw	r26, r24
    196c:	ed 91       	ld	r30, X+
    196e:	fc 91       	ld	r31, X
    1970:	00 84       	ldd	r0, Z+8	; 0x08
    1972:	f1 85       	ldd	r31, Z+9	; 0x09
    1974:	e0 2d       	mov	r30, r0
    1976:	09 95       	icall
    1978:	89 2b       	or	r24, r25
    197a:	09 f4       	brne	.+2      	; 0x197e <main+0x2f6>
    197c:	57 c0       	rjmp	.+174    	; 0x1a2c <main+0x3a4>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:94
	{
		valid = true;
    197e:	b1 e0       	ldi	r27, 0x01	; 1
    1980:	ba 83       	std	Y+2, r27	; 0x02
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:96

		while (port->available())
    1982:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <myTransfer+0x21b>
    1986:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <myTransfer+0x21c>
    198a:	dc 01       	movw	r26, r24
    198c:	ed 91       	ld	r30, X+
    198e:	fc 91       	ld	r31, X
    1990:	00 84       	ldd	r0, Z+8	; 0x08
    1992:	f1 85       	ldd	r31, Z+9	; 0x09
    1994:	e0 2d       	mov	r30, r0
    1996:	09 95       	icall
    1998:	89 2b       	or	r24, r25
    199a:	f1 f0       	breq	.+60     	; 0x19d8 <main+0x350>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:98
		{
			recChar = port->read();
    199c:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <myTransfer+0x21b>
    19a0:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <myTransfer+0x21c>
    19a4:	dc 01       	movw	r26, r24
    19a6:	ed 91       	ld	r30, X+
    19a8:	fc 91       	ld	r31, X
    19aa:	02 84       	ldd	r0, Z+10	; 0x0a
    19ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    19ae:	e0 2d       	mov	r30, r0
    19b0:	09 95       	icall
    19b2:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:100

			bytesRead = packet.parse(recChar, valid);
    19b4:	be 01       	movw	r22, r28
    19b6:	6e 5f       	subi	r22, 0xFE	; 254
    19b8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ba:	ce 01       	movw	r24, r28
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]>
    19c2:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <myTransfer+0x219>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:101
			status    = packet.status;
    19c6:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <myTransfer+0x203>
    19ca:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <myTransfer+0x21a>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:103

			if (status != CONTINUE)
    19ce:	83 30       	cpi	r24, 0x03	; 3
    19d0:	c1 f2       	breq	.-80     	; 0x1982 <main+0x2fa>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:105
			{
				if (status < 0)
    19d2:	87 fd       	sbrc	r24, 7
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:106
					reset();
    19d4:	0e 94 5d 06 	call	0xcba	; 0xcba <SerialTransfer::reset() [clone .constprop.20]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:121

		if (status < 0)
			reset();
	}

	return bytesRead;
    19d8:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <myTransfer+0x219>
loop():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:52


void loop()
{
  //Wait for a data request.
  if(myTransfer.available()){
    19dc:	81 11       	cpse	r24, r1
    19de:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <main+0x1476>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:56
    myTransfer.rxObj(request);
  }

  if(request == 1){
    19e2:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <request>
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	79 f5       	brne	.+94     	; 0x1a48 <main+0x3c0>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:57
    sensor_init = (turb_init << 1) + pressure_init;
    19ea:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <turb_init>
    19ee:	88 0f       	add	r24, r24
    19f0:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <pressure_init>
    19f4:	89 0f       	add	r24, r25
    19f6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <sensor_init>
_ZN6Packet5txObjIhEEjRKT_RKjS5_.isra.2():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.h:104
		else
			maxIndex = len + index;

		for (uint16_t i = index; i < maxIndex; i++)
		{
			txBuff[i] = *ptr;
    19fa:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <myTransfer>
loop():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:59
    //Fill buffer with initializations and then send it
    sendSize = myTransfer.txObj(sensor_init, 0);
    19fe:	e1 e0       	ldi	r30, 0x01	; 1
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	f0 93 35 02 	sts	0x0235, r31	; 0x800235 <sendSize+0x1>
    1a06:	e0 93 34 02 	sts	0x0234, r30	; 0x800234 <sendSize>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:74
    data.tuBackground = vcnl.readAmbient();
    data.tuReading = vcnl.readProximity();
    
    //Fill buffer with a data struct and then send it.
    sendSize = myTransfer.txObj(data, 0);
    myTransfer.sendData(sendSize);
    1a0a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <SerialTransfer::sendData(unsigned int const&, unsigned char) [clone .constprop.45]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:75
    request = 0;
    1a0e:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <request>
serialEventRun():
C:\Users\Ted\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1a12:	a0 e0       	ldi	r26, 0x00	; 0
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	ab 2b       	or	r26, r27
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <main+0x394>
    1a1a:	a0 cf       	rjmp	.-192    	; 0x195c <main+0x2d4>
    1a1c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Serial0_available()>
    1a20:	88 23       	and	r24, r24
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <main+0x39e>
    1a24:	9b cf       	rjmp	.-202    	; 0x195c <main+0x2d4>
    1a26:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a2a:	98 cf       	rjmp	.-208    	; 0x195c <main+0x2d4>
available():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:114
			}
		}
	}
	else
	{
		bytesRead = packet.parse(recChar, valid);
    1a2c:	be 01       	movw	r22, r28
    1a2e:	6e 5f       	subi	r22, 0xFE	; 254
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	ce 01       	movw	r24, r28
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Packet::parse(unsigned char const&, bool const&) [clone .constprop.8]>
    1a3a:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <myTransfer+0x219>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/SerialTransfer.cpp:115
		status    = packet.status;
    1a3e:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <myTransfer+0x203>
    1a42:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <myTransfer+0x21a>
    1a46:	c5 cf       	rjmp	.-118    	; 0x19d2 <main+0x34a>
loop():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:63
    //Fill buffer with initializations and then send it
    sendSize = myTransfer.txObj(sensor_init, 0);
    myTransfer.sendData(sendSize);
    request = 0;
  }
  else if(request == 2){
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	19 f7       	brne	.-58     	; 0x1a12 <main+0x38a>
readSensor():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:178
//------------------------------------------------------------------
void MS_5803::readSensor() {
	// Choose from CMD_ADC_256, 512, 1024, 2048, 4096 for mbar resolutions
	// of 1, 0.6, 0.4, 0.3, 0.2 respectively. Higher resolutions take longer
	// to read.
	if (_Resolution == 256){
    1a4c:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <pressure_sensor+0x10>
    1a50:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <pressure_sensor+0x11>
    1a54:	81 15       	cp	r24, r1
    1a56:	f1 e0       	ldi	r31, 0x01	; 1
    1a58:	9f 07       	cpc	r25, r31
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <main+0x3d6>
    1a5c:	c3 c1       	rjmp	.+902    	; 0x1de4 <main+0x75c>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:179
		D1 = MS_5803_ADC(CMD_ADC_D1 + CMD_ADC_256); // read raw pressure
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]>
    1a64:	60 93 5d 03 	sts	0x035D, r22	; 0x80035d <pressure_sensor+0x8>
    1a68:	70 93 5e 03 	sts	0x035E, r23	; 0x80035e <pressure_sensor+0x9>
    1a6c:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <pressure_sensor+0xa>
    1a70:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <pressure_sensor+0xb>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:180
		D2 = MS_5803_ADC(CMD_ADC_D2 + CMD_ADC_256); // read raw temperature	
    1a74:	80 e1       	ldi	r24, 0x10	; 16
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:192
	} else if (_Resolution == 2048) {
		D1 = MS_5803_ADC(CMD_ADC_D1 + CMD_ADC_2048); // read raw pressure
		D2 = MS_5803_ADC(CMD_ADC_D2 + CMD_ADC_2048); // read raw temperature
	} else if (_Resolution == 4096) {
		D1 = MS_5803_ADC(CMD_ADC_D1 + CMD_ADC_4096); // read raw pressure
		D2 = MS_5803_ADC(CMD_ADC_D2 + CMD_ADC_4096); // read raw temperature
    1a76:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]>
    1a7a:	60 93 61 03 	sts	0x0361, r22	; 0x800361 <pressure_sensor+0xc>
    1a7e:	70 93 62 03 	sts	0x0362, r23	; 0x800362 <pressure_sensor+0xd>
    1a82:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <pressure_sensor+0xe>
    1a86:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <pressure_sensor+0xf>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:198
	}
    // Calculate 1st order temperature, dT is a long integer
	// D2 is originally cast as an uint32_t, but can fit in a int32_t, so we'll
	// cast both parts of the equation below as signed values so that we can
	// get a negative answer if needed
    dT = (int32_t)D2 - ( (int32_t)sensorCoeffs[5] * 256 );
    1a8a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <sensorCoeffs+0xa>
    1a8e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <sensorCoeffs+0xb>
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	ba 2f       	mov	r27, r26
    1a98:	a9 2f       	mov	r26, r25
    1a9a:	98 2f       	mov	r25, r24
    1a9c:	88 27       	eor	r24, r24
    1a9e:	40 91 61 03 	lds	r20, 0x0361	; 0x800361 <pressure_sensor+0xc>
    1aa2:	50 91 62 03 	lds	r21, 0x0362	; 0x800362 <pressure_sensor+0xd>
    1aa6:	60 91 63 03 	lds	r22, 0x0363	; 0x800363 <pressure_sensor+0xe>
    1aaa:	70 91 64 03 	lds	r23, 0x0364	; 0x800364 <pressure_sensor+0xf>
    1aae:	8a 01       	movw	r16, r20
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	08 1b       	sub	r16, r24
    1ab4:	19 0b       	sbc	r17, r25
    1ab6:	2a 0b       	sbc	r18, r26
    1ab8:	3b 0b       	sbc	r19, r27
    1aba:	0b 83       	std	Y+3, r16	; 0x03
    1abc:	1c 83       	std	Y+4, r17	; 0x04
    1abe:	2d 83       	std	Y+5, r18	; 0x05
    1ac0:	3e 83       	std	Y+6, r19	; 0x06
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:202
    // Use integer division to calculate T. It is necessary to cast
    // one of the operands as a signed 64-bit integer (int64_t) so there's no 
    // rollover issues in the numerator.
    T = 2000 + ((int64_t)dT * sensorCoeffs[6]) / 8388608LL;
    1ac2:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <sensorCoeffs+0xc>
    1ac6:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <sensorCoeffs+0xd>
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	a9 01       	movw	r20, r18
    1ad0:	98 01       	movw	r18, r16
    1ad2:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    1ad6:	f2 2e       	mov	r15, r18
    1ad8:	03 2f       	mov	r16, r19
    1ada:	14 2f       	mov	r17, r20
    1adc:	b5 2f       	mov	r27, r21
    1ade:	f6 2f       	mov	r31, r22
    1ae0:	e7 2f       	mov	r30, r23
    1ae2:	d8 2e       	mov	r13, r24
    1ae4:	e9 2e       	mov	r14, r25
    1ae6:	a0 e0       	ldi	r26, 0x00	; 0
    1ae8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    1aec:	84 f4       	brge	.+32     	; 0x1b0e <main+0x486>
    1aee:	21 50       	subi	r18, 0x01	; 1
    1af0:	31 09       	sbc	r19, r1
    1af2:	40 48       	sbci	r20, 0x80	; 128
    1af4:	5f 4f       	sbci	r21, 0xFF	; 255
    1af6:	6f 4f       	sbci	r22, 0xFF	; 255
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	8f 4f       	sbci	r24, 0xFF	; 255
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	f2 2e       	mov	r15, r18
    1b00:	03 2f       	mov	r16, r19
    1b02:	14 2f       	mov	r17, r20
    1b04:	b5 2f       	mov	r27, r21
    1b06:	f6 2f       	mov	r31, r22
    1b08:	e7 2f       	mov	r30, r23
    1b0a:	d8 2e       	mov	r13, r24
    1b0c:	e9 2e       	mov	r14, r25
    1b0e:	2f 2d       	mov	r18, r15
    1b10:	30 2f       	mov	r19, r16
    1b12:	41 2f       	mov	r20, r17
    1b14:	5b 2f       	mov	r21, r27
    1b16:	6f 2f       	mov	r22, r31
    1b18:	7e 2f       	mov	r23, r30
    1b1a:	8d 2d       	mov	r24, r13
    1b1c:	9e 2d       	mov	r25, r14
    1b1e:	07 e1       	ldi	r16, 0x17	; 23
    1b20:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    1b24:	19 01       	movw	r2, r18
    1b26:	2a 01       	movw	r4, r20
    1b28:	20 53       	subi	r18, 0x30	; 48
    1b2a:	38 4f       	sbci	r19, 0xF8	; 248
    1b2c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b30:	2c 87       	std	Y+12, r18	; 0x0c
    1b32:	3d 87       	std	Y+13, r19	; 0x0d
    1b34:	4e 87       	std	Y+14, r20	; 0x0e
    1b36:	5f 87       	std	Y+15, r21	; 0x0f
    1b38:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <pressure_sensor+0x13>
    1b3c:	3b 87       	std	Y+11, r19	; 0x0b
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:214
    
    
    // Do 2nd order temperature compensation (see pg 9 of MS5803 data sheet)
    // I have tried to insert the fixed values wherever possible 
    // (i.e. 2^31 is hard coded as 2147483648).
    if (T < 2000) { // If temperature is below 20.0C
    1b3e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b40:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b42:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b44:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b46:	40 3d       	cpi	r20, 0xD0	; 208
    1b48:	57 40       	sbci	r21, 0x07	; 7
    1b4a:	61 05       	cpc	r22, r1
    1b4c:	71 05       	cpc	r23, r1
    1b4e:	0c f0       	brlt	.+2      	; 0x1b52 <main+0x4ca>
    1b50:	e2 c3       	rjmp	.+1988   	; 0x2316 <main+0xc8e>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:215
		switch(_Version){
    1b52:	35 30       	cpi	r19, 0x05	; 5
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <main+0x4d0>
    1b56:	ca c2       	rjmp	.+1428   	; 0x20ec <main+0xa64>
    1b58:	3e 30       	cpi	r19, 0x0E	; 14
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <main+0x4d6>
    1b5c:	87 c1       	rjmp	.+782    	; 0x1e6c <main+0x7e4>
    1b5e:	32 30       	cpi	r19, 0x02	; 2
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <main+0x4dc>
    1b62:	8a c5       	rjmp	.+2836   	; 0x2678 <main+0xff0>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:229
				T2 = (int32_t)T2; // recast as signed 32bit integer
				OFF2 = 3 * ((T-2000) * (T-2000)) / 8 ;
				Sens2 = 7 * ((T-2000) * (T-2000)) / 8 ;
				break;
			case 2:
				T2 = ((int64_t)dT * dT) / 2147483648LL ; // 2^31 = 2147483648
    1b64:	6b 81       	ldd	r22, Y+3	; 0x03
    1b66:	7c 81       	ldd	r23, Y+4	; 0x04
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	9b 01       	movw	r18, r22
    1b6e:	ac 01       	movw	r20, r24
    1b70:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    1b74:	f2 2e       	mov	r15, r18
    1b76:	03 2f       	mov	r16, r19
    1b78:	14 2f       	mov	r17, r20
    1b7a:	b5 2f       	mov	r27, r21
    1b7c:	f6 2f       	mov	r31, r22
    1b7e:	e7 2f       	mov	r30, r23
    1b80:	d8 2e       	mov	r13, r24
    1b82:	e9 2e       	mov	r14, r25
    1b84:	a0 e0       	ldi	r26, 0x00	; 0
    1b86:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    1b8a:	84 f4       	brge	.+32     	; 0x1bac <main+0x524>
    1b8c:	21 50       	subi	r18, 0x01	; 1
    1b8e:	31 09       	sbc	r19, r1
    1b90:	41 09       	sbc	r20, r1
    1b92:	50 48       	sbci	r21, 0x80	; 128
    1b94:	6f 4f       	sbci	r22, 0xFF	; 255
    1b96:	7f 4f       	sbci	r23, 0xFF	; 255
    1b98:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9c:	f2 2e       	mov	r15, r18
    1b9e:	03 2f       	mov	r16, r19
    1ba0:	14 2f       	mov	r17, r20
    1ba2:	b5 2f       	mov	r27, r21
    1ba4:	f6 2f       	mov	r31, r22
    1ba6:	e7 2f       	mov	r30, r23
    1ba8:	d8 2e       	mov	r13, r24
    1baa:	e9 2e       	mov	r14, r25
    1bac:	2f 2d       	mov	r18, r15
    1bae:	30 2f       	mov	r19, r16
    1bb0:	41 2f       	mov	r20, r17
    1bb2:	5b 2f       	mov	r21, r27
    1bb4:	6f 2f       	mov	r22, r31
    1bb6:	7e 2f       	mov	r23, r30
    1bb8:	8d 2d       	mov	r24, r13
    1bba:	9e 2d       	mov	r25, r14
    1bbc:	0f e1       	ldi	r16, 0x1F	; 31
    1bbe:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    1bc2:	49 01       	movw	r8, r18
    1bc4:	5a 01       	movw	r10, r20
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:230
				T2 = (int32_t)T2; // recast as signed 32bit integer
    1bc6:	80 92 00 02 	sts	0x0200, r8	; 0x800200 <T2>
    1bca:	90 92 01 02 	sts	0x0201, r9	; 0x800201 <T2+0x1>
    1bce:	a0 92 02 02 	sts	0x0202, r10	; 0x800202 <T2+0x2>
    1bd2:	b0 92 03 02 	sts	0x0203, r11	; 0x800203 <T2+0x3>
    1bd6:	bb 0c       	add	r11, r11
    1bd8:	88 08       	sbc	r8, r8
    1bda:	98 2c       	mov	r9, r8
    1bdc:	54 01       	movw	r10, r8
    1bde:	80 92 04 02 	sts	0x0204, r8	; 0x800204 <T2+0x4>
    1be2:	80 92 05 02 	sts	0x0205, r8	; 0x800205 <T2+0x5>
    1be6:	80 92 06 02 	sts	0x0206, r8	; 0x800206 <T2+0x6>
    1bea:	80 92 07 02 	sts	0x0207, r8	; 0x800207 <T2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:231
				OFF2 = (61 * ((T-2000) * (T-2000))) / 16 ;
    1bee:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bf0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bf2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bf6:	60 5d       	subi	r22, 0xD0	; 208
    1bf8:	77 40       	sbci	r23, 0x07	; 7
    1bfa:	81 09       	sbc	r24, r1
    1bfc:	91 09       	sbc	r25, r1
    1bfe:	9b 01       	movw	r18, r22
    1c00:	ac 01       	movw	r20, r24
    1c02:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__mulsi3>
    1c06:	6b 01       	movw	r12, r22
    1c08:	7c 01       	movw	r14, r24
    1c0a:	ad e3       	ldi	r26, 0x3D	; 61
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ac 01       	movw	r20, r24
    1c10:	9b 01       	movw	r18, r22
    1c12:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__muluhisi3>
    1c16:	8b 01       	movw	r16, r22
    1c18:	9c 01       	movw	r18, r24
    1c1a:	44 e0       	ldi	r20, 0x04	; 4
    1c1c:	35 95       	asr	r19
    1c1e:	27 95       	ror	r18
    1c20:	17 95       	ror	r17
    1c22:	07 95       	ror	r16
    1c24:	4a 95       	dec	r20
    1c26:	d1 f7       	brne	.-12     	; 0x1c1c <main+0x594>
    1c28:	00 93 f8 01 	sts	0x01F8, r16	; 0x8001f8 <OFF2>
    1c2c:	10 93 f9 01 	sts	0x01F9, r17	; 0x8001f9 <OFF2+0x1>
    1c30:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <OFF2+0x2>
    1c34:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <OFF2+0x3>
    1c38:	2b 01       	movw	r4, r22
    1c3a:	3c 01       	movw	r6, r24
    1c3c:	77 0c       	add	r7, r7
    1c3e:	44 08       	sbc	r4, r4
    1c40:	54 2c       	mov	r5, r4
    1c42:	32 01       	movw	r6, r4
    1c44:	40 92 fc 01 	sts	0x01FC, r4	; 0x8001fc <OFF2+0x4>
    1c48:	40 92 fd 01 	sts	0x01FD, r4	; 0x8001fd <OFF2+0x5>
    1c4c:	40 92 fe 01 	sts	0x01FE, r4	; 0x8001fe <OFF2+0x6>
    1c50:	40 92 ff 01 	sts	0x01FF, r4	; 0x8001ff <OFF2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:232
				Sens2 = 2 * ((T-2000) * (T-2000)) ;
    1c54:	cc 0c       	add	r12, r12
    1c56:	dd 1c       	adc	r13, r13
    1c58:	ee 1c       	adc	r14, r14
    1c5a:	ff 1c       	adc	r15, r15
    1c5c:	c0 92 f0 01 	sts	0x01F0, r12	; 0x8001f0 <Sens2>
    1c60:	d0 92 f1 01 	sts	0x01F1, r13	; 0x8001f1 <Sens2+0x1>
    1c64:	e0 92 f2 01 	sts	0x01F2, r14	; 0x8001f2 <Sens2+0x2>
    1c68:	f0 92 f3 01 	sts	0x01F3, r15	; 0x8001f3 <Sens2+0x3>
    1c6c:	c7 01       	movw	r24, r14
    1c6e:	b6 01       	movw	r22, r12
    1c70:	99 0f       	add	r25, r25
    1c72:	66 0b       	sbc	r22, r22
    1c74:	76 2f       	mov	r23, r22
    1c76:	cb 01       	movw	r24, r22
    1c78:	68 8b       	std	Y+16, r22	; 0x10
    1c7a:	79 8b       	std	Y+17, r23	; 0x11
    1c7c:	8a 8b       	std	Y+18, r24	; 0x12
    1c7e:	9b 8b       	std	Y+19, r25	; 0x13
    1c80:	60 93 f4 01 	sts	0x01F4, r22	; 0x8001f4 <Sens2+0x4>
    1c84:	78 89       	ldd	r23, Y+16	; 0x10
    1c86:	70 93 f5 01 	sts	0x01F5, r23	; 0x8001f5 <Sens2+0x5>
    1c8a:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <Sens2+0x6>
    1c8e:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <Sens2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:257
				break;
		}
    }
    
    // Additional compensation for very low temperatures (< -15C)
    if (T < -1500) {
    1c92:	0c 85       	ldd	r16, Y+12	; 0x0c
    1c94:	1d 85       	ldd	r17, Y+13	; 0x0d
    1c96:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c98:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c9a:	04 32       	cpi	r16, 0x24	; 36
    1c9c:	1a 4f       	sbci	r17, 0xFA	; 250
    1c9e:	2f 4f       	sbci	r18, 0xFF	; 255
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	0c f4       	brge	.+2      	; 0x1ca6 <main+0x61e>
    1ca4:	6f c5       	rjmp	.+2782   	; 0x2784 <main+0x10fc>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:287
		case 5:
			Offset = (int64_t)sensorCoeffs[2] * 262144 + (sensorCoeffs[4] * (int64_t)dT) / 32;
			Sensitivity = (int64_t)sensorCoeffs[1] * 131072 + (sensorCoeffs[3] * (int64_t)dT) / 128;
			break;
		case 2:
			Offset = (int64_t)sensorCoeffs[2] * 131072 + (sensorCoeffs[4] * (int64_t)dT) / 64;
    1ca6:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <sensorCoeffs+0x8>
    1caa:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <sensorCoeffs+0x9>
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb6:	4d 81       	ldd	r20, Y+5	; 0x05
    1cb8:	5e 81       	ldd	r21, Y+6	; 0x06
    1cba:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    1cbe:	f2 2e       	mov	r15, r18
    1cc0:	03 2f       	mov	r16, r19
    1cc2:	14 2f       	mov	r17, r20
    1cc4:	b5 2f       	mov	r27, r21
    1cc6:	f6 2f       	mov	r31, r22
    1cc8:	e7 2f       	mov	r30, r23
    1cca:	d8 2e       	mov	r13, r24
    1ccc:	e9 2e       	mov	r14, r25
    1cce:	a0 e0       	ldi	r26, 0x00	; 0
    1cd0:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    1cd4:	5c f4       	brge	.+22     	; 0x1cec <main+0x664>
    1cd6:	af e3       	ldi	r26, 0x3F	; 63
    1cd8:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__adddi3_s8>
    1cdc:	f2 2e       	mov	r15, r18
    1cde:	03 2f       	mov	r16, r19
    1ce0:	14 2f       	mov	r17, r20
    1ce2:	b5 2f       	mov	r27, r21
    1ce4:	f6 2f       	mov	r31, r22
    1ce6:	e7 2f       	mov	r30, r23
    1ce8:	d8 2e       	mov	r13, r24
    1cea:	e9 2e       	mov	r14, r25
    1cec:	2f 2d       	mov	r18, r15
    1cee:	30 2f       	mov	r19, r16
    1cf0:	41 2f       	mov	r20, r17
    1cf2:	5b 2f       	mov	r21, r27
    1cf4:	6f 2f       	mov	r22, r31
    1cf6:	7e 2f       	mov	r23, r30
    1cf8:	8d 2d       	mov	r24, r13
    1cfa:	9e 2d       	mov	r25, r14
    1cfc:	06 e0       	ldi	r16, 0x06	; 6
    1cfe:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    1d02:	39 01       	movw	r6, r18
    1d04:	4a 01       	movw	r8, r20
    1d06:	b6 2f       	mov	r27, r22
    1d08:	a7 2f       	mov	r26, r23
    1d0a:	f8 2f       	mov	r31, r24
    1d0c:	e9 2f       	mov	r30, r25
    1d0e:	a0 90 0c 02 	lds	r10, 0x020C	; 0x80020c <sensorCoeffs+0x4>
    1d12:	b0 90 0d 02 	lds	r11, 0x020D	; 0x80020d <sensorCoeffs+0x5>
    1d16:	95 01       	movw	r18, r10
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	01 e1       	ldi	r16, 0x11	; 17
    1d26:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__ashldi3>
    1d2a:	59 01       	movw	r10, r18
    1d2c:	6a 01       	movw	r12, r20
    1d2e:	7b 01       	movw	r14, r22
    1d30:	8c 01       	movw	r16, r24
    1d32:	93 01       	movw	r18, r6
    1d34:	a4 01       	movw	r20, r8
    1d36:	6b 2f       	mov	r22, r27
    1d38:	7a 2f       	mov	r23, r26
    1d3a:	8f 2f       	mov	r24, r31
    1d3c:	9e 2f       	mov	r25, r30
    1d3e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__adddi3>
    1d42:	20 93 e8 01 	sts	0x01E8, r18	; 0x8001e8 <Offset>
    1d46:	30 93 e9 01 	sts	0x01E9, r19	; 0x8001e9 <Offset+0x1>
    1d4a:	40 93 ea 01 	sts	0x01EA, r20	; 0x8001ea <Offset+0x2>
    1d4e:	50 93 eb 01 	sts	0x01EB, r21	; 0x8001eb <Offset+0x3>
    1d52:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <Offset+0x4>
    1d56:	70 93 ed 01 	sts	0x01ED, r23	; 0x8001ed <Offset+0x5>
    1d5a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Offset+0x6>
    1d5e:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Offset+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:288
			Sensitivity = (int64_t)sensorCoeffs[1] * 65536 + (sensorCoeffs[3] * (int64_t)dT) / 128;
    1d62:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <sensorCoeffs+0x6>
    1d66:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <sensorCoeffs+0x7>
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d70:	3c 81       	ldd	r19, Y+4	; 0x04
    1d72:	4d 81       	ldd	r20, Y+5	; 0x05
    1d74:	5e 81       	ldd	r21, Y+6	; 0x06
    1d76:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    1d7a:	f2 2e       	mov	r15, r18
    1d7c:	03 2f       	mov	r16, r19
    1d7e:	14 2f       	mov	r17, r20
    1d80:	b5 2f       	mov	r27, r21
    1d82:	f6 2f       	mov	r31, r22
    1d84:	e7 2f       	mov	r30, r23
    1d86:	d8 2e       	mov	r13, r24
    1d88:	e9 2e       	mov	r14, r25
    1d8a:	a0 e0       	ldi	r26, 0x00	; 0
    1d8c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    1d90:	5c f4       	brge	.+22     	; 0x1da8 <main+0x720>
    1d92:	af e7       	ldi	r26, 0x7F	; 127
    1d94:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__adddi3_s8>
    1d98:	f2 2e       	mov	r15, r18
    1d9a:	03 2f       	mov	r16, r19
    1d9c:	14 2f       	mov	r17, r20
    1d9e:	b5 2f       	mov	r27, r21
    1da0:	f6 2f       	mov	r31, r22
    1da2:	e7 2f       	mov	r30, r23
    1da4:	d8 2e       	mov	r13, r24
    1da6:	e9 2e       	mov	r14, r25
    1da8:	2f 2d       	mov	r18, r15
    1daa:	30 2f       	mov	r19, r16
    1dac:	41 2f       	mov	r20, r17
    1dae:	5b 2f       	mov	r21, r27
    1db0:	6f 2f       	mov	r22, r31
    1db2:	7e 2f       	mov	r23, r30
    1db4:	8d 2d       	mov	r24, r13
    1db6:	9e 2d       	mov	r25, r14
    1db8:	07 e0       	ldi	r16, 0x07	; 7
    1dba:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    1dbe:	39 01       	movw	r6, r18
    1dc0:	4a 01       	movw	r8, r20
    1dc2:	b6 2f       	mov	r27, r22
    1dc4:	a7 2f       	mov	r26, r23
    1dc6:	f8 2f       	mov	r31, r24
    1dc8:	e9 2f       	mov	r30, r25
    1dca:	a0 90 0a 02 	lds	r10, 0x020A	; 0x80020a <sensorCoeffs+0x2>
    1dce:	b0 90 0b 02 	lds	r11, 0x020B	; 0x80020b <sensorCoeffs+0x3>
    1dd2:	95 01       	movw	r18, r10
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	00 e1       	ldi	r16, 0x10	; 16
    1de2:	65 c1       	rjmp	.+714    	; 0x20ae <main+0xa26>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:181
	// of 1, 0.6, 0.4, 0.3, 0.2 respectively. Higher resolutions take longer
	// to read.
	if (_Resolution == 256){
		D1 = MS_5803_ADC(CMD_ADC_D1 + CMD_ADC_256); // read raw pressure
		D2 = MS_5803_ADC(CMD_ADC_D2 + CMD_ADC_256); // read raw temperature	
	} else if (_Resolution == 512) {
    1de4:	81 15       	cp	r24, r1
    1de6:	02 e0       	ldi	r16, 0x02	; 2
    1de8:	90 07       	cpc	r25, r16
    1dea:	69 f4       	brne	.+26     	; 0x1e06 <main+0x77e>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:182
		D1 = MS_5803_ADC(CMD_ADC_D1 + CMD_ADC_512); // read raw pressure
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]>
    1df2:	60 93 5d 03 	sts	0x035D, r22	; 0x80035d <pressure_sensor+0x8>
    1df6:	70 93 5e 03 	sts	0x035E, r23	; 0x80035e <pressure_sensor+0x9>
    1dfa:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <pressure_sensor+0xa>
    1dfe:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <pressure_sensor+0xb>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:183
		D2 = MS_5803_ADC(CMD_ADC_D2 + CMD_ADC_512); // read raw temperature		
    1e02:	82 e1       	ldi	r24, 0x12	; 18
    1e04:	38 ce       	rjmp	.-912    	; 0x1a76 <main+0x3ee>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:184
	} else if (_Resolution == 1024) {
    1e06:	81 15       	cp	r24, r1
    1e08:	14 e0       	ldi	r17, 0x04	; 4
    1e0a:	91 07       	cpc	r25, r17
    1e0c:	69 f4       	brne	.+26     	; 0x1e28 <main+0x7a0>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:185
		D1 = MS_5803_ADC(CMD_ADC_D1 + CMD_ADC_1024); // read raw pressure
    1e0e:	84 e0       	ldi	r24, 0x04	; 4
    1e10:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]>
    1e14:	60 93 5d 03 	sts	0x035D, r22	; 0x80035d <pressure_sensor+0x8>
    1e18:	70 93 5e 03 	sts	0x035E, r23	; 0x80035e <pressure_sensor+0x9>
    1e1c:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <pressure_sensor+0xa>
    1e20:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <pressure_sensor+0xb>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:186
		D2 = MS_5803_ADC(CMD_ADC_D2 + CMD_ADC_1024); // read raw temperature
    1e24:	84 e1       	ldi	r24, 0x14	; 20
    1e26:	27 ce       	rjmp	.-946    	; 0x1a76 <main+0x3ee>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:187
	} else if (_Resolution == 2048) {
    1e28:	81 15       	cp	r24, r1
    1e2a:	28 e0       	ldi	r18, 0x08	; 8
    1e2c:	92 07       	cpc	r25, r18
    1e2e:	69 f4       	brne	.+26     	; 0x1e4a <main+0x7c2>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:188
		D1 = MS_5803_ADC(CMD_ADC_D1 + CMD_ADC_2048); // read raw pressure
    1e30:	86 e0       	ldi	r24, 0x06	; 6
    1e32:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]>
    1e36:	60 93 5d 03 	sts	0x035D, r22	; 0x80035d <pressure_sensor+0x8>
    1e3a:	70 93 5e 03 	sts	0x035E, r23	; 0x80035e <pressure_sensor+0x9>
    1e3e:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <pressure_sensor+0xa>
    1e42:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <pressure_sensor+0xb>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:189
		D2 = MS_5803_ADC(CMD_ADC_D2 + CMD_ADC_2048); // read raw temperature
    1e46:	86 e1       	ldi	r24, 0x16	; 22
    1e48:	16 ce       	rjmp	.-980    	; 0x1a76 <main+0x3ee>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:190
	} else if (_Resolution == 4096) {
    1e4a:	81 15       	cp	r24, r1
    1e4c:	90 41       	sbci	r25, 0x10	; 16
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <main+0x7ca>
    1e50:	1c ce       	rjmp	.-968    	; 0x1a8a <main+0x402>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:191
		D1 = MS_5803_ADC(CMD_ADC_D1 + CMD_ADC_4096); // read raw pressure
    1e52:	88 e0       	ldi	r24, 0x08	; 8
    1e54:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <MS_5803::MS_5803_ADC(char) [clone .constprop.61]>
    1e58:	60 93 5d 03 	sts	0x035D, r22	; 0x80035d <pressure_sensor+0x8>
    1e5c:	70 93 5e 03 	sts	0x035E, r23	; 0x80035e <pressure_sensor+0x9>
    1e60:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <pressure_sensor+0xa>
    1e64:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <pressure_sensor+0xb>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:192
		D2 = MS_5803_ADC(CMD_ADC_D2 + CMD_ADC_4096); // read raw temperature
    1e68:	88 e1       	ldi	r24, 0x18	; 24
    1e6a:	05 ce       	rjmp	.-1014   	; 0x1a76 <main+0x3ee>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:217
    // I have tried to insert the fixed values wherever possible 
    // (i.e. 2^31 is hard coded as 2147483648).
    if (T < 2000) { // If temperature is below 20.0C
		switch(_Version){
			case 14:
				T2 = 3 * ((int64_t)dT * dT) / POW_2_33 ;
    1e6c:	6b 81       	ldd	r22, Y+3	; 0x03
    1e6e:	7c 81       	ldd	r23, Y+4	; 0x04
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	9b 01       	movw	r18, r22
    1e76:	ac 01       	movw	r20, r24
    1e78:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    1e7c:	e3 e0       	ldi	r30, 0x03	; 3
    1e7e:	ae 2e       	mov	r10, r30
    1e80:	b1 2c       	mov	r11, r1
    1e82:	c1 2c       	mov	r12, r1
    1e84:	d1 2c       	mov	r13, r1
    1e86:	e1 2c       	mov	r14, r1
    1e88:	f1 2c       	mov	r15, r1
    1e8a:	00 e0       	ldi	r16, 0x00	; 0
    1e8c:	10 e0       	ldi	r17, 0x00	; 0
    1e8e:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <__muldi3>
    1e92:	01 e2       	ldi	r16, 0x21	; 33
    1e94:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__lshrdi3>
    1e98:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <T2>
    1e9c:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <T2+0x1>
    1ea0:	40 93 02 02 	sts	0x0202, r20	; 0x800202 <T2+0x2>
    1ea4:	50 93 03 02 	sts	0x0203, r21	; 0x800203 <T2+0x3>
    1ea8:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <T2+0x4>
    1eac:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <T2+0x5>
    1eb0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <T2+0x6>
    1eb4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <T2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:219
				T2 = (int32_t)T2; // recast as signed 32bit integer
				OFF2 = 3 * ((T-2000) * (T-2000)) / 2 ;
    1eb8:	a2 01       	movw	r20, r4
    1eba:	91 01       	movw	r18, r2
    1ebc:	c2 01       	movw	r24, r4
    1ebe:	b1 01       	movw	r22, r2
    1ec0:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__mulsi3>
    1ec4:	6b 01       	movw	r12, r22
    1ec6:	a3 e0       	ldi	r26, 0x03	; 3
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	ac 01       	movw	r20, r24
    1ecc:	9b 01       	movw	r18, r22
    1ece:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__muluhisi3>
    1ed2:	8b 01       	movw	r16, r22
    1ed4:	9c 01       	movw	r18, r24
    1ed6:	35 95       	asr	r19
    1ed8:	27 95       	ror	r18
    1eda:	17 95       	ror	r17
    1edc:	07 95       	ror	r16
    1ede:	00 93 f8 01 	sts	0x01F8, r16	; 0x8001f8 <OFF2>
    1ee2:	10 93 f9 01 	sts	0x01F9, r17	; 0x8001f9 <OFF2+0x1>
    1ee6:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <OFF2+0x2>
    1eea:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <OFF2+0x3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bb 0f       	add	r27, r27
    1ef4:	88 0b       	sbc	r24, r24
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	dc 01       	movw	r26, r24
    1efa:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <OFF2+0x4>
    1efe:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <OFF2+0x5>
    1f02:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <OFF2+0x6>
    1f06:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <OFF2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:220
				Sens2 = 5 * ((T-2000) * (T-2000)) / 8 ; 	
    1f0a:	a5 e0       	ldi	r26, 0x05	; 5
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	96 01       	movw	r18, r12
    1f10:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__muluhisi3>
    1f14:	8b 01       	movw	r16, r22
    1f16:	9c 01       	movw	r18, r24
    1f18:	43 e0       	ldi	r20, 0x03	; 3
    1f1a:	35 95       	asr	r19
    1f1c:	27 95       	ror	r18
    1f1e:	17 95       	ror	r17
    1f20:	07 95       	ror	r16
    1f22:	4a 95       	dec	r20
    1f24:	d1 f7       	brne	.-12     	; 0x1f1a <main+0x892>
    1f26:	00 93 f0 01 	sts	0x01F0, r16	; 0x8001f0 <Sens2>
    1f2a:	10 93 f1 01 	sts	0x01F1, r17	; 0x8001f1 <Sens2+0x1>
    1f2e:	20 93 f2 01 	sts	0x01F2, r18	; 0x8001f2 <Sens2+0x2>
    1f32:	30 93 f3 01 	sts	0x01F3, r19	; 0x8001f3 <Sens2+0x3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bb 0f       	add	r27, r27
    1f3c:	88 0b       	sbc	r24, r24
    1f3e:	98 2f       	mov	r25, r24
    1f40:	dc 01       	movw	r26, r24
    1f42:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <Sens2+0x4>
    1f46:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <Sens2+0x5>
    1f4a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <Sens2+0x6>
    1f4e:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Sens2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:257
				break;
		}
    }
    
    // Additional compensation for very low temperatures (< -15C)
    if (T < -1500) {
    1f52:	0c 85       	ldd	r16, Y+12	; 0x0c
    1f54:	1d 85       	ldd	r17, Y+13	; 0x0d
    1f56:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f58:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f5a:	04 32       	cpi	r16, 0x24	; 36
    1f5c:	1a 4f       	sbci	r17, 0xFA	; 250
    1f5e:	2f 4f       	sbci	r18, 0xFF	; 255
    1f60:	3f 4f       	sbci	r19, 0xFF	; 255
    1f62:	0c f4       	brge	.+2      	; 0x1f66 <main+0x8de>
    1f64:	97 c3       	rjmp	.+1838   	; 0x2694 <main+0x100c>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:279
    // Notice lots of casts to int64_t to ensure that the 
    // multiplication operations don't overflow the original 16 bit and 32 bit
    // integers
	switch(_Version){
		case 14:
			Offset = (int64_t)sensorCoeffs[2] * 65536 + (sensorCoeffs[4] * (int64_t)dT) / 128;
    1f66:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <sensorCoeffs+0x8>
    1f6a:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <sensorCoeffs+0x9>
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	2b 81       	ldd	r18, Y+3	; 0x03
    1f74:	3c 81       	ldd	r19, Y+4	; 0x04
    1f76:	4d 81       	ldd	r20, Y+5	; 0x05
    1f78:	5e 81       	ldd	r21, Y+6	; 0x06
    1f7a:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    1f7e:	f2 2e       	mov	r15, r18
    1f80:	03 2f       	mov	r16, r19
    1f82:	14 2f       	mov	r17, r20
    1f84:	b5 2f       	mov	r27, r21
    1f86:	f6 2f       	mov	r31, r22
    1f88:	e7 2f       	mov	r30, r23
    1f8a:	d8 2e       	mov	r13, r24
    1f8c:	e9 2e       	mov	r14, r25
    1f8e:	a0 e0       	ldi	r26, 0x00	; 0
    1f90:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    1f94:	5c f4       	brge	.+22     	; 0x1fac <main+0x924>
    1f96:	af e7       	ldi	r26, 0x7F	; 127
    1f98:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__adddi3_s8>
    1f9c:	f2 2e       	mov	r15, r18
    1f9e:	03 2f       	mov	r16, r19
    1fa0:	14 2f       	mov	r17, r20
    1fa2:	b5 2f       	mov	r27, r21
    1fa4:	f6 2f       	mov	r31, r22
    1fa6:	e7 2f       	mov	r30, r23
    1fa8:	d8 2e       	mov	r13, r24
    1faa:	e9 2e       	mov	r14, r25
    1fac:	2f 2d       	mov	r18, r15
    1fae:	30 2f       	mov	r19, r16
    1fb0:	41 2f       	mov	r20, r17
    1fb2:	5b 2f       	mov	r21, r27
    1fb4:	6f 2f       	mov	r22, r31
    1fb6:	7e 2f       	mov	r23, r30
    1fb8:	8d 2d       	mov	r24, r13
    1fba:	9e 2d       	mov	r25, r14
    1fbc:	07 e0       	ldi	r16, 0x07	; 7
    1fbe:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    1fc2:	39 01       	movw	r6, r18
    1fc4:	4a 01       	movw	r8, r20
    1fc6:	b6 2f       	mov	r27, r22
    1fc8:	a7 2f       	mov	r26, r23
    1fca:	f8 2f       	mov	r31, r24
    1fcc:	e9 2f       	mov	r30, r25
    1fce:	a0 90 0c 02 	lds	r10, 0x020C	; 0x80020c <sensorCoeffs+0x4>
    1fd2:	b0 90 0d 02 	lds	r11, 0x020D	; 0x80020d <sensorCoeffs+0x5>
    1fd6:	95 01       	movw	r18, r10
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	00 e1       	ldi	r16, 0x10	; 16
    1fe6:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__ashldi3>
    1fea:	59 01       	movw	r10, r18
    1fec:	6a 01       	movw	r12, r20
    1fee:	7b 01       	movw	r14, r22
    1ff0:	8c 01       	movw	r16, r24
    1ff2:	93 01       	movw	r18, r6
    1ff4:	a4 01       	movw	r20, r8
    1ff6:	6b 2f       	mov	r22, r27
    1ff8:	7a 2f       	mov	r23, r26
    1ffa:	8f 2f       	mov	r24, r31
    1ffc:	9e 2f       	mov	r25, r30
    1ffe:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__adddi3>
    2002:	20 93 e8 01 	sts	0x01E8, r18	; 0x8001e8 <Offset>
    2006:	30 93 e9 01 	sts	0x01E9, r19	; 0x8001e9 <Offset+0x1>
    200a:	40 93 ea 01 	sts	0x01EA, r20	; 0x8001ea <Offset+0x2>
    200e:	50 93 eb 01 	sts	0x01EB, r21	; 0x8001eb <Offset+0x3>
    2012:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <Offset+0x4>
    2016:	70 93 ed 01 	sts	0x01ED, r23	; 0x8001ed <Offset+0x5>
    201a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Offset+0x6>
    201e:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Offset+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:280
			Sensitivity = (int64_t)sensorCoeffs[1] * 32768 + (sensorCoeffs[3] * (int64_t)dT) / 256;	
    2022:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <sensorCoeffs+0x6>
    2026:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <sensorCoeffs+0x7>
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	2b 81       	ldd	r18, Y+3	; 0x03
    2030:	3c 81       	ldd	r19, Y+4	; 0x04
    2032:	4d 81       	ldd	r20, Y+5	; 0x05
    2034:	5e 81       	ldd	r21, Y+6	; 0x06
    2036:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    203a:	f2 2e       	mov	r15, r18
    203c:	03 2f       	mov	r16, r19
    203e:	14 2f       	mov	r17, r20
    2040:	b5 2f       	mov	r27, r21
    2042:	f6 2f       	mov	r31, r22
    2044:	e7 2f       	mov	r30, r23
    2046:	d8 2e       	mov	r13, r24
    2048:	e9 2e       	mov	r14, r25
    204a:	a0 e0       	ldi	r26, 0x00	; 0
    204c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    2050:	84 f4       	brge	.+32     	; 0x2072 <main+0x9ea>
    2052:	21 50       	subi	r18, 0x01	; 1
    2054:	3f 4f       	sbci	r19, 0xFF	; 255
    2056:	4f 4f       	sbci	r20, 0xFF	; 255
    2058:	5f 4f       	sbci	r21, 0xFF	; 255
    205a:	6f 4f       	sbci	r22, 0xFF	; 255
    205c:	7f 4f       	sbci	r23, 0xFF	; 255
    205e:	8f 4f       	sbci	r24, 0xFF	; 255
    2060:	9f 4f       	sbci	r25, 0xFF	; 255
    2062:	f2 2e       	mov	r15, r18
    2064:	03 2f       	mov	r16, r19
    2066:	14 2f       	mov	r17, r20
    2068:	b5 2f       	mov	r27, r21
    206a:	f6 2f       	mov	r31, r22
    206c:	e7 2f       	mov	r30, r23
    206e:	d8 2e       	mov	r13, r24
    2070:	e9 2e       	mov	r14, r25
    2072:	2f 2d       	mov	r18, r15
    2074:	30 2f       	mov	r19, r16
    2076:	41 2f       	mov	r20, r17
    2078:	5b 2f       	mov	r21, r27
    207a:	6f 2f       	mov	r22, r31
    207c:	7e 2f       	mov	r23, r30
    207e:	8d 2d       	mov	r24, r13
    2080:	9e 2d       	mov	r25, r14
    2082:	08 e0       	ldi	r16, 0x08	; 8
    2084:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    2088:	39 01       	movw	r6, r18
    208a:	4a 01       	movw	r8, r20
    208c:	b6 2f       	mov	r27, r22
    208e:	a7 2f       	mov	r26, r23
    2090:	f8 2f       	mov	r31, r24
    2092:	e9 2f       	mov	r30, r25
    2094:	a0 90 0a 02 	lds	r10, 0x020A	; 0x80020a <sensorCoeffs+0x2>
    2098:	b0 90 0b 02 	lds	r11, 0x020B	; 0x80020b <sensorCoeffs+0x3>
    209c:	d1 2c       	mov	r13, r1
    209e:	c1 2c       	mov	r12, r1
    20a0:	95 01       	movw	r18, r10
    20a2:	a6 01       	movw	r20, r12
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0f e0       	ldi	r16, 0x0F	; 15
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:288
			Offset = (int64_t)sensorCoeffs[2] * 262144 + (sensorCoeffs[4] * (int64_t)dT) / 32;
			Sensitivity = (int64_t)sensorCoeffs[1] * 131072 + (sensorCoeffs[3] * (int64_t)dT) / 128;
			break;
		case 2:
			Offset = (int64_t)sensorCoeffs[2] * 131072 + (sensorCoeffs[4] * (int64_t)dT) / 64;
			Sensitivity = (int64_t)sensorCoeffs[1] * 65536 + (sensorCoeffs[3] * (int64_t)dT) / 128;
    20ae:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__ashldi3>
    20b2:	59 01       	movw	r10, r18
    20b4:	6a 01       	movw	r12, r20
    20b6:	7b 01       	movw	r14, r22
    20b8:	8c 01       	movw	r16, r24
    20ba:	93 01       	movw	r18, r6
    20bc:	a4 01       	movw	r20, r8
    20be:	6b 2f       	mov	r22, r27
    20c0:	7a 2f       	mov	r23, r26
    20c2:	8f 2f       	mov	r24, r31
    20c4:	9e 2f       	mov	r25, r30
    20c6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__adddi3>
    20ca:	20 93 e0 01 	sts	0x01E0, r18	; 0x8001e0 <Sensitivity>
    20ce:	30 93 e1 01 	sts	0x01E1, r19	; 0x8001e1 <Sensitivity+0x1>
    20d2:	40 93 e2 01 	sts	0x01E2, r20	; 0x8001e2 <Sensitivity+0x2>
    20d6:	50 93 e3 01 	sts	0x01E3, r21	; 0x8001e3 <Sensitivity+0x3>
    20da:	60 93 e4 01 	sts	0x01E4, r22	; 0x8001e4 <Sensitivity+0x4>
    20de:	70 93 e5 01 	sts	0x01E5, r23	; 0x8001e5 <Sensitivity+0x5>
    20e2:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <Sensitivity+0x6>
    20e6:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <Sensitivity+0x7>
    20ea:	58 c1       	rjmp	.+688    	; 0x239c <main+0xd14>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:223
				T2 = (int32_t)T2; // recast as signed 32bit integer
				OFF2 = 3 * ((T-2000) * (T-2000)) / 2 ;
				Sens2 = 5 * ((T-2000) * (T-2000)) / 8 ; 	
				break;
			case 5:
				T2 = 3 * ((int64_t)dT * dT)  / POW_2_33 ;
    20ec:	6b 81       	ldd	r22, Y+3	; 0x03
    20ee:	7c 81       	ldd	r23, Y+4	; 0x04
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	9e 81       	ldd	r25, Y+6	; 0x06
    20f4:	9b 01       	movw	r18, r22
    20f6:	ac 01       	movw	r20, r24
    20f8:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    20fc:	f3 e0       	ldi	r31, 0x03	; 3
    20fe:	af 2e       	mov	r10, r31
    2100:	b1 2c       	mov	r11, r1
    2102:	c1 2c       	mov	r12, r1
    2104:	d1 2c       	mov	r13, r1
    2106:	e1 2c       	mov	r14, r1
    2108:	f1 2c       	mov	r15, r1
    210a:	00 e0       	ldi	r16, 0x00	; 0
    210c:	10 e0       	ldi	r17, 0x00	; 0
    210e:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <__muldi3>
    2112:	01 e2       	ldi	r16, 0x21	; 33
    2114:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__lshrdi3>
    2118:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <T2>
    211c:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <T2+0x1>
    2120:	40 93 02 02 	sts	0x0202, r20	; 0x800202 <T2+0x2>
    2124:	50 93 03 02 	sts	0x0203, r21	; 0x800203 <T2+0x3>
    2128:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <T2+0x4>
    212c:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <T2+0x5>
    2130:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <T2+0x6>
    2134:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <T2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:225
				T2 = (int32_t)T2; // recast as signed 32bit integer
				OFF2 = 3 * ((T-2000) * (T-2000)) / 8 ;
    2138:	a2 01       	movw	r20, r4
    213a:	91 01       	movw	r18, r2
    213c:	c2 01       	movw	r24, r4
    213e:	b1 01       	movw	r22, r2
    2140:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__mulsi3>
    2144:	6b 01       	movw	r12, r22
    2146:	a3 e0       	ldi	r26, 0x03	; 3
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	ac 01       	movw	r20, r24
    214c:	9b 01       	movw	r18, r22
    214e:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__muluhisi3>
    2152:	8b 01       	movw	r16, r22
    2154:	9c 01       	movw	r18, r24
    2156:	a3 e0       	ldi	r26, 0x03	; 3
    2158:	35 95       	asr	r19
    215a:	27 95       	ror	r18
    215c:	17 95       	ror	r17
    215e:	07 95       	ror	r16
    2160:	aa 95       	dec	r26
    2162:	d1 f7       	brne	.-12     	; 0x2158 <main+0xad0>
    2164:	00 93 f8 01 	sts	0x01F8, r16	; 0x8001f8 <OFF2>
    2168:	10 93 f9 01 	sts	0x01F9, r17	; 0x8001f9 <OFF2+0x1>
    216c:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <OFF2+0x2>
    2170:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <OFF2+0x3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	bb 0f       	add	r27, r27
    217a:	88 0b       	sbc	r24, r24
    217c:	98 2f       	mov	r25, r24
    217e:	dc 01       	movw	r26, r24
    2180:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <OFF2+0x4>
    2184:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <OFF2+0x5>
    2188:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <OFF2+0x6>
    218c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <OFF2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:226
				Sens2 = 7 * ((T-2000) * (T-2000)) / 8 ;
    2190:	a7 e0       	ldi	r26, 0x07	; 7
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	96 01       	movw	r18, r12
    2196:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__muluhisi3>
    219a:	8b 01       	movw	r16, r22
    219c:	9c 01       	movw	r18, r24
    219e:	43 e0       	ldi	r20, 0x03	; 3
    21a0:	35 95       	asr	r19
    21a2:	27 95       	ror	r18
    21a4:	17 95       	ror	r17
    21a6:	07 95       	ror	r16
    21a8:	4a 95       	dec	r20
    21aa:	d1 f7       	brne	.-12     	; 0x21a0 <main+0xb18>
    21ac:	00 93 f0 01 	sts	0x01F0, r16	; 0x8001f0 <Sens2>
    21b0:	10 93 f1 01 	sts	0x01F1, r17	; 0x8001f1 <Sens2+0x1>
    21b4:	20 93 f2 01 	sts	0x01F2, r18	; 0x8001f2 <Sens2+0x2>
    21b8:	30 93 f3 01 	sts	0x01F3, r19	; 0x8001f3 <Sens2+0x3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	bb 0f       	add	r27, r27
    21c2:	88 0b       	sbc	r24, r24
    21c4:	98 2f       	mov	r25, r24
    21c6:	dc 01       	movw	r26, r24
    21c8:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <Sens2+0x4>
    21cc:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <Sens2+0x5>
    21d0:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <Sens2+0x6>
    21d4:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Sens2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:283
		case 14:
			Offset = (int64_t)sensorCoeffs[2] * 65536 + (sensorCoeffs[4] * (int64_t)dT) / 128;
			Sensitivity = (int64_t)sensorCoeffs[1] * 32768 + (sensorCoeffs[3] * (int64_t)dT) / 256;	
			break;
		case 5:
			Offset = (int64_t)sensorCoeffs[2] * 262144 + (sensorCoeffs[4] * (int64_t)dT) / 32;
    21d8:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <sensorCoeffs+0x8>
    21dc:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <sensorCoeffs+0x9>
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	2b 81       	ldd	r18, Y+3	; 0x03
    21e6:	3c 81       	ldd	r19, Y+4	; 0x04
    21e8:	4d 81       	ldd	r20, Y+5	; 0x05
    21ea:	5e 81       	ldd	r21, Y+6	; 0x06
    21ec:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    21f0:	f2 2e       	mov	r15, r18
    21f2:	03 2f       	mov	r16, r19
    21f4:	14 2f       	mov	r17, r20
    21f6:	b5 2f       	mov	r27, r21
    21f8:	f6 2f       	mov	r31, r22
    21fa:	e7 2f       	mov	r30, r23
    21fc:	d8 2e       	mov	r13, r24
    21fe:	e9 2e       	mov	r14, r25
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    2206:	5c f4       	brge	.+22     	; 0x221e <main+0xb96>
    2208:	af e1       	ldi	r26, 0x1F	; 31
    220a:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__adddi3_s8>
    220e:	f2 2e       	mov	r15, r18
    2210:	03 2f       	mov	r16, r19
    2212:	14 2f       	mov	r17, r20
    2214:	b5 2f       	mov	r27, r21
    2216:	f6 2f       	mov	r31, r22
    2218:	e7 2f       	mov	r30, r23
    221a:	d8 2e       	mov	r13, r24
    221c:	e9 2e       	mov	r14, r25
    221e:	2f 2d       	mov	r18, r15
    2220:	30 2f       	mov	r19, r16
    2222:	41 2f       	mov	r20, r17
    2224:	5b 2f       	mov	r21, r27
    2226:	6f 2f       	mov	r22, r31
    2228:	7e 2f       	mov	r23, r30
    222a:	8d 2d       	mov	r24, r13
    222c:	9e 2d       	mov	r25, r14
    222e:	05 e0       	ldi	r16, 0x05	; 5
    2230:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    2234:	39 01       	movw	r6, r18
    2236:	4a 01       	movw	r8, r20
    2238:	b6 2f       	mov	r27, r22
    223a:	a7 2f       	mov	r26, r23
    223c:	f8 2f       	mov	r31, r24
    223e:	e9 2f       	mov	r30, r25
    2240:	a0 90 0c 02 	lds	r10, 0x020C	; 0x80020c <sensorCoeffs+0x4>
    2244:	b0 90 0d 02 	lds	r11, 0x020D	; 0x80020d <sensorCoeffs+0x5>
    2248:	95 01       	movw	r18, r10
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	70 e0       	ldi	r23, 0x00	; 0
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	02 e1       	ldi	r16, 0x12	; 18
    2258:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__ashldi3>
    225c:	59 01       	movw	r10, r18
    225e:	6a 01       	movw	r12, r20
    2260:	7b 01       	movw	r14, r22
    2262:	8c 01       	movw	r16, r24
    2264:	93 01       	movw	r18, r6
    2266:	a4 01       	movw	r20, r8
    2268:	6b 2f       	mov	r22, r27
    226a:	7a 2f       	mov	r23, r26
    226c:	8f 2f       	mov	r24, r31
    226e:	9e 2f       	mov	r25, r30
    2270:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__adddi3>
    2274:	20 93 e8 01 	sts	0x01E8, r18	; 0x8001e8 <Offset>
    2278:	30 93 e9 01 	sts	0x01E9, r19	; 0x8001e9 <Offset+0x1>
    227c:	40 93 ea 01 	sts	0x01EA, r20	; 0x8001ea <Offset+0x2>
    2280:	50 93 eb 01 	sts	0x01EB, r21	; 0x8001eb <Offset+0x3>
    2284:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <Offset+0x4>
    2288:	70 93 ed 01 	sts	0x01ED, r23	; 0x8001ed <Offset+0x5>
    228c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Offset+0x6>
    2290:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Offset+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:284
			Sensitivity = (int64_t)sensorCoeffs[1] * 131072 + (sensorCoeffs[3] * (int64_t)dT) / 128;
    2294:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <sensorCoeffs+0x6>
    2298:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <sensorCoeffs+0x7>
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	2b 81       	ldd	r18, Y+3	; 0x03
    22a2:	3c 81       	ldd	r19, Y+4	; 0x04
    22a4:	4d 81       	ldd	r20, Y+5	; 0x05
    22a6:	5e 81       	ldd	r21, Y+6	; 0x06
    22a8:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    22ac:	f2 2e       	mov	r15, r18
    22ae:	03 2f       	mov	r16, r19
    22b0:	14 2f       	mov	r17, r20
    22b2:	b5 2f       	mov	r27, r21
    22b4:	f6 2f       	mov	r31, r22
    22b6:	e7 2f       	mov	r30, r23
    22b8:	d8 2e       	mov	r13, r24
    22ba:	e9 2e       	mov	r14, r25
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    22c2:	5c f4       	brge	.+22     	; 0x22da <main+0xc52>
    22c4:	af e7       	ldi	r26, 0x7F	; 127
    22c6:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__adddi3_s8>
    22ca:	f2 2e       	mov	r15, r18
    22cc:	03 2f       	mov	r16, r19
    22ce:	14 2f       	mov	r17, r20
    22d0:	b5 2f       	mov	r27, r21
    22d2:	f6 2f       	mov	r31, r22
    22d4:	e7 2f       	mov	r30, r23
    22d6:	d8 2e       	mov	r13, r24
    22d8:	e9 2e       	mov	r14, r25
    22da:	2f 2d       	mov	r18, r15
    22dc:	30 2f       	mov	r19, r16
    22de:	41 2f       	mov	r20, r17
    22e0:	5b 2f       	mov	r21, r27
    22e2:	6f 2f       	mov	r22, r31
    22e4:	7e 2f       	mov	r23, r30
    22e6:	8d 2d       	mov	r24, r13
    22e8:	9e 2d       	mov	r25, r14
    22ea:	07 e0       	ldi	r16, 0x07	; 7
    22ec:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    22f0:	39 01       	movw	r6, r18
    22f2:	4a 01       	movw	r8, r20
    22f4:	b6 2f       	mov	r27, r22
    22f6:	a7 2f       	mov	r26, r23
    22f8:	f8 2f       	mov	r31, r24
    22fa:	e9 2f       	mov	r30, r25
    22fc:	a0 90 0a 02 	lds	r10, 0x020A	; 0x80020a <sensorCoeffs+0x2>
    2300:	b0 90 0b 02 	lds	r11, 0x020B	; 0x80020b <sensorCoeffs+0x3>
    2304:	95 01       	movw	r18, r10
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	01 e1       	ldi	r16, 0x11	; 17
    2314:	cc ce       	rjmp	.-616    	; 0x20ae <main+0xa26>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:236
				OFF2 = (61 * ((T-2000) * (T-2000))) / 16 ;
				Sens2 = 2 * ((T-2000) * (T-2000)) ;
				break;
		}
    } else { // if T is > 2000 (20.0C)
		switch(_Version){
    2316:	5b 85       	ldd	r21, Y+11	; 0x0b
    2318:	55 30       	cpi	r21, 0x05	; 5
    231a:	31 f0       	breq	.+12     	; 0x2328 <main+0xca0>
    231c:	5e 30       	cpi	r21, 0x0E	; 14
    231e:	09 f4       	brne	.+2      	; 0x2322 <main+0xc9a>
    2320:	4f c1       	rjmp	.+670    	; 0x25c0 <main+0xf38>
    2322:	52 30       	cpi	r21, 0x02	; 2
    2324:	09 f0       	breq	.+2      	; 0x2328 <main+0xca0>
    2326:	a8 c1       	rjmp	.+848    	; 0x2678 <main+0xff0>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:244
				T2 = (int32_t)T2; // recast as signed 32bit integer
				OFF2 = 1 * ((T-2000) * (T-2000)) / 16;
				Sens2 = 0;
				break;
			case 5:
				T2 = 0;
    2328:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <T2>
    232c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <T2+0x1>
    2330:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <T2+0x2>
    2334:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <T2+0x3>
    2338:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <T2+0x4>
    233c:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <T2+0x5>
    2340:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <T2+0x6>
    2344:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <T2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:245
				OFF2 = 0;
    2348:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <OFF2>
    234c:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <OFF2+0x1>
    2350:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <OFF2+0x2>
    2354:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <OFF2+0x3>
    2358:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <OFF2+0x4>
    235c:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <OFF2+0x5>
    2360:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <OFF2+0x6>
    2364:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <OFF2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:246
				Sens2 = 0;
    2368:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <Sens2>
    236c:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <Sens2+0x1>
    2370:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <Sens2+0x2>
    2374:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <Sens2+0x3>
    2378:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <Sens2+0x4>
    237c:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <Sens2+0x5>
    2380:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <Sens2+0x6>
    2384:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <Sens2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:277
    
    // Calculate initial Offset and Sensitivity
    // Notice lots of casts to int64_t to ensure that the 
    // multiplication operations don't overflow the original 16 bit and 32 bit
    // integers
	switch(_Version){
    2388:	eb 85       	ldd	r30, Y+11	; 0x0b
    238a:	e5 30       	cpi	r30, 0x05	; 5
    238c:	09 f4       	brne	.+2      	; 0x2390 <main+0xd08>
    238e:	24 cf       	rjmp	.-440    	; 0x21d8 <main+0xb50>
    2390:	ee 30       	cpi	r30, 0x0E	; 14
    2392:	09 f4       	brne	.+2      	; 0x2396 <main+0xd0e>
    2394:	e8 cd       	rjmp	.-1072   	; 0x1f66 <main+0x8de>
    2396:	e2 30       	cpi	r30, 0x02	; 2
    2398:	09 f4       	brne	.+2      	; 0x239c <main+0xd14>
    239a:	85 cc       	rjmp	.-1782   	; 0x1ca6 <main+0x61e>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:294
			break;
	}
  
    // Adjust T, Offset, Sensitivity values based on the 2nd order 
    // temperature correction above.
    T = T - T2; // both should be int32_t
    239c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <T2>
    23a0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <T2+0x1>
    23a4:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <T2+0x2>
    23a8:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <T2+0x3>
    23ac:	0c 85       	ldd	r16, Y+12	; 0x0c
    23ae:	1d 85       	ldd	r17, Y+13	; 0x0d
    23b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    23b2:	3f 85       	ldd	r19, Y+15	; 0x0f
    23b4:	08 1b       	sub	r16, r24
    23b6:	19 0b       	sbc	r17, r25
    23b8:	2a 0b       	sbc	r18, r26
    23ba:	3b 0b       	sbc	r19, r27
    23bc:	0c 87       	std	Y+12, r16	; 0x0c
    23be:	1d 87       	std	Y+13, r17	; 0x0d
    23c0:	2e 87       	std	Y+14, r18	; 0x0e
    23c2:	3f 87       	std	Y+15, r19	; 0x0f
    23c4:	00 93 59 03 	sts	0x0359, r16	; 0x800359 <pressure_sensor+0x4>
    23c8:	10 93 5a 03 	sts	0x035A, r17	; 0x80035a <pressure_sensor+0x5>
    23cc:	20 93 5b 03 	sts	0x035B, r18	; 0x80035b <pressure_sensor+0x6>
    23d0:	30 93 5c 03 	sts	0x035C, r19	; 0x80035c <pressure_sensor+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:295
    Offset = Offset - OFF2; // both should be int64_t
    23d4:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <Offset>
    23d8:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <Offset+0x1>
    23dc:	40 91 ea 01 	lds	r20, 0x01EA	; 0x8001ea <Offset+0x2>
    23e0:	50 91 eb 01 	lds	r21, 0x01EB	; 0x8001eb <Offset+0x3>
    23e4:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <Offset+0x4>
    23e8:	70 91 ed 01 	lds	r23, 0x01ED	; 0x8001ed <Offset+0x5>
    23ec:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <Offset+0x6>
    23f0:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <Offset+0x7>
    23f4:	a0 90 f8 01 	lds	r10, 0x01F8	; 0x8001f8 <OFF2>
    23f8:	b0 90 f9 01 	lds	r11, 0x01F9	; 0x8001f9 <OFF2+0x1>
    23fc:	c0 90 fa 01 	lds	r12, 0x01FA	; 0x8001fa <OFF2+0x2>
    2400:	d0 90 fb 01 	lds	r13, 0x01FB	; 0x8001fb <OFF2+0x3>
    2404:	e0 90 fc 01 	lds	r14, 0x01FC	; 0x8001fc <OFF2+0x4>
    2408:	f0 90 fd 01 	lds	r15, 0x01FD	; 0x8001fd <OFF2+0x5>
    240c:	00 91 fe 01 	lds	r16, 0x01FE	; 0x8001fe <OFF2+0x6>
    2410:	10 91 ff 01 	lds	r17, 0x01FF	; 0x8001ff <OFF2+0x7>
    2414:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__subdi3>
    2418:	72 2e       	mov	r7, r18
    241a:	63 2e       	mov	r6, r19
    241c:	54 2e       	mov	r5, r20
    241e:	45 2e       	mov	r4, r21
    2420:	96 2e       	mov	r9, r22
    2422:	87 2e       	mov	r8, r23
    2424:	38 2e       	mov	r3, r24
    2426:	29 2e       	mov	r2, r25
    2428:	20 93 e8 01 	sts	0x01E8, r18	; 0x8001e8 <Offset>
    242c:	30 93 e9 01 	sts	0x01E9, r19	; 0x8001e9 <Offset+0x1>
    2430:	40 93 ea 01 	sts	0x01EA, r20	; 0x8001ea <Offset+0x2>
    2434:	50 93 eb 01 	sts	0x01EB, r21	; 0x8001eb <Offset+0x3>
    2438:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <Offset+0x4>
    243c:	70 93 ed 01 	sts	0x01ED, r23	; 0x8001ed <Offset+0x5>
    2440:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <Offset+0x6>
    2444:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <Offset+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:296
    Sensitivity = Sensitivity - Sens2; // both should be int64_t
    2448:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <Sensitivity>
    244c:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <Sensitivity+0x1>
    2450:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <Sensitivity+0x2>
    2454:	50 91 e3 01 	lds	r21, 0x01E3	; 0x8001e3 <Sensitivity+0x3>
    2458:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <Sensitivity+0x4>
    245c:	70 91 e5 01 	lds	r23, 0x01E5	; 0x8001e5 <Sensitivity+0x5>
    2460:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <Sensitivity+0x6>
    2464:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <Sensitivity+0x7>
    2468:	a0 90 f0 01 	lds	r10, 0x01F0	; 0x8001f0 <Sens2>
    246c:	b0 90 f1 01 	lds	r11, 0x01F1	; 0x8001f1 <Sens2+0x1>
    2470:	c0 90 f2 01 	lds	r12, 0x01F2	; 0x8001f2 <Sens2+0x2>
    2474:	d0 90 f3 01 	lds	r13, 0x01F3	; 0x8001f3 <Sens2+0x3>
    2478:	e0 90 f4 01 	lds	r14, 0x01F4	; 0x8001f4 <Sens2+0x4>
    247c:	f0 90 f5 01 	lds	r15, 0x01F5	; 0x8001f5 <Sens2+0x5>
    2480:	00 91 f6 01 	lds	r16, 0x01F6	; 0x8001f6 <Sens2+0x6>
    2484:	10 91 f7 01 	lds	r17, 0x01F7	; 0x8001f7 <Sens2+0x7>
    2488:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__subdi3>
    248c:	59 01       	movw	r10, r18
    248e:	6a 01       	movw	r12, r20
    2490:	7b 01       	movw	r14, r22
    2492:	8c 01       	movw	r16, r24
    2494:	20 93 e0 01 	sts	0x01E0, r18	; 0x8001e0 <Sensitivity>
    2498:	b0 92 e1 01 	sts	0x01E1, r11	; 0x8001e1 <Sensitivity+0x1>
    249c:	40 93 e2 01 	sts	0x01E2, r20	; 0x8001e2 <Sensitivity+0x2>
    24a0:	d0 92 e3 01 	sts	0x01E3, r13	; 0x8001e3 <Sensitivity+0x3>
    24a4:	60 93 e4 01 	sts	0x01E4, r22	; 0x8001e4 <Sensitivity+0x4>
    24a8:	f0 92 e5 01 	sts	0x01E5, r15	; 0x8001e5 <Sensitivity+0x5>
    24ac:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <Sensitivity+0x6>
    24b0:	10 93 e7 01 	sts	0x01E7, r17	; 0x8001e7 <Sensitivity+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:299
 
	// Convert final values to human-readable floats.
	switch(_Version){
    24b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    24b6:	25 30       	cpi	r18, 0x05	; 5
    24b8:	31 f0       	breq	.+12     	; 0x24c6 <main+0xe3e>
    24ba:	2e 30       	cpi	r18, 0x0E	; 14
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <main+0xe38>
    24be:	d5 c1       	rjmp	.+938    	; 0x286a <main+0x11e2>
    24c0:	22 30       	cpi	r18, 0x02	; 2
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <main+0xe3e>
    24c4:	51 c2       	rjmp	.+1186   	; 0x2968 <main+0x12e0>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:307
			break;
		case 5: 
			P = ((D1 * Sensitivity) / 2097152 - Offset) / 32768;
			break;
		case 2:
			P = ((D1 * Sensitivity) / 2097152 - Offset) / 32768;
    24c6:	60 91 5d 03 	lds	r22, 0x035D	; 0x80035d <pressure_sensor+0x8>
    24ca:	70 91 5e 03 	lds	r23, 0x035E	; 0x80035e <pressure_sensor+0x9>
    24ce:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <pressure_sensor+0xa>
    24d2:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <pressure_sensor+0xb>
    24d6:	ab 01       	movw	r20, r22
    24d8:	9a 01       	movw	r18, r20
    24da:	ac 01       	movw	r20, r24
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	cb 01       	movw	r24, r22
    24e2:	2b 83       	std	Y+3, r18	; 0x03
    24e4:	3c 83       	std	Y+4, r19	; 0x04
    24e6:	4d 83       	std	Y+5, r20	; 0x05
    24e8:	5e 83       	std	Y+6, r21	; 0x06
    24ea:	6f 83       	std	Y+7, r22	; 0x07
    24ec:	78 87       	std	Y+8, r23	; 0x08
    24ee:	89 87       	std	Y+9, r24	; 0x09
    24f0:	9a 87       	std	Y+10, r25	; 0x0a
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <__muldi3>
    24fe:	f2 2e       	mov	r15, r18
    2500:	03 2f       	mov	r16, r19
    2502:	14 2f       	mov	r17, r20
    2504:	b5 2f       	mov	r27, r21
    2506:	f6 2f       	mov	r31, r22
    2508:	e7 2f       	mov	r30, r23
    250a:	d8 2e       	mov	r13, r24
    250c:	e9 2e       	mov	r14, r25
    250e:	a0 e0       	ldi	r26, 0x00	; 0
    2510:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    2514:	84 f4       	brge	.+32     	; 0x2536 <main+0xeae>
    2516:	21 50       	subi	r18, 0x01	; 1
    2518:	31 09       	sbc	r19, r1
    251a:	40 4e       	sbci	r20, 0xE0	; 224
    251c:	5f 4f       	sbci	r21, 0xFF	; 255
    251e:	6f 4f       	sbci	r22, 0xFF	; 255
    2520:	7f 4f       	sbci	r23, 0xFF	; 255
    2522:	8f 4f       	sbci	r24, 0xFF	; 255
    2524:	9f 4f       	sbci	r25, 0xFF	; 255
    2526:	f2 2e       	mov	r15, r18
    2528:	03 2f       	mov	r16, r19
    252a:	14 2f       	mov	r17, r20
    252c:	b5 2f       	mov	r27, r21
    252e:	f6 2f       	mov	r31, r22
    2530:	e7 2f       	mov	r30, r23
    2532:	d8 2e       	mov	r13, r24
    2534:	e9 2e       	mov	r14, r25
    2536:	2f 2d       	mov	r18, r15
    2538:	30 2f       	mov	r19, r16
    253a:	41 2f       	mov	r20, r17
    253c:	5b 2f       	mov	r21, r27
    253e:	6f 2f       	mov	r22, r31
    2540:	7e 2f       	mov	r23, r30
    2542:	8d 2d       	mov	r24, r13
    2544:	9e 2d       	mov	r25, r14
    2546:	05 e1       	ldi	r16, 0x15	; 21
    2548:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    254c:	a7 2c       	mov	r10, r7
    254e:	b6 2c       	mov	r11, r6
    2550:	c5 2c       	mov	r12, r5
    2552:	d4 2c       	mov	r13, r4
    2554:	e9 2c       	mov	r14, r9
    2556:	f8 2c       	mov	r15, r8
    2558:	03 2d       	mov	r16, r3
    255a:	12 2d       	mov	r17, r2
    255c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__subdi3>
    2560:	f2 2e       	mov	r15, r18
    2562:	03 2f       	mov	r16, r19
    2564:	14 2f       	mov	r17, r20
    2566:	b5 2f       	mov	r27, r21
    2568:	f6 2f       	mov	r31, r22
    256a:	e7 2f       	mov	r30, r23
    256c:	d8 2e       	mov	r13, r24
    256e:	e9 2e       	mov	r14, r25
    2570:	a0 e0       	ldi	r26, 0x00	; 0
    2572:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    2576:	84 f4       	brge	.+32     	; 0x2598 <main+0xf10>
    2578:	21 50       	subi	r18, 0x01	; 1
    257a:	30 48       	sbci	r19, 0x80	; 128
    257c:	4f 4f       	sbci	r20, 0xFF	; 255
    257e:	5f 4f       	sbci	r21, 0xFF	; 255
    2580:	6f 4f       	sbci	r22, 0xFF	; 255
    2582:	7f 4f       	sbci	r23, 0xFF	; 255
    2584:	8f 4f       	sbci	r24, 0xFF	; 255
    2586:	9f 4f       	sbci	r25, 0xFF	; 255
    2588:	f2 2e       	mov	r15, r18
    258a:	03 2f       	mov	r16, r19
    258c:	14 2f       	mov	r17, r20
    258e:	b5 2f       	mov	r27, r21
    2590:	f6 2f       	mov	r31, r22
    2592:	e7 2f       	mov	r30, r23
    2594:	d8 2e       	mov	r13, r24
    2596:	e9 2e       	mov	r14, r25
    2598:	2f 2d       	mov	r18, r15
    259a:	30 2f       	mov	r19, r16
    259c:	41 2f       	mov	r20, r17
    259e:	5b 2f       	mov	r21, r27
    25a0:	6f 2f       	mov	r22, r31
    25a2:	7e 2f       	mov	r23, r30
    25a4:	8d 2d       	mov	r24, r13
    25a6:	9e 2d       	mov	r25, r14
    25a8:	0f e0       	ldi	r16, 0x0F	; 15
    25aa:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    25ae:	20 93 55 03 	sts	0x0355, r18	; 0x800355 <pressure_sensor>
    25b2:	30 93 56 03 	sts	0x0356, r19	; 0x800356 <pressure_sensor+0x1>
    25b6:	40 93 57 03 	sts	0x0357, r20	; 0x800357 <pressure_sensor+0x2>
    25ba:	50 93 58 03 	sts	0x0358, r21	; 0x800358 <pressure_sensor+0x3>
    25be:	d4 c1       	rjmp	.+936    	; 0x2968 <main+0x12e0>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:238
				break;
		}
    } else { // if T is > 2000 (20.0C)
		switch(_Version){
			case 14:
				T2 = 7 * ((uint64_t)dT * dT) / POW_2_37;
    25c0:	6b 81       	ldd	r22, Y+3	; 0x03
    25c2:	7c 81       	ldd	r23, Y+4	; 0x04
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	9b 01       	movw	r18, r22
    25ca:	ac 01       	movw	r20, r24
    25cc:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsidi3>
    25d0:	e7 e0       	ldi	r30, 0x07	; 7
    25d2:	ae 2e       	mov	r10, r30
    25d4:	b1 2c       	mov	r11, r1
    25d6:	c1 2c       	mov	r12, r1
    25d8:	d1 2c       	mov	r13, r1
    25da:	e1 2c       	mov	r14, r1
    25dc:	f1 2c       	mov	r15, r1
    25de:	00 e0       	ldi	r16, 0x00	; 0
    25e0:	10 e0       	ldi	r17, 0x00	; 0
    25e2:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <__muldi3>
    25e6:	05 e2       	ldi	r16, 0x25	; 37
    25e8:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__lshrdi3>
    25ec:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <T2>
    25f0:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <T2+0x1>
    25f4:	40 93 02 02 	sts	0x0202, r20	; 0x800202 <T2+0x2>
    25f8:	50 93 03 02 	sts	0x0203, r21	; 0x800203 <T2+0x3>
    25fc:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <T2+0x4>
    2600:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <T2+0x5>
    2604:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <T2+0x6>
    2608:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <T2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:240
				T2 = (int32_t)T2; // recast as signed 32bit integer
				OFF2 = 1 * ((T-2000) * (T-2000)) / 16;
    260c:	a2 01       	movw	r20, r4
    260e:	91 01       	movw	r18, r2
    2610:	c2 01       	movw	r24, r4
    2612:	b1 01       	movw	r22, r2
    2614:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__mulsi3>
    2618:	8b 01       	movw	r16, r22
    261a:	9c 01       	movw	r18, r24
    261c:	f4 e0       	ldi	r31, 0x04	; 4
    261e:	35 95       	asr	r19
    2620:	27 95       	ror	r18
    2622:	17 95       	ror	r17
    2624:	07 95       	ror	r16
    2626:	fa 95       	dec	r31
    2628:	d1 f7       	brne	.-12     	; 0x261e <main+0xf96>
    262a:	00 93 f8 01 	sts	0x01F8, r16	; 0x8001f8 <OFF2>
    262e:	10 93 f9 01 	sts	0x01F9, r17	; 0x8001f9 <OFF2+0x1>
    2632:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <OFF2+0x2>
    2636:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <OFF2+0x3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	bb 0f       	add	r27, r27
    2640:	88 0b       	sbc	r24, r24
    2642:	98 2f       	mov	r25, r24
    2644:	dc 01       	movw	r26, r24
    2646:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <OFF2+0x4>
    264a:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <OFF2+0x5>
    264e:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <OFF2+0x6>
    2652:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <OFF2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:241
				Sens2 = 0;
    2656:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <Sens2>
    265a:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <Sens2+0x1>
    265e:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <Sens2+0x2>
    2662:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <Sens2+0x3>
    2666:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <Sens2+0x4>
    266a:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <Sens2+0x5>
    266e:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <Sens2+0x6>
    2672:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <Sens2+0x7>
    2676:	77 cc       	rjmp	.-1810   	; 0x1f66 <main+0x8de>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:257
				break;
		}
    }
    
    // Additional compensation for very low temperatures (< -15C)
    if (T < -1500) {
    2678:	6c 85       	ldd	r22, Y+12	; 0x0c
    267a:	7d 85       	ldd	r23, Y+13	; 0x0d
    267c:	8e 85       	ldd	r24, Y+14	; 0x0e
    267e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2680:	64 32       	cpi	r22, 0x24	; 36
    2682:	7a 4f       	sbci	r23, 0xFA	; 250
    2684:	8f 4f       	sbci	r24, 0xFF	; 255
    2686:	9f 4f       	sbci	r25, 0xFF	; 255
    2688:	0c f0       	brlt	.+2      	; 0x268c <main+0x1004>
    268a:	7e ce       	rjmp	.-772    	; 0x2388 <main+0xd00>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:258
		switch(_Version){
    268c:	bb 85       	ldd	r27, Y+11	; 0x0b
    268e:	be 30       	cpi	r27, 0x0E	; 14
    2690:	09 f0       	breq	.+2      	; 0x2694 <main+0x100c>
    2692:	7a ce       	rjmp	.-780    	; 0x2388 <main+0xd00>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:260
			case 14:
				OFF2 = OFF2 + 7 * ((T+1500)*(T+1500));
    2694:	6c 85       	ldd	r22, Y+12	; 0x0c
    2696:	7d 85       	ldd	r23, Y+13	; 0x0d
    2698:	8e 85       	ldd	r24, Y+14	; 0x0e
    269a:	9f 85       	ldd	r25, Y+15	; 0x0f
    269c:	64 52       	subi	r22, 0x24	; 36
    269e:	7a 4f       	sbci	r23, 0xFA	; 250
    26a0:	8f 4f       	sbci	r24, 0xFF	; 255
    26a2:	9f 4f       	sbci	r25, 0xFF	; 255
    26a4:	9b 01       	movw	r18, r22
    26a6:	ac 01       	movw	r20, r24
    26a8:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__mulsi3>
    26ac:	2b 01       	movw	r4, r22
    26ae:	3c 01       	movw	r6, r24
    26b0:	a7 e0       	ldi	r26, 0x07	; 7
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	ac 01       	movw	r20, r24
    26b6:	9b 01       	movw	r18, r22
    26b8:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__muluhisi3>
    26bc:	6b 01       	movw	r12, r22
    26be:	7c 01       	movw	r14, r24
    26c0:	ff 0c       	add	r15, r15
    26c2:	cc 08       	sbc	r12, r12
    26c4:	dc 2c       	mov	r13, r12
    26c6:	76 01       	movw	r14, r12
    26c8:	9b 01       	movw	r18, r22
    26ca:	ac 01       	movw	r20, r24
    26cc:	6c 2d       	mov	r22, r12
    26ce:	7c 2d       	mov	r23, r12
    26d0:	8c 2d       	mov	r24, r12
    26d2:	9c 2d       	mov	r25, r12
    26d4:	a0 90 f8 01 	lds	r10, 0x01F8	; 0x8001f8 <OFF2>
    26d8:	b0 90 f9 01 	lds	r11, 0x01F9	; 0x8001f9 <OFF2+0x1>
    26dc:	c0 90 fa 01 	lds	r12, 0x01FA	; 0x8001fa <OFF2+0x2>
    26e0:	d0 90 fb 01 	lds	r13, 0x01FB	; 0x8001fb <OFF2+0x3>
    26e4:	e0 90 fc 01 	lds	r14, 0x01FC	; 0x8001fc <OFF2+0x4>
    26e8:	f0 90 fd 01 	lds	r15, 0x01FD	; 0x8001fd <OFF2+0x5>
    26ec:	00 91 fe 01 	lds	r16, 0x01FE	; 0x8001fe <OFF2+0x6>
    26f0:	10 91 ff 01 	lds	r17, 0x01FF	; 0x8001ff <OFF2+0x7>
    26f4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__adddi3>
    26f8:	20 93 f8 01 	sts	0x01F8, r18	; 0x8001f8 <OFF2>
    26fc:	30 93 f9 01 	sts	0x01F9, r19	; 0x8001f9 <OFF2+0x1>
    2700:	40 93 fa 01 	sts	0x01FA, r20	; 0x8001fa <OFF2+0x2>
    2704:	50 93 fb 01 	sts	0x01FB, r21	; 0x8001fb <OFF2+0x3>
    2708:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <OFF2+0x4>
    270c:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <OFF2+0x5>
    2710:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <OFF2+0x6>
    2714:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <OFF2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:261
				Sens2 = Sens2 + 4 * ((T+1500)*(T+1500));
    2718:	52 e0       	ldi	r21, 0x02	; 2
    271a:	44 0c       	add	r4, r4
    271c:	55 1c       	adc	r5, r5
    271e:	66 1c       	adc	r6, r6
    2720:	77 1c       	adc	r7, r7
    2722:	5a 95       	dec	r21
    2724:	d1 f7       	brne	.-12     	; 0x271a <main+0x1092>
    2726:	73 01       	movw	r14, r6
    2728:	62 01       	movw	r12, r4
    272a:	ff 0c       	add	r15, r15
    272c:	cc 08       	sbc	r12, r12
    272e:	dc 2c       	mov	r13, r12
    2730:	76 01       	movw	r14, r12
    2732:	92 01       	movw	r18, r4
    2734:	a3 01       	movw	r20, r6
    2736:	6c 2d       	mov	r22, r12
    2738:	7c 2d       	mov	r23, r12
    273a:	8c 2d       	mov	r24, r12
    273c:	9c 2d       	mov	r25, r12
    273e:	a0 90 f0 01 	lds	r10, 0x01F0	; 0x8001f0 <Sens2>
    2742:	b0 90 f1 01 	lds	r11, 0x01F1	; 0x8001f1 <Sens2+0x1>
    2746:	c0 90 f2 01 	lds	r12, 0x01F2	; 0x8001f2 <Sens2+0x2>
    274a:	d0 90 f3 01 	lds	r13, 0x01F3	; 0x8001f3 <Sens2+0x3>
    274e:	e0 90 f4 01 	lds	r14, 0x01F4	; 0x8001f4 <Sens2+0x4>
    2752:	f0 90 f5 01 	lds	r15, 0x01F5	; 0x8001f5 <Sens2+0x5>
    2756:	00 91 f6 01 	lds	r16, 0x01F6	; 0x8001f6 <Sens2+0x6>
    275a:	10 91 f7 01 	lds	r17, 0x01F7	; 0x8001f7 <Sens2+0x7>
    275e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__adddi3>
    2762:	20 93 f0 01 	sts	0x01F0, r18	; 0x8001f0 <Sens2>
    2766:	30 93 f1 01 	sts	0x01F1, r19	; 0x8001f1 <Sens2+0x1>
    276a:	40 93 f2 01 	sts	0x01F2, r20	; 0x8001f2 <Sens2+0x2>
    276e:	50 93 f3 01 	sts	0x01F3, r21	; 0x8001f3 <Sens2+0x3>
    2772:	60 93 f4 01 	sts	0x01F4, r22	; 0x8001f4 <Sens2+0x4>
    2776:	70 93 f5 01 	sts	0x01F5, r23	; 0x8001f5 <Sens2+0x5>
    277a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <Sens2+0x6>
    277e:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <Sens2+0x7>
    2782:	f1 cb       	rjmp	.-2078   	; 0x1f66 <main+0x8de>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:267
				break;
			case 5: 
				// No additional correction for 5 bar version.
				break;
			case 2:
				OFF2 = OFF2 + 20 * ((T+1500)*(T+1500));
    2784:	6c 85       	ldd	r22, Y+12	; 0x0c
    2786:	7d 85       	ldd	r23, Y+13	; 0x0d
    2788:	8e 85       	ldd	r24, Y+14	; 0x0e
    278a:	9f 85       	ldd	r25, Y+15	; 0x0f
    278c:	64 52       	subi	r22, 0x24	; 36
    278e:	7a 4f       	sbci	r23, 0xFA	; 250
    2790:	8f 4f       	sbci	r24, 0xFF	; 255
    2792:	9f 4f       	sbci	r25, 0xFF	; 255
    2794:	9b 01       	movw	r18, r22
    2796:	ac 01       	movw	r20, r24
    2798:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__mulsi3>
    279c:	6c 8b       	std	Y+20, r22	; 0x14
    279e:	7d 8b       	std	Y+21, r23	; 0x15
    27a0:	8e 8b       	std	Y+22, r24	; 0x16
    27a2:	9f 8b       	std	Y+23, r25	; 0x17
    27a4:	a4 e1       	ldi	r26, 0x14	; 20
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	9b 01       	movw	r18, r22
    27aa:	ac 01       	movw	r20, r24
    27ac:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__muluhisi3>
    27b0:	6b 01       	movw	r12, r22
    27b2:	7c 01       	movw	r14, r24
    27b4:	ff 0c       	add	r15, r15
    27b6:	cc 08       	sbc	r12, r12
    27b8:	dc 2c       	mov	r13, r12
    27ba:	76 01       	movw	r14, r12
    27bc:	9b 01       	movw	r18, r22
    27be:	ac 01       	movw	r20, r24
    27c0:	6c 2d       	mov	r22, r12
    27c2:	7c 2d       	mov	r23, r12
    27c4:	8c 2d       	mov	r24, r12
    27c6:	9c 2d       	mov	r25, r12
    27c8:	a0 90 f8 01 	lds	r10, 0x01F8	; 0x8001f8 <OFF2>
    27cc:	b0 90 f9 01 	lds	r11, 0x01F9	; 0x8001f9 <OFF2+0x1>
    27d0:	c0 90 fa 01 	lds	r12, 0x01FA	; 0x8001fa <OFF2+0x2>
    27d4:	d0 90 fb 01 	lds	r13, 0x01FB	; 0x8001fb <OFF2+0x3>
    27d8:	e4 2c       	mov	r14, r4
    27da:	f4 2c       	mov	r15, r4
    27dc:	04 2d       	mov	r16, r4
    27de:	14 2d       	mov	r17, r4
    27e0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__adddi3>
    27e4:	20 93 f8 01 	sts	0x01F8, r18	; 0x8001f8 <OFF2>
    27e8:	30 93 f9 01 	sts	0x01F9, r19	; 0x8001f9 <OFF2+0x1>
    27ec:	40 93 fa 01 	sts	0x01FA, r20	; 0x8001fa <OFF2+0x2>
    27f0:	50 93 fb 01 	sts	0x01FB, r21	; 0x8001fb <OFF2+0x3>
    27f4:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <OFF2+0x4>
    27f8:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <OFF2+0x5>
    27fc:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <OFF2+0x6>
    2800:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <OFF2+0x7>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:268
				Sens2 = Sens2 + 12 * ((T+1500)*(T+1500));
    2804:	ac e0       	ldi	r26, 0x0C	; 12
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	2c 89       	ldd	r18, Y+20	; 0x14
    280a:	3d 89       	ldd	r19, Y+21	; 0x15
    280c:	4e 89       	ldd	r20, Y+22	; 0x16
    280e:	5f 89       	ldd	r21, Y+23	; 0x17
    2810:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__muluhisi3>
    2814:	6b 01       	movw	r12, r22
    2816:	7c 01       	movw	r14, r24
    2818:	ff 0c       	add	r15, r15
    281a:	cc 08       	sbc	r12, r12
    281c:	dc 2c       	mov	r13, r12
    281e:	76 01       	movw	r14, r12
    2820:	9b 01       	movw	r18, r22
    2822:	ac 01       	movw	r20, r24
    2824:	6c 2d       	mov	r22, r12
    2826:	7c 2d       	mov	r23, r12
    2828:	8c 2d       	mov	r24, r12
    282a:	9c 2d       	mov	r25, r12
    282c:	a0 90 f0 01 	lds	r10, 0x01F0	; 0x8001f0 <Sens2>
    2830:	b0 90 f1 01 	lds	r11, 0x01F1	; 0x8001f1 <Sens2+0x1>
    2834:	c0 90 f2 01 	lds	r12, 0x01F2	; 0x8001f2 <Sens2+0x2>
    2838:	d0 90 f3 01 	lds	r13, 0x01F3	; 0x8001f3 <Sens2+0x3>
    283c:	e8 88       	ldd	r14, Y+16	; 0x10
    283e:	fe 2c       	mov	r15, r14
    2840:	0e 2d       	mov	r16, r14
    2842:	1e 2d       	mov	r17, r14
    2844:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__adddi3>
    2848:	20 93 f0 01 	sts	0x01F0, r18	; 0x8001f0 <Sens2>
    284c:	30 93 f1 01 	sts	0x01F1, r19	; 0x8001f1 <Sens2+0x1>
    2850:	40 93 f2 01 	sts	0x01F2, r20	; 0x8001f2 <Sens2+0x2>
    2854:	50 93 f3 01 	sts	0x01F3, r21	; 0x8001f3 <Sens2+0x3>
    2858:	60 93 f4 01 	sts	0x01F4, r22	; 0x8001f4 <Sens2+0x4>
    285c:	70 93 f5 01 	sts	0x01F5, r23	; 0x8001f5 <Sens2+0x5>
    2860:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <Sens2+0x6>
    2864:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <Sens2+0x7>
    2868:	1e ca       	rjmp	.-3012   	; 0x1ca6 <main+0x61e>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\MS5803/MS5803.cpp:301
    Sensitivity = Sensitivity - Sens2; // both should be int64_t
 
	// Convert final values to human-readable floats.
	switch(_Version){
		case 14:
			P = ((D1 * Sensitivity) / 2097152 - Offset) / 32768 * 10;
    286a:	40 91 5d 03 	lds	r20, 0x035D	; 0x80035d <pressure_sensor+0x8>
    286e:	50 91 5e 03 	lds	r21, 0x035E	; 0x80035e <pressure_sensor+0x9>
    2872:	60 91 5f 03 	lds	r22, 0x035F	; 0x80035f <pressure_sensor+0xa>
    2876:	70 91 60 03 	lds	r23, 0x0360	; 0x800360 <pressure_sensor+0xb>
    287a:	9a 01       	movw	r18, r20
    287c:	ab 01       	movw	r20, r22
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	cb 01       	movw	r24, r22
    2884:	2b 83       	std	Y+3, r18	; 0x03
    2886:	3c 83       	std	Y+4, r19	; 0x04
    2888:	4d 83       	std	Y+5, r20	; 0x05
    288a:	5e 83       	std	Y+6, r21	; 0x06
    288c:	6f 83       	std	Y+7, r22	; 0x07
    288e:	78 87       	std	Y+8, r23	; 0x08
    2890:	89 87       	std	Y+9, r24	; 0x09
    2892:	9a 87       	std	Y+10, r25	; 0x0a
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <__muldi3>
    28a0:	f2 2e       	mov	r15, r18
    28a2:	03 2f       	mov	r16, r19
    28a4:	14 2f       	mov	r17, r20
    28a6:	b5 2f       	mov	r27, r21
    28a8:	f6 2f       	mov	r31, r22
    28aa:	e7 2f       	mov	r30, r23
    28ac:	d8 2e       	mov	r13, r24
    28ae:	e9 2e       	mov	r14, r25
    28b0:	a0 e0       	ldi	r26, 0x00	; 0
    28b2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    28b6:	84 f4       	brge	.+32     	; 0x28d8 <main+0x1250>
    28b8:	21 50       	subi	r18, 0x01	; 1
    28ba:	31 09       	sbc	r19, r1
    28bc:	40 4e       	sbci	r20, 0xE0	; 224
    28be:	5f 4f       	sbci	r21, 0xFF	; 255
    28c0:	6f 4f       	sbci	r22, 0xFF	; 255
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	8f 4f       	sbci	r24, 0xFF	; 255
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	f2 2e       	mov	r15, r18
    28ca:	03 2f       	mov	r16, r19
    28cc:	14 2f       	mov	r17, r20
    28ce:	b5 2f       	mov	r27, r21
    28d0:	f6 2f       	mov	r31, r22
    28d2:	e7 2f       	mov	r30, r23
    28d4:	d8 2e       	mov	r13, r24
    28d6:	e9 2e       	mov	r14, r25
    28d8:	2f 2d       	mov	r18, r15
    28da:	30 2f       	mov	r19, r16
    28dc:	41 2f       	mov	r20, r17
    28de:	5b 2f       	mov	r21, r27
    28e0:	6f 2f       	mov	r22, r31
    28e2:	7e 2f       	mov	r23, r30
    28e4:	8d 2d       	mov	r24, r13
    28e6:	9e 2d       	mov	r25, r14
    28e8:	05 e1       	ldi	r16, 0x15	; 21
    28ea:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    28ee:	a7 2c       	mov	r10, r7
    28f0:	b6 2c       	mov	r11, r6
    28f2:	c5 2c       	mov	r12, r5
    28f4:	d4 2c       	mov	r13, r4
    28f6:	e9 2c       	mov	r14, r9
    28f8:	f8 2c       	mov	r15, r8
    28fa:	03 2d       	mov	r16, r3
    28fc:	12 2d       	mov	r17, r2
    28fe:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__subdi3>
    2902:	f2 2e       	mov	r15, r18
    2904:	03 2f       	mov	r16, r19
    2906:	14 2f       	mov	r17, r20
    2908:	b5 2f       	mov	r27, r21
    290a:	f6 2f       	mov	r31, r22
    290c:	e7 2f       	mov	r30, r23
    290e:	d8 2e       	mov	r13, r24
    2910:	e9 2e       	mov	r14, r25
    2912:	a0 e0       	ldi	r26, 0x00	; 0
    2914:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__cmpdi2_s8>
    2918:	84 f4       	brge	.+32     	; 0x293a <main+0x12b2>
    291a:	21 50       	subi	r18, 0x01	; 1
    291c:	30 48       	sbci	r19, 0x80	; 128
    291e:	4f 4f       	sbci	r20, 0xFF	; 255
    2920:	5f 4f       	sbci	r21, 0xFF	; 255
    2922:	6f 4f       	sbci	r22, 0xFF	; 255
    2924:	7f 4f       	sbci	r23, 0xFF	; 255
    2926:	8f 4f       	sbci	r24, 0xFF	; 255
    2928:	9f 4f       	sbci	r25, 0xFF	; 255
    292a:	f2 2e       	mov	r15, r18
    292c:	03 2f       	mov	r16, r19
    292e:	14 2f       	mov	r17, r20
    2930:	b5 2f       	mov	r27, r21
    2932:	f6 2f       	mov	r31, r22
    2934:	e7 2f       	mov	r30, r23
    2936:	d8 2e       	mov	r13, r24
    2938:	e9 2e       	mov	r14, r25
    293a:	2f 2d       	mov	r18, r15
    293c:	30 2f       	mov	r19, r16
    293e:	41 2f       	mov	r20, r17
    2940:	5b 2f       	mov	r21, r27
    2942:	6f 2f       	mov	r22, r31
    2944:	7e 2f       	mov	r23, r30
    2946:	8d 2d       	mov	r24, r13
    2948:	9e 2d       	mov	r25, r14
    294a:	0f e0       	ldi	r16, 0x0F	; 15
    294c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__ashrdi3>
    2950:	aa e0       	ldi	r26, 0x0A	; 10
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__muluhisi3>
    2958:	60 93 55 03 	sts	0x0355, r22	; 0x800355 <pressure_sensor>
    295c:	70 93 56 03 	sts	0x0356, r23	; 0x800356 <pressure_sensor+0x1>
    2960:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <pressure_sensor+0x2>
    2964:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <pressure_sensor+0x3>
loop():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:66
    //Replace our data fields with new sensor data.
    pressure_sensor.readSensor();
    data.hydro_p = pressure_sensor.getPressure(); //bar*10^-5
    2968:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <pressure_sensor>
    296c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <data+0x4>
    2970:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <pressure_sensor+0x1>
    2974:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <data+0x5>
    2978:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <pressure_sensor+0x2>
    297c:	9f 71       	andi	r25, 0x1F	; 31
    297e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <data+0x6>
    2982:	80 7e       	andi	r24, 0xE0	; 224
    2984:	89 2b       	or	r24, r25
    2986:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <data+0x6>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:67
    int32_t input = pressure_sensor.getTemperature()/10;
    298a:	8c 85       	ldd	r24, Y+12	; 0x0c
    298c:	9d 85       	ldd	r25, Y+13	; 0x0d
    298e:	6a e0       	ldi	r22, 0x0A	; 10
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__divmodhi4>
main():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:68
    data.water_temp = constrain(input,-250,250); //C*10^-1
    2996:	86 e0       	ldi	r24, 0x06	; 6
    2998:	9f ef       	ldi	r25, 0xFF	; 255
    299a:	af ef       	ldi	r26, 0xFF	; 255
    299c:	bf ef       	ldi	r27, 0xFF	; 255
loop():
    299e:	66 30       	cpi	r22, 0x06	; 6
    29a0:	5f ef       	ldi	r21, 0xFF	; 255
    29a2:	75 07       	cpc	r23, r21
    29a4:	6c f0       	brlt	.+26     	; 0x29c0 <main+0x1338>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:67
  }
  else if(request == 2){
    //Replace our data fields with new sensor data.
    pressure_sensor.readSensor();
    data.hydro_p = pressure_sensor.getPressure(); //bar*10^-5
    int32_t input = pressure_sensor.getTemperature()/10;
    29a6:	cb 01       	movw	r24, r22
    29a8:	77 0f       	add	r23, r23
    29aa:	aa 0b       	sbc	r26, r26
    29ac:	bb 0b       	sbc	r27, r27
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:68
    data.water_temp = constrain(input,-250,250); //C*10^-1
    29ae:	8b 3f       	cpi	r24, 0xFB	; 251
    29b0:	91 05       	cpc	r25, r1
    29b2:	a1 05       	cpc	r26, r1
    29b4:	b1 05       	cpc	r27, r1
    29b6:	24 f0       	brlt	.+8      	; 0x29c0 <main+0x1338>
    29b8:	8a ef       	ldi	r24, 0xFA	; 250
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e0       	ldi	r26, 0x00	; 0
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	38 2f       	mov	r19, r24
    29c2:	32 95       	swap	r19
    29c4:	33 0f       	add	r19, r19
    29c6:	30 7e       	andi	r19, 0xE0	; 224
    29c8:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <data+0xa>
    29cc:	2f 71       	andi	r18, 0x1F	; 31
    29ce:	23 2b       	or	r18, r19
    29d0:	20 93 22 02 	sts	0x0222, r18	; 0x800222 <data+0xa>
    29d4:	38 2f       	mov	r19, r24
    29d6:	36 95       	lsr	r19
    29d8:	36 95       	lsr	r19
    29da:	36 95       	lsr	r19
    29dc:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <data+0xb>
    29e0:	20 78       	andi	r18, 0x80	; 128
    29e2:	93 70       	andi	r25, 0x03	; 3
    29e4:	92 95       	swap	r25
    29e6:	99 0f       	add	r25, r25
    29e8:	90 7e       	andi	r25, 0xE0	; 224
    29ea:	82 2f       	mov	r24, r18
    29ec:	83 2b       	or	r24, r19
    29ee:	89 2b       	or	r24, r25
    29f0:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <data+0xb>
readAmbient():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:137
    @return Raw 16-bit reading value, unit-less!
*/
/**************************************************************************/

uint16_t Adafruit_VCNL4010::readAmbient(void) {
  uint8_t i = read8(VCNL4010_INTSTAT);
    29f4:	8e e8       	ldi	r24, 0x8E	; 142
    29f6:	0e 94 2a 06 	call	0xc54	; 0xc54 <Adafruit_VCNL4010::read8(unsigned char) [clone .constprop.55]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:138
  i &= ~0x40;
    29fa:	68 2f       	mov	r22, r24
    29fc:	6f 7b       	andi	r22, 0xBF	; 191
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:139
  write8(VCNL4010_INTSTAT, i);
    29fe:	8e e8       	ldi	r24, 0x8E	; 142
    2a00:	0e 94 86 05 	call	0xb0c	; 0xb0c <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:141

  write8(VCNL4010_COMMAND, VCNL4010_MEASUREAMBIENT);
    2a04:	60 e1       	ldi	r22, 0x10	; 16
    2a06:	80 e8       	ldi	r24, 0x80	; 128
    2a08:	0e 94 86 05 	call	0xb0c	; 0xb0c <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:144
  while (1) {
    // Serial.println(read8(VCNL4010_INTSTAT), HEX);
    uint8_t result = read8(VCNL4010_COMMAND);
    2a0c:	80 e8       	ldi	r24, 0x80	; 128
    2a0e:	0e 94 2a 06 	call	0xc54	; 0xc54 <Adafruit_VCNL4010::read8(unsigned char) [clone .constprop.55]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:146
    // Serial.print("Ready = 0x"); Serial.println(result, HEX);
    if (result & VCNL4010_AMBIENTREADY) {
    2a12:	86 ff       	sbrs	r24, 6
    2a14:	66 c0       	rjmp	.+204    	; 0x2ae2 <main+0x145a>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:147
      return read16(VCNL4010_AMBIENTDATA);
    2a16:	85 e8       	ldi	r24, 0x85	; 133
    2a18:	0e 94 0c 06 	call	0xc18	; 0xc18 <Adafruit_VCNL4010::read16(unsigned char) [clone .constprop.56]>
loop():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:69
    data.tuBackground = vcnl.readAmbient();
    2a1c:	38 2f       	mov	r19, r24
    2a1e:	32 95       	swap	r19
    2a20:	33 0f       	add	r19, r19
    2a22:	30 7e       	andi	r19, 0xE0	; 224
    2a24:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <data+0x6>
    2a28:	2f 71       	andi	r18, 0x1F	; 31
    2a2a:	23 2b       	or	r18, r19
    2a2c:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <data+0x6>
    2a30:	29 2f       	mov	r18, r25
    2a32:	22 95       	swap	r18
    2a34:	22 0f       	add	r18, r18
    2a36:	20 7e       	andi	r18, 0xE0	; 224
    2a38:	86 95       	lsr	r24
    2a3a:	86 95       	lsr	r24
    2a3c:	86 95       	lsr	r24
    2a3e:	82 2b       	or	r24, r18
    2a40:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <data+0x7>
    2a44:	89 2f       	mov	r24, r25
    2a46:	86 95       	lsr	r24
    2a48:	86 95       	lsr	r24
    2a4a:	86 95       	lsr	r24
    2a4c:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <data+0x8>
    2a50:	90 7e       	andi	r25, 0xE0	; 224
    2a52:	98 2b       	or	r25, r24
    2a54:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <data+0x8>
readProximity():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:113
    @return Raw 16-bit reading value, will vary with LED current, unit-less!
*/
/**************************************************************************/

uint16_t Adafruit_VCNL4010::readProximity(void) {
  uint8_t i = read8(VCNL4010_INTSTAT);
    2a58:	8e e8       	ldi	r24, 0x8E	; 142
    2a5a:	0e 94 2a 06 	call	0xc54	; 0xc54 <Adafruit_VCNL4010::read8(unsigned char) [clone .constprop.55]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:114
  i &= ~0x80;
    2a5e:	68 2f       	mov	r22, r24
    2a60:	6f 77       	andi	r22, 0x7F	; 127
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:115
  write8(VCNL4010_INTSTAT, i);
    2a62:	8e e8       	ldi	r24, 0x8E	; 142
    2a64:	0e 94 86 05 	call	0xb0c	; 0xb0c <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:117

  write8(VCNL4010_COMMAND, VCNL4010_MEASUREPROXIMITY);
    2a68:	68 e0       	ldi	r22, 0x08	; 8
    2a6a:	80 e8       	ldi	r24, 0x80	; 128
    2a6c:	0e 94 86 05 	call	0xb0c	; 0xb0c <Adafruit_VCNL4010::write8(unsigned char, unsigned char) [clone .constprop.54]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:120
  while (1) {
    // Serial.println(read8(VCNL4010_INTSTAT), HEX);
    uint8_t result = read8(VCNL4010_COMMAND);
    2a70:	80 e8       	ldi	r24, 0x80	; 128
    2a72:	0e 94 2a 06 	call	0xc54	; 0xc54 <Adafruit_VCNL4010::read8(unsigned char) [clone .constprop.55]>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:122
    // Serial.print("Ready = 0x"); Serial.println(result, HEX);
    if (result & VCNL4010_PROXIMITYREADY) {
    2a76:	85 ff       	sbrs	r24, 5
    2a78:	3b c0       	rjmp	.+118    	; 0x2af0 <main+0x1468>
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:123
      return read16(VCNL4010_PROXIMITYDATA);
    2a7a:	87 e8       	ldi	r24, 0x87	; 135
    2a7c:	0e 94 0c 06 	call	0xc18	; 0xc18 <Adafruit_VCNL4010::read16(unsigned char) [clone .constprop.56]>
loop():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:70
    data.tuReading = vcnl.readProximity();
    2a80:	38 2f       	mov	r19, r24
    2a82:	32 95       	swap	r19
    2a84:	33 0f       	add	r19, r19
    2a86:	30 7e       	andi	r19, 0xE0	; 224
    2a88:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <data+0x8>
    2a8c:	2f 71       	andi	r18, 0x1F	; 31
    2a8e:	23 2b       	or	r18, r19
    2a90:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <data+0x8>
    2a94:	29 2f       	mov	r18, r25
    2a96:	22 95       	swap	r18
    2a98:	22 0f       	add	r18, r18
    2a9a:	20 7e       	andi	r18, 0xE0	; 224
    2a9c:	86 95       	lsr	r24
    2a9e:	86 95       	lsr	r24
    2aa0:	86 95       	lsr	r24
    2aa2:	82 2b       	or	r24, r18
    2aa4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <data+0x9>
    2aa8:	89 2f       	mov	r24, r25
    2aaa:	86 95       	lsr	r24
    2aac:	86 95       	lsr	r24
    2aae:	86 95       	lsr	r24
    2ab0:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <data+0xa>
    2ab4:	90 7e       	andi	r25, 0xE0	; 224
    2ab6:	98 2b       	or	r25, r24
    2ab8:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <data+0xa>
    2abc:	e8 e1       	ldi	r30, 0x18	; 24
    2abe:	f2 e0       	ldi	r31, 0x02	; 2
    2ac0:	ab e6       	ldi	r26, 0x6B	; 107
    2ac2:	b3 e0       	ldi	r27, 0x03	; 3
_ZN6Packet5txObjI15single_record_tEEjRKT_RKjS6_.isra.4():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.h:104
    2ac4:	81 91       	ld	r24, Z+
    2ac6:	8d 93       	st	X+, r24
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.h:102
		if ((len + index) > MAX_PACKET_SIZE)
			maxIndex = MAX_PACKET_SIZE;
		else
			maxIndex = len + index;

		for (uint16_t i = index; i < maxIndex; i++)
    2ac8:	68 e2       	ldi	r22, 0x28	; 40
    2aca:	72 e0       	ldi	r23, 0x02	; 2
    2acc:	6e 17       	cp	r22, r30
    2ace:	7f 07       	cpc	r23, r31
    2ad0:	c9 f7       	brne	.-14     	; 0x2ac4 <main+0x143c>
loop():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor/OpenOBS_sensor.ino:73
    
    //Fill buffer with a data struct and then send it.
    sendSize = myTransfer.txObj(data, 0);
    2ad2:	80 e1       	ldi	r24, 0x10	; 16
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <sendSize+0x1>
    2ada:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <sendSize>
    2ade:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <main+0x382>
readAmbient():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:149
    uint8_t result = read8(VCNL4010_COMMAND);
    // Serial.print("Ready = 0x"); Serial.println(result, HEX);
    if (result & VCNL4010_AMBIENTREADY) {
      return read16(VCNL4010_AMBIENTDATA);
    }
    delay(1);
    2ae2:	61 e0       	ldi	r22, 0x01	; 1
    2ae4:	70 e0       	ldi	r23, 0x00	; 0
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 bf 03 	call	0x77e	; 0x77e <delay>
    2aee:	8e cf       	rjmp	.-228    	; 0x2a0c <main+0x1384>
readProximity():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\Adafruit_VCNL4010/Adafruit_VCNL4010.cpp:125
    uint8_t result = read8(VCNL4010_COMMAND);
    // Serial.print("Ready = 0x"); Serial.println(result, HEX);
    if (result & VCNL4010_PROXIMITYREADY) {
      return read16(VCNL4010_PROXIMITYDATA);
    }
    delay(1);
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 bf 03 	call	0x77e	; 0x77e <delay>
    2afc:	b9 cf       	rjmp	.-142    	; 0x2a70 <main+0x13e8>
_ZN6Packet5rxObjIhEEjRKT_RKjS5_.isra.0():
C:\Users\Ted\Documents\GitHub\OpenOBS-Iridium\serial_sensor\firmware\OpenOBS_sensor\src\libs\SerialTransfer/Packet.h:146
		else
			maxIndex = len + index;

		for (uint16_t i = index; i < maxIndex; i++)
		{
			*ptr = rxBuff[i];
    2afe:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <myTransfer+0xfe>
    2b02:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <request>
    2b06:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <main+0x35a>

00002b0a <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    2b0a:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    2b0c:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    2b0e:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    2b10:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    2b14:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    2b16:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    2b18:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    2b1a:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    2b1c:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    2b1e:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    2b20:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    2b22:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    2b24:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    2b26:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    2b28:	08 95       	ret

00002b2a <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    2b2a:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    2b2c:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    2b2e:	16 f4       	brtc	.+4      	; 0x2b34 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    2b30:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    2b32:	07 d0       	rcall	.+14     	; 0x2b42 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    2b34:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    2b36:	09 d0       	rcall	.+18     	; 0x2b4a <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    2b38:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    2b3c:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    2b3e:	05 d0       	rcall	.+10     	; 0x2b4a <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    2b40:	3e f4       	brtc	.+14     	; 0x2b50 <__divmodhi4_exit>

00002b42 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    2b42:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    2b44:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    2b46:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    2b48:	08 95       	ret

00002b4a <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    2b4a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    2b4c:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    2b4e:	7f 4f       	sbci	r23, 0xFF	; 255

00002b50 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    2b50:	08 95       	ret

00002b52 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    2b52:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2b54:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2b56:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2b58:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2b5a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2b5c:	0d c0       	rjmp	.+26     	; 0x2b78 <__udivmodsi4_ep>

00002b5e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    2b5e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    2b60:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    2b62:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2b64:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2b66:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2b68:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2b6a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2b6c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    2b6e:	20 f0       	brcs	.+8      	; 0x2b78 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    2b70:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    2b72:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2b74:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2b76:	f5 0b       	sbc	r31, r21

00002b78 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2b78:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2b7a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    2b7c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    2b7e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    2b80:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    2b82:	69 f7       	brne	.-38     	; 0x2b5e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    2b84:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    2b86:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    2b88:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    2b8a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    2b8c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    2b8e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    2b90:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    2b92:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    2b94:	08 95       	ret

00002b96 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2b96:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2b98:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    2b9a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    2b9c:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    2b9e:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    2ba0:	09 94       	ijmp

00002ba2 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    2ba2:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    2ba6:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    2ba8:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    2baa:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    2bac:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    2bae:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    2bb0:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    2bb2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    2bb4:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    2bb6:	08 95       	ret

00002bb8 <__muldi3>:
__muldi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:894
    2bb8:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:895
    2bba:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:896
    2bbc:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:897
    2bbe:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:902
    2bc0:	9a 9d       	mul	r25, r10
    2bc2:	f0 2d       	mov	r31, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:903
    2bc4:	21 9f       	mul	r18, r17
    2bc6:	f0 0d       	add	r31, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:904
    2bc8:	8b 9d       	mul	r24, r11
    2bca:	f0 0d       	add	r31, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:905
    2bcc:	8a 9d       	mul	r24, r10
    2bce:	e0 2d       	mov	r30, r0
    2bd0:	f1 0d       	add	r31, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:906
    2bd2:	03 9f       	mul	r16, r19
    2bd4:	f0 0d       	add	r31, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:907
    2bd6:	02 9f       	mul	r16, r18
    2bd8:	e0 0d       	add	r30, r0
    2bda:	f1 1d       	adc	r31, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:910
    2bdc:	4e 9d       	mul	r20, r14
    2bde:	e0 0d       	add	r30, r0
    2be0:	f1 1d       	adc	r31, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:911
    2be2:	5e 9d       	mul	r21, r14
    2be4:	f0 0d       	add	r31, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:912
    2be6:	4f 9d       	mul	r20, r15
    2be8:	f0 0d       	add	r31, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:914
    2bea:	7f 93       	push	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:915
    2bec:	6f 93       	push	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:916
    2bee:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:917
    2bf0:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:918
    2bf2:	5f 93       	push	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:919
    2bf4:	4f 93       	push	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:922
    2bf6:	d5 01       	movw	r26, r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:923
    2bf8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:924
    2bfc:	8b 01       	movw	r16, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:925
    2bfe:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:928
    2c00:	d7 01       	movw	r26, r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:929
    2c02:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__umulhisi3>
    2c06:	eb 01       	movw	r28, r22
    2c08:	e8 0f       	add	r30, r24
    2c0a:	f9 1f       	adc	r31, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:931
    2c0c:	d6 01       	movw	r26, r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:933
    2c0e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__muldi3_6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:935
    2c12:	2f 91       	pop	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:936
    2c14:	3f 91       	pop	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:938
    2c16:	d6 01       	movw	r26, r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:939
    2c18:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__umulhisi3>
    2c1c:	c6 0f       	add	r28, r22
    2c1e:	d7 1f       	adc	r29, r23
    2c20:	e8 1f       	adc	r30, r24
    2c22:	f9 1f       	adc	r31, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:941
    2c24:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:942
    2c26:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:944
    2c28:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__muldi3_6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:946
    2c2c:	2f 91       	pop	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:947
    2c2e:	3f 91       	pop	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:949
    2c30:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__umulhisi3>
    2c34:	c6 0f       	add	r28, r22
    2c36:	d7 1f       	adc	r29, r23
    2c38:	e8 1f       	adc	r30, r24
    2c3a:	f9 1f       	adc	r31, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:952
    2c3c:	d6 01       	movw	r26, r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:953
    2c3e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__umulhisi3>
    2c42:	e6 0f       	add	r30, r22
    2c44:	f7 1f       	adc	r31, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:956
    2c46:	98 01       	movw	r18, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:958
    2c48:	be 01       	movw	r22, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:959
    2c4a:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:961
    2c4c:	0f 91       	pop	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:962
    2c4e:	1f 91       	pop	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:963
    2c50:	cf 91       	pop	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:964
    2c52:	df 91       	pop	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:965
    2c54:	08 95       	ret

00002c56 <__muldi3_6>:
__muldi3_6():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:973
    2c56:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:974
    2c5a:	46 0f       	add	r20, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:975
    2c5c:	57 1f       	adc	r21, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:976
    2c5e:	c8 1f       	adc	r28, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:977
    2c60:	d9 1f       	adc	r29, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:978
    2c62:	08 f4       	brcc	.+2      	; 0x2c66 <__muldi3_6+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:979
    2c64:	31 96       	adiw	r30, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:980
    2c66:	08 95       	ret

00002c68 <__mulsidi3>:
__mulsidi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1194
    2c68:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1195
    2c6a:	57 ff       	sbrs	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1196
    2c6c:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__umulsidi3_helper>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1199
    2c70:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1200
    2c72:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1201
    2c74:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__umulsidi3_helper>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1203
    2c78:	6e 1b       	sub	r22, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1204
    2c7a:	7f 0b       	sbc	r23, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1205
    2c7c:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1206
    2c7e:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1207
    2c80:	8a 0b       	sbc	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1208
    2c82:	9b 0b       	sbc	r25, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1209
    2c84:	08 95       	ret

00002c86 <__umulsidi3>:
__umulsidi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1130
    2c86:	e8 94       	clt

00002c88 <__umulsidi3_helper>:
__umulsidi3_helper():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1135
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1136
    2c8c:	fc 01       	movw	r30, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1139
    2c8e:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1140
    2c90:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1141
    2c94:	7f 93       	push	r23
    2c96:	6f 93       	push	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1142
    2c98:	e9 01       	movw	r28, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1143
    2c9a:	9a 01       	movw	r18, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1144
    2c9c:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1145
    2c9e:	bf 93       	push	r27
    2ca0:	af 93       	push	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1146
    2ca2:	3f 93       	push	r19
    2ca4:	2f 93       	push	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1151
    2ca6:	df 01       	movw	r26, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1152
    2ca8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1154
    2cac:	26 f4       	brtc	.+8      	; 0x2cb6 <__umulsidi3_helper+0x2e>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1156
    2cae:	6c 1b       	sub	r22, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1157
    2cb0:	7d 0b       	sbc	r23, r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1158
    2cb2:	82 0b       	sbc	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1159
    2cb4:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1160
    2cb6:	9e 01       	movw	r18, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1161
    2cb8:	eb 01       	movw	r28, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1162
    2cba:	fc 01       	movw	r30, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1168
    2cbc:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__muldi3_6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1170
    2cc0:	af 91       	pop	r26
    2cc2:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1171
    2cc4:	2f 91       	pop	r18
    2cc6:	3f 91       	pop	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1172
    2cc8:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__muldi3_6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1175
    2ccc:	be 01       	movw	r22, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1176
    2cce:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1177
    2cd0:	f9 01       	movw	r30, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1178
    2cd2:	2f 91       	pop	r18
    2cd4:	3f 91       	pop	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1181
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1182
    2cda:	08 95       	ret

00002cdc <__ashldi3>:
__ashldi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3169
    2cdc:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3170
    2cde:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3171
    2ce0:	90 f0       	brcs	.+36     	; 0x2d06 <__ashldi3+0x2a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3172
    2ce2:	98 2f       	mov	r25, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3173
    2ce4:	87 2f       	mov	r24, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3174
    2ce6:	76 2f       	mov	r23, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3175
    2ce8:	65 2f       	mov	r22, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3176
    2cea:	54 2f       	mov	r21, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3177
    2cec:	43 2f       	mov	r20, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3178
    2cee:	32 2f       	mov	r19, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3179
    2cf0:	22 27       	eor	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3180
    2cf2:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3181
    2cf4:	f4 cf       	rjmp	.-24     	; 0x2cde <__ashldi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3182
    2cf6:	22 0f       	add	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3183
    2cf8:	33 1f       	adc	r19, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3184
    2cfa:	44 1f       	adc	r20, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3185
    2cfc:	55 1f       	adc	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3186
    2cfe:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3187
    2d00:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3188
    2d02:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3189
    2d04:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3190
    2d06:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3191
    2d08:	b2 f7       	brpl	.-20     	; 0x2cf6 <__ashldi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3192
    2d0a:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3193
    2d0c:	08 95       	ret

00002d0e <__ashrdi3>:
__ashrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    2d0e:	97 fd       	sbrc	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    2d10:	10 94       	com	r1

00002d12 <__lshrdi3>:
__lshrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    2d12:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    2d14:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    2d16:	98 f0       	brcs	.+38     	; 0x2d3e <__lshrdi3+0x2c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    2d18:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    2d1a:	23 2f       	mov	r18, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    2d1c:	34 2f       	mov	r19, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    2d1e:	45 2f       	mov	r20, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    2d20:	56 2f       	mov	r21, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    2d22:	67 2f       	mov	r22, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    2d24:	78 2f       	mov	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    2d26:	89 2f       	mov	r24, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    2d28:	91 2d       	mov	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    2d2a:	f4 cf       	rjmp	.-24     	; 0x2d14 <__lshrdi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    2d2c:	15 94       	asr	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    2d2e:	97 95       	ror	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    2d30:	87 95       	ror	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    2d32:	77 95       	ror	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    2d34:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    2d36:	57 95       	ror	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    2d38:	47 95       	ror	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    2d3a:	37 95       	ror	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    2d3c:	27 95       	ror	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    2d3e:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    2d40:	aa f7       	brpl	.-22     	; 0x2d2c <__lshrdi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    2d42:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    2d44:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    2d46:	08 95       	ret

00002d48 <__adddi3>:
__adddi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2051
    2d48:	2a 0d       	add	r18, r10
    2d4a:	3b 1d       	adc	r19, r11
    2d4c:	4c 1d       	adc	r20, r12
    2d4e:	5d 1d       	adc	r21, r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2052
    2d50:	6e 1d       	adc	r22, r14
    2d52:	7f 1d       	adc	r23, r15
    2d54:	80 1f       	adc	r24, r16
    2d56:	91 1f       	adc	r25, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2053
    2d58:	08 95       	ret

00002d5a <__adddi3_s8>:
__adddi3_s8():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2064
    2d5a:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2065
    2d5c:	a7 fd       	sbrc	r26, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2066
    2d5e:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2067
    2d60:	2a 0f       	add	r18, r26
    2d62:	30 1d       	adc	r19, r0
    2d64:	40 1d       	adc	r20, r0
    2d66:	50 1d       	adc	r21, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2068
    2d68:	60 1d       	adc	r22, r0
    2d6a:	70 1d       	adc	r23, r0
    2d6c:	80 1d       	adc	r24, r0
    2d6e:	90 1d       	adc	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2069
    2d70:	08 95       	ret

00002d72 <__subdi3>:
__subdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2080
    2d72:	2a 19       	sub	r18, r10
    2d74:	3b 09       	sbc	r19, r11
    2d76:	4c 09       	sbc	r20, r12
    2d78:	5d 09       	sbc	r21, r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2081
    2d7a:	6e 09       	sbc	r22, r14
    2d7c:	7f 09       	sbc	r23, r15
    2d7e:	80 0b       	sbc	r24, r16
    2d80:	91 0b       	sbc	r25, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2082
    2d82:	08 95       	ret

00002d84 <__cmpdi2_s8>:
__cmpdi2_s8():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2102
    2d84:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2103
    2d86:	a7 fd       	sbrc	r26, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2104
    2d88:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2105
    2d8a:	2a 17       	cp	r18, r26
    2d8c:	30 05       	cpc	r19, r0
    2d8e:	40 05       	cpc	r20, r0
    2d90:	50 05       	cpc	r21, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2106
    2d92:	60 05       	cpc	r22, r0
    2d94:	70 05       	cpc	r23, r0
    2d96:	80 05       	cpc	r24, r0
    2d98:	90 05       	cpc	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2107
    2d9a:	08 95       	ret

00002d9c <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    2d9c:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    2d9e:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    2da0:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    2da2:	07 c0       	rjmp	.+14     	; 0x2db2 <__udivmodhi4_ep>

00002da4 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    2da4:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    2da6:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    2da8:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    2daa:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    2dac:	10 f0       	brcs	.+4      	; 0x2db2 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    2dae:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    2db0:	b7 0b       	sbc	r27, r23

00002db2 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    2db2:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    2db4:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    2db6:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    2db8:	a9 f7       	brne	.-22     	; 0x2da4 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    2dba:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    2dbc:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    2dbe:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    2dc0:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    2dc2:	08 95       	ret

00002dc4 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    2dc4:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    2dc6:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    2dc8:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    2dca:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    2dcc:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    2dce:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    2dd0:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    2dd2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    2dd4:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    2dd6:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    2dd8:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    2dda:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    2ddc:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    2dde:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    2de0:	08 95       	ret

00002de2 <malloc>:
malloc():
    2de2:	0f 93       	push	r16
    2de4:	1f 93       	push	r17
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	82 30       	cpi	r24, 0x02	; 2
    2dec:	91 05       	cpc	r25, r1
    2dee:	10 f4       	brcc	.+4      	; 0x2df4 <malloc+0x12>
    2df0:	82 e0       	ldi	r24, 0x02	; 2
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <__flp>
    2df8:	f0 91 8f 05 	lds	r31, 0x058F	; 0x80058f <__flp+0x1>
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	a0 e0       	ldi	r26, 0x00	; 0
    2e04:	30 97       	sbiw	r30, 0x00	; 0
    2e06:	99 f4       	brne	.+38     	; 0x2e2e <malloc+0x4c>
    2e08:	21 15       	cp	r18, r1
    2e0a:	31 05       	cpc	r19, r1
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <malloc+0x2e>
    2e0e:	4a c0       	rjmp	.+148    	; 0x2ea4 <malloc+0xc2>
    2e10:	28 1b       	sub	r18, r24
    2e12:	39 0b       	sbc	r19, r25
    2e14:	24 30       	cpi	r18, 0x04	; 4
    2e16:	31 05       	cpc	r19, r1
    2e18:	d8 f5       	brcc	.+118    	; 0x2e90 <malloc+0xae>
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1e:	61 15       	cp	r22, r1
    2e20:	71 05       	cpc	r23, r1
    2e22:	89 f1       	breq	.+98     	; 0x2e86 <malloc+0xa4>
    2e24:	fb 01       	movw	r30, r22
    2e26:	93 83       	std	Z+3, r25	; 0x03
    2e28:	82 83       	std	Z+2, r24	; 0x02
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	11 c0       	rjmp	.+34     	; 0x2e50 <malloc+0x6e>
    2e2e:	40 81       	ld	r20, Z
    2e30:	51 81       	ldd	r21, Z+1	; 0x01
    2e32:	02 81       	ldd	r16, Z+2	; 0x02
    2e34:	13 81       	ldd	r17, Z+3	; 0x03
    2e36:	48 17       	cp	r20, r24
    2e38:	59 07       	cpc	r21, r25
    2e3a:	e0 f0       	brcs	.+56     	; 0x2e74 <malloc+0x92>
    2e3c:	48 17       	cp	r20, r24
    2e3e:	59 07       	cpc	r21, r25
    2e40:	99 f4       	brne	.+38     	; 0x2e68 <malloc+0x86>
    2e42:	10 97       	sbiw	r26, 0x00	; 0
    2e44:	61 f0       	breq	.+24     	; 0x2e5e <malloc+0x7c>
    2e46:	12 96       	adiw	r26, 0x02	; 2
    2e48:	0c 93       	st	X, r16
    2e4a:	12 97       	sbiw	r26, 0x02	; 2
    2e4c:	13 96       	adiw	r26, 0x03	; 3
    2e4e:	1c 93       	st	X, r17
    2e50:	32 96       	adiw	r30, 0x02	; 2
    2e52:	cf 01       	movw	r24, r30
    2e54:	df 91       	pop	r29
    2e56:	cf 91       	pop	r28
    2e58:	1f 91       	pop	r17
    2e5a:	0f 91       	pop	r16
    2e5c:	08 95       	ret
    2e5e:	00 93 8e 05 	sts	0x058E, r16	; 0x80058e <__flp>
    2e62:	10 93 8f 05 	sts	0x058F, r17	; 0x80058f <__flp+0x1>
    2e66:	f4 cf       	rjmp	.-24     	; 0x2e50 <malloc+0x6e>
    2e68:	21 15       	cp	r18, r1
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	51 f0       	breq	.+20     	; 0x2e82 <malloc+0xa0>
    2e6e:	42 17       	cp	r20, r18
    2e70:	53 07       	cpc	r21, r19
    2e72:	38 f0       	brcs	.+14     	; 0x2e82 <malloc+0xa0>
    2e74:	a9 01       	movw	r20, r18
    2e76:	db 01       	movw	r26, r22
    2e78:	9a 01       	movw	r18, r20
    2e7a:	bd 01       	movw	r22, r26
    2e7c:	df 01       	movw	r26, r30
    2e7e:	f8 01       	movw	r30, r16
    2e80:	c1 cf       	rjmp	.-126    	; 0x2e04 <malloc+0x22>
    2e82:	ef 01       	movw	r28, r30
    2e84:	f9 cf       	rjmp	.-14     	; 0x2e78 <malloc+0x96>
    2e86:	90 93 8f 05 	sts	0x058F, r25	; 0x80058f <__flp+0x1>
    2e8a:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <__flp>
    2e8e:	cd cf       	rjmp	.-102    	; 0x2e2a <malloc+0x48>
    2e90:	fe 01       	movw	r30, r28
    2e92:	e2 0f       	add	r30, r18
    2e94:	f3 1f       	adc	r31, r19
    2e96:	81 93       	st	Z+, r24
    2e98:	91 93       	st	Z+, r25
    2e9a:	22 50       	subi	r18, 0x02	; 2
    2e9c:	31 09       	sbc	r19, r1
    2e9e:	39 83       	std	Y+1, r19	; 0x01
    2ea0:	28 83       	st	Y, r18
    2ea2:	d7 cf       	rjmp	.-82     	; 0x2e52 <malloc+0x70>
    2ea4:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <__brkval>
    2ea8:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <__brkval+0x1>
    2eac:	23 2b       	or	r18, r19
    2eae:	41 f4       	brne	.+16     	; 0x2ec0 <malloc+0xde>
    2eb0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2eb4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2eb8:	30 93 8d 05 	sts	0x058D, r19	; 0x80058d <__brkval+0x1>
    2ebc:	20 93 8c 05 	sts	0x058C, r18	; 0x80058c <__brkval>
    2ec0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2ec4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2ec8:	21 15       	cp	r18, r1
    2eca:	31 05       	cpc	r19, r1
    2ecc:	41 f4       	brne	.+16     	; 0x2ede <malloc+0xfc>
    2ece:	2d b7       	in	r18, 0x3d	; 61
    2ed0:	3e b7       	in	r19, 0x3e	; 62
    2ed2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2ed6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2eda:	24 1b       	sub	r18, r20
    2edc:	35 0b       	sbc	r19, r21
    2ede:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <__brkval>
    2ee2:	f0 91 8d 05 	lds	r31, 0x058D	; 0x80058d <__brkval+0x1>
    2ee6:	e2 17       	cp	r30, r18
    2ee8:	f3 07       	cpc	r31, r19
    2eea:	a0 f4       	brcc	.+40     	; 0x2f14 <malloc+0x132>
    2eec:	2e 1b       	sub	r18, r30
    2eee:	3f 0b       	sbc	r19, r31
    2ef0:	28 17       	cp	r18, r24
    2ef2:	39 07       	cpc	r19, r25
    2ef4:	78 f0       	brcs	.+30     	; 0x2f14 <malloc+0x132>
    2ef6:	ac 01       	movw	r20, r24
    2ef8:	4e 5f       	subi	r20, 0xFE	; 254
    2efa:	5f 4f       	sbci	r21, 0xFF	; 255
    2efc:	24 17       	cp	r18, r20
    2efe:	35 07       	cpc	r19, r21
    2f00:	48 f0       	brcs	.+18     	; 0x2f14 <malloc+0x132>
    2f02:	4e 0f       	add	r20, r30
    2f04:	5f 1f       	adc	r21, r31
    2f06:	50 93 8d 05 	sts	0x058D, r21	; 0x80058d <__brkval+0x1>
    2f0a:	40 93 8c 05 	sts	0x058C, r20	; 0x80058c <__brkval>
    2f0e:	81 93       	st	Z+, r24
    2f10:	91 93       	st	Z+, r25
    2f12:	9f cf       	rjmp	.-194    	; 0x2e52 <malloc+0x70>
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	e0 e0       	ldi	r30, 0x00	; 0
    2f18:	9c cf       	rjmp	.-200    	; 0x2e52 <malloc+0x70>

00002f1a <free>:
free():
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	e9 f0       	breq	.+58     	; 0x2f5c <free+0x42>
    2f22:	fc 01       	movw	r30, r24
    2f24:	32 97       	sbiw	r30, 0x02	; 2
    2f26:	13 82       	std	Z+3, r1	; 0x03
    2f28:	12 82       	std	Z+2, r1	; 0x02
    2f2a:	a0 91 8e 05 	lds	r26, 0x058E	; 0x80058e <__flp>
    2f2e:	b0 91 8f 05 	lds	r27, 0x058F	; 0x80058f <__flp+0x1>
    2f32:	ed 01       	movw	r28, r26
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	10 97       	sbiw	r26, 0x00	; 0
    2f3a:	a1 f4       	brne	.+40     	; 0x2f64 <free+0x4a>
    2f3c:	20 81       	ld	r18, Z
    2f3e:	31 81       	ldd	r19, Z+1	; 0x01
    2f40:	82 0f       	add	r24, r18
    2f42:	93 1f       	adc	r25, r19
    2f44:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <__brkval>
    2f48:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <__brkval+0x1>
    2f4c:	28 17       	cp	r18, r24
    2f4e:	39 07       	cpc	r19, r25
    2f50:	09 f0       	breq	.+2      	; 0x2f54 <free+0x3a>
    2f52:	61 c0       	rjmp	.+194    	; 0x3016 <free+0xfc>
    2f54:	f0 93 8d 05 	sts	0x058D, r31	; 0x80058d <__brkval+0x1>
    2f58:	e0 93 8c 05 	sts	0x058C, r30	; 0x80058c <__brkval>
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	08 95       	ret
    2f62:	ea 01       	movw	r28, r20
    2f64:	ce 17       	cp	r28, r30
    2f66:	df 07       	cpc	r29, r31
    2f68:	e8 f5       	brcc	.+122    	; 0x2fe4 <free+0xca>
    2f6a:	4a 81       	ldd	r20, Y+2	; 0x02
    2f6c:	5b 81       	ldd	r21, Y+3	; 0x03
    2f6e:	9e 01       	movw	r18, r28
    2f70:	41 15       	cp	r20, r1
    2f72:	51 05       	cpc	r21, r1
    2f74:	b1 f7       	brne	.-20     	; 0x2f62 <free+0x48>
    2f76:	e9 01       	movw	r28, r18
    2f78:	fb 83       	std	Y+3, r31	; 0x03
    2f7a:	ea 83       	std	Y+2, r30	; 0x02
    2f7c:	49 91       	ld	r20, Y+
    2f7e:	59 91       	ld	r21, Y+
    2f80:	c4 0f       	add	r28, r20
    2f82:	d5 1f       	adc	r29, r21
    2f84:	ec 17       	cp	r30, r28
    2f86:	fd 07       	cpc	r31, r29
    2f88:	61 f4       	brne	.+24     	; 0x2fa2 <free+0x88>
    2f8a:	80 81       	ld	r24, Z
    2f8c:	91 81       	ldd	r25, Z+1	; 0x01
    2f8e:	02 96       	adiw	r24, 0x02	; 2
    2f90:	84 0f       	add	r24, r20
    2f92:	95 1f       	adc	r25, r21
    2f94:	e9 01       	movw	r28, r18
    2f96:	99 83       	std	Y+1, r25	; 0x01
    2f98:	88 83       	st	Y, r24
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	9b 83       	std	Y+3, r25	; 0x03
    2fa0:	8a 83       	std	Y+2, r24	; 0x02
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	e0 e0       	ldi	r30, 0x00	; 0
    2fa6:	12 96       	adiw	r26, 0x02	; 2
    2fa8:	8d 91       	ld	r24, X+
    2faa:	9c 91       	ld	r25, X
    2fac:	13 97       	sbiw	r26, 0x03	; 3
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	b9 f5       	brne	.+110    	; 0x3020 <free+0x106>
    2fb2:	2d 91       	ld	r18, X+
    2fb4:	3c 91       	ld	r19, X
    2fb6:	11 97       	sbiw	r26, 0x01	; 1
    2fb8:	cd 01       	movw	r24, r26
    2fba:	02 96       	adiw	r24, 0x02	; 2
    2fbc:	82 0f       	add	r24, r18
    2fbe:	93 1f       	adc	r25, r19
    2fc0:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <__brkval>
    2fc4:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <__brkval+0x1>
    2fc8:	28 17       	cp	r18, r24
    2fca:	39 07       	cpc	r19, r25
    2fcc:	39 f6       	brne	.-114    	; 0x2f5c <free+0x42>
    2fce:	30 97       	sbiw	r30, 0x00	; 0
    2fd0:	51 f5       	brne	.+84     	; 0x3026 <free+0x10c>
    2fd2:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <__flp+0x1>
    2fd6:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <__flp>
    2fda:	b0 93 8d 05 	sts	0x058D, r27	; 0x80058d <__brkval+0x1>
    2fde:	a0 93 8c 05 	sts	0x058C, r26	; 0x80058c <__brkval>
    2fe2:	bc cf       	rjmp	.-136    	; 0x2f5c <free+0x42>
    2fe4:	d3 83       	std	Z+3, r29	; 0x03
    2fe6:	c2 83       	std	Z+2, r28	; 0x02
    2fe8:	40 81       	ld	r20, Z
    2fea:	51 81       	ldd	r21, Z+1	; 0x01
    2fec:	84 0f       	add	r24, r20
    2fee:	95 1f       	adc	r25, r21
    2ff0:	c8 17       	cp	r28, r24
    2ff2:	d9 07       	cpc	r29, r25
    2ff4:	61 f4       	brne	.+24     	; 0x300e <free+0xf4>
    2ff6:	4e 5f       	subi	r20, 0xFE	; 254
    2ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    2ffa:	88 81       	ld	r24, Y
    2ffc:	99 81       	ldd	r25, Y+1	; 0x01
    2ffe:	48 0f       	add	r20, r24
    3000:	59 1f       	adc	r21, r25
    3002:	51 83       	std	Z+1, r21	; 0x01
    3004:	40 83       	st	Z, r20
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	9b 81       	ldd	r25, Y+3	; 0x03
    300a:	93 83       	std	Z+3, r25	; 0x03
    300c:	82 83       	std	Z+2, r24	; 0x02
    300e:	21 15       	cp	r18, r1
    3010:	31 05       	cpc	r19, r1
    3012:	09 f0       	breq	.+2      	; 0x3016 <free+0xfc>
    3014:	b0 cf       	rjmp	.-160    	; 0x2f76 <free+0x5c>
    3016:	f0 93 8f 05 	sts	0x058F, r31	; 0x80058f <__flp+0x1>
    301a:	e0 93 8e 05 	sts	0x058E, r30	; 0x80058e <__flp>
    301e:	9e cf       	rjmp	.-196    	; 0x2f5c <free+0x42>
    3020:	fd 01       	movw	r30, r26
    3022:	dc 01       	movw	r26, r24
    3024:	c0 cf       	rjmp	.-128    	; 0x2fa6 <free+0x8c>
    3026:	13 82       	std	Z+3, r1	; 0x03
    3028:	12 82       	std	Z+2, r1	; 0x02
    302a:	d7 cf       	rjmp	.-82     	; 0x2fda <free+0xc0>

0000302c <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    302c:	f8 94       	cli

0000302e <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    302e:	ff cf       	rjmp	.-2      	; 0x302e <__stop_program>
